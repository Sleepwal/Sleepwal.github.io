<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LaTeX常用公式</title>
      <link href="/2023/08/12/LaTeX%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/08/12/LaTeX%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>_表示下标、^表示上标，但上下标内容不止一个字符时，需用大括号括起来。单引号’表示求导</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">a<span class="built_in">^</span>&#123;-1&#125;<span class="built_in">_</span>&#123;-2&#125; + b<span class="built_in">^</span>2<span class="built_in">_</span>1 = x&#x27; + x&#x27;&#x27;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>a^{-1}_{-2} + b^2_1 &#x3D; x’ + x’’<br>$$</p><h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><p>\frac表示分式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;10&#125;&#123;20 + 3&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\frac{10}{20 + 3}<br>$$</p><h2 id="积分、极限、求和、乘积"><a href="#积分、极限、求和、乘积" class="headerlink" title="积分、极限、求和、乘积"></a>积分、极限、求和、乘积</h2><p>命令：\int表示积分，\infty无穷大，\lim表示极限， \sum表示求和，\prod表示乘积，^、_表示上、下限</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;1&#125;<span class="built_in">^</span>&#123;10&#125; x<span class="keyword">\mathrm</span>&#123;d&#125;x </span><br><span class="line">+ <span class="keyword">\lim</span><span class="built_in">_</span>&#123;x <span class="keyword">\to</span> <span class="keyword">\infty</span>&#125;x<span class="built_in">^</span>&#123;10&#125; </span><br><span class="line">+ <span class="keyword">\sum</span><span class="built_in">_</span>&#123;n=1&#125;<span class="built_in">^</span>&#123;30&#125; </span><br><span class="line">+ <span class="keyword">\prod</span><span class="built_in">_</span>&#123;i=2&#125;<span class="built_in">^</span>&#123;30&#125;y<span class="built_in">_</span>i</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\int_{1}^{10} x\mathrm{d}x + \lim_{x \to \infty}x^{10} + \sum_{n&#x3D;1}^{30} + \prod_{i&#x3D;2}^{30}y_i<br>$$</p><p>参考文章</p><ul><li><a href="https://zhuanlan.zhihu.com/p/110756681">LaTeX 公式篇 - 知乎 (zhihu.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年CSP-J1真题</title>
      <link href="/2023/08/12/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/"/>
      <url>/2023/08/12/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单向选择题"><a href="#一、单向选择题" class="headerlink" title="一、单向选择题"></a>一、单向选择题</h1><p>第 1 题<br>以下不属于面向对象程序设计语言的是（ ）。</p><p>A. C++</p><p>B. Python</p><p>C. Java</p><p>D. C</p><blockquote><p>选D。C语言没有对象，是面向过程语言。</p></blockquote><p>第 2 题<br>以下奖项与计算机领域最相关的是（ ）。</p><p>A. 奥斯卡奖</p><p>B. 图灵奖</p><p>C. 诺贝尔奖</p><p>D. 普利策奖</p><blockquote><p>选B。</p></blockquote><p>第 3 题<br>目前主流的计算机储存数据最终都是转换成（ ）数据进行储存。</p><p>A. 二进制</p><p>B. 十进制</p><p>C. 八进制</p><p>D. 十六进制</p><blockquote><p>选A。</p></blockquote><p>第 4 题<br>以比较作为基本运算，在 N 个数中找出最大数，最坏情况下所需要的最少的比较次数为 （ ）。</p><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812160644484.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812160644484.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812160644484"></p><blockquote><p>选C。第一个数跟第二个数比，大的跟第三个数比，一共比 N - 1 次。</p></blockquote><hr><p>第 5 题<br>对于入栈顺序为 a,b,c,d,e 的序列，下列（ ）不是合法的出栈序列。</p><p> A. a,b,c,d,e</p><p>B. e,d,c,b,a</p><p>C. b,a,c,d,e</p><p>D. c,d,a,e,b</p><blockquote><p>选D。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"> AA(&quot;出栈顺序</span><br><span class="line">      ---</span><br><span class="line">      栈&quot;) --&gt; </span><br><span class="line">      A(&quot;</span><br><span class="line">      ---</span><br><span class="line">      c</span><br><span class="line">        b</span><br><span class="line">        a&quot;) --&gt;|c出栈| B(&quot;c</span><br><span class="line">        ---</span><br><span class="line">        b</span><br><span class="line">        a&quot;) --&gt;|d入栈| C(&quot;c</span><br><span class="line">        ---</span><br><span class="line">        d</span><br><span class="line">        b</span><br><span class="line">        a&quot;) --&gt;|d出栈| D(&quot;c d</span><br><span class="line">        ---</span><br><span class="line">        b</span><br><span class="line">        a&quot;) --&gt; |a出栈| E(a不在栈顶,错误)</span><br></pre></td></tr></table></figure><p>第 6 题<br>对于有 n 个顶点、m 条边的无向连通图 (m&gt;n)，需要删掉（ ）条边才能使其成为一棵树。</p><p> A. n − 1</p><p>B. m − n</p><p>C. m − n − 1</p><p>D. m − n + 1</p><blockquote><p>选D。树有n - 1条边，把这个图变成树，即变成n - 1条边，需要删掉 <code>m - (n - 1) = m - n + 1</code> 条边。</p></blockquote><p>第 7 题<br>二进制数101.11 对应的十进制数是（ ）。</p><p> A. 6.5</p><p>B. 5.5</p><p>C. 5.75</p><p>D. 5.25</p><blockquote><p>选C。</p></blockquote><p>$$<br>1<em>2^2+1</em>2^0+1<em>2^{-1}+1</em>2^{-2} &#x3D; 5.75<br>$$</p><p>第 8 题</p><p>如果一棵二叉树只有根结点，那么这棵二叉树高度为 1。请问高度为 5 的完全二叉树有 （ ）种不同的形态？</p><p>A. 16</p><p>B. 15</p><p>C. 17</p><p>D. 32</p><blockquote><p>A。高度为5，有<code>2^5 = 16</code>个节点，最后一层可以有0~16个节点，有16种形态。</p></blockquote><p>第 9 题<br>表达式 <code>a*(b+c)*d</code> 的后缀表达式为( )，其中<code>*</code>和 <code>+</code>是运算符。</p><p> A. <code>**a+bcd</code></p><p>B.<code> abc+*d*</code></p><p>C. <code>abc+d**</code></p><p>D. <code>*a*+bcd</code></p><blockquote><p>选B。</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(b + c) 变成 (b c +) </span><br><span class="line">a * (b c +) 变成 a (b c +) *</span><br><span class="line">a (b c +) * * d 变成 a (b c +) * d *</span><br><span class="line">去掉括号 a b c + * d *</span><br></pre></td></tr></table></figure><p>第 10 题<br>6 个人，两个人组一队，总共组成三队，不区分队伍的编号。不同的组队情况有（ ）种。</p><p>A. 10</p><p>B. 15</p><p>C. 30</p><p>D. 20</p><blockquote><p>选B。6取2，剩下4取2，剩下2取2，队伍没有顺序，要除以三个队伍的排列数。</p></blockquote><p>$$<br>C_6^2 * C^2_4 * C^2_2 &#x2F; A_3^3 &#x3D; 15<br>$$</p><p>第 11 题</p><p>在数据压缩编码中的哈夫曼编码方法，在本质上是一种（ ）的策略。</p><p>A. 枚举</p><p>B. 贪心</p><p> C. 递归</p><p> D. 动态规划</p><blockquote><p>选B。在数据压缩编码中的哈夫曼编码方法，是一种贪心算法，它的基本思想是：在编码过程中，优先选择使编码总长度最短的符号。</p></blockquote><p>第 12 题</p><p>由 1,1,2,2,3 这五个数字组成不同的三位数有（ ）种。</p><p>A. 18 </p><p>B. 15</p><p>C. 12</p><p>D. 24</p><blockquote><p>选A。依次枚举：</p><p>1开头：112、113、121、122、123、131、132</p><p>2开头：211、212、213、221、223、231、232</p><p>3开头：311、312、321、322</p></blockquote><p>第 13 题</p><p>考虑如下递归算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">solve</span>(n)  </span><br><span class="line">     <span class="keyword">if</span> n&lt;=<span class="number">1</span> <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> n&gt;=<span class="number">5</span> <span class="keyword">return</span> n*<span class="built_in">solve</span>(n<span class="number">-2</span>)  </span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> n*<span class="built_in">solve</span>(n<span class="number">-1</span>)  </span><br></pre></td></tr></table></figure><p>则调用 <code>solve(7)</code> 得到的返回结果为（ ）。</p><p>A. 105</p><p>B. 840</p><p>C. 210</p><p>D. 420</p><blockquote><p>选C。7 * 5 * 3 * 2 * 1 &#x3D; 210。</p></blockquote><p>第 14 题</p><p>以 <em>a</em> 为起点，对下边的无向图进行深度优先遍历，则 <em>b</em>,<em>c</em>,<em>d</em>,<em>e</em> 四个点中有可能作为最后一个遍历到的点的个数为（ ）。</p><p> <img src="https://ipic.luogu.com.cn/2yir4.png" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/2yir4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p><blockquote><p>选B。b和e可能为最后一个点。</p></blockquote><p>第 15 题</p><p>有四个人要从 A 点坐一条船过河到 B 点，船一开始在 A 点。该船一次最多可坐两个人。 已知这四个人中每个人独自坐船的过河时间分别为 1,2,4,8，且两个人坐船的过河时间为两人独自过河时间的较大者。则最短（ ）时间可以让四个人都过河到 B 点（包括从 B 点把船开回 A 点的时间）。</p><p>A. 14</p><p>B. 15</p><p>C. 16</p><p>D. 17</p><blockquote><p>选B。</p><p>1 号和 2 号过河，花费 2 分钟。</p><p>1 号回来，花费 1 分钟。</p><p>4 号和 8 号过河，花费 8 分钟。</p><p>2 号回来，花费 2 分钟。</p><p>1 号和 2 号再次过河，花费 2 分钟。</p></blockquote><hr><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><h2 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h2><p><img src="https://ipic.luogu.com.cn/pu88q.jpg" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/pu88q.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>f函数统计1的个数，负数统计补码中1的个数。如下图（2018年考过该算法）</p><p>g函数返回x的最低位（lowbit）。</p></blockquote><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812173934102.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812173934102.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812173934102"></p><p>16.输入的 <em>n</em> 等于 1001 时，程序<strong>不会</strong>发生下标越界。（ 错 ）</p><blockquote><p>a的下标0~999，1001越界。</p></blockquote><p>17.输入的 <em>a</em>[<em>i</em>] 必须全为正整数，否则程序将陷入死循环。（ 错 ）</p><blockquote><p>找一个反例即可，如0、-1。</p></blockquote><p>18.当输入为 <code>5 2 11 9 16 10</code> 时，输出为 <code>3 4 3 17 5</code>。（ 错 ）</p><blockquote><p>输出最后一个数错误，为4。</p></blockquote><p>19.当输入为 <code>1 511998</code> 时，输出为 <code>18</code>。（ 对  ）</p><p>20.将源代码中 <code>g</code> 函数的定义（14∼17 行）移到 main 函数的后面，程序可以正常编译运行。（ 错 ）</p><blockquote><p>前面得声明函数g，才能正常运行。</p></blockquote><p>21.当输入为 <code>2 -65536 2147483647</code> 时，输出为（ B ）。</p><p>A. <code>65532 33</code><br>B. <code>65552 32</code><br>C. <code>65535 34</code><br>D. <code>65554 33</code></p><blockquote><p>65536为2^16。1后面16个0，int32位，补码：1后面16个0不变，前面全变成1，有16个1。</p><p>最低位，1后面16个0。</p><p>65536 + 16 &#x3D; 65552。</p></blockquote><blockquote><p>2147483647是2^31-1，有31个1，最低位为1。</p><p>31 + 1 &#x3D; 32。</p></blockquote><h2 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rddla3oo.png" class="lazyload placeholder" data-srcset="https://cdn.luogu.com.cn/upload/image_hosting/rddla3oo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>25、输出的第二行一定是由小写字母、大写字母、数字和 ++、 &#x2F;&#x2F;、&#x3D;&#x3D; 构成的字符串。（ ）</p><p>26、可能存在输入不同，但输出的第二行相同的情形。（ ）</p><p>27、输出的第一行为 -1-1。（ ）</p><p>28、设输入字符串长度为 �<em>n</em>，<code>decode</code> 函数的时间复杂度为（ ）</p><p>A. <em>O</em>(<em>n</em>)</p><p>B. <em>O</em>(<em>n</em>)</p><p>C. <em>O</em>(<em>n</em>log<em>n</em>)</p><p>D. <em>O</em>(<em>n</em>2)</p><p>29、当输入为 Y3NxY3Nx 时，输出的第二行为（）。</p><p>A. <code>csp</code></p><p>B. <code>csq</code></p><p>C. <code>CSP</code></p><p>D. <code>Csp</code></p><p>30、（3.5 分）当输入为 Y2NmIDIwMjE&#x3D;Y2NmIDIwMjE&#x3D; 时，输出的第二行为（ ）。</p><p>A. <code>ccf2021</code></p><p>B. <code>ccf2022</code></p><p>C. <code>ccf 2021</code></p><p>D. <code>ccf 2022</code></p><hr><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1><hr><p>参考网站视频</p><ul><li><a href="https://ti.luogu.com.cn/problemset/1036">1036 - CSP 2021 入门级第一轮 - 洛谷有题 (luogu.com.cn)</a></li><li><a href="https://www.bilibili.com/video/BV1tg411k7YH/?spm_id_from=333.788&vd_source=49e30194f6d5798a1f90d69dad9c0460">2021年CSP-J入门级初赛(第一轮)真题讲解_哔哩哔哩_bilibili</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-什么是Internet</title>
      <link href="/2023/08/12/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/"/>
      <url>/2023/08/12/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Internet"><a href="#什么是Internet" class="headerlink" title="什么是Internet ?"></a>什么是Internet ?</h1><p>通俗点，就是一堆网络通过网络互联设备（路由器）连在一起。</p><p>从具体构成角度看：</p><ul><li>节点<ul><li>主机及其上运行的应用程序</li><li>路由器、交换机等网络交换设备</li></ul></li><li>边：通信链路<ul><li>接入网链路：主机连接到互联网的链 路</li><li>主干链路：路由器间的链路</li></ul></li><li>协议：控制发送、接收信息<ul><li>如TCP、IP、HTTP、FTP、PPP</li></ul></li><li>Internet：网络的网络<ul><li>松散的层次结构，互连的ISP</li></ul></li></ul><p>从服务角度看：</p><ul><li>使用通信设施进行通信的<strong>分布式应用</strong><ul><li>Web、VoIP、email、分布式游戏、电子商务、社交网络</li></ul></li><li>通信基础设施为<strong>apps</strong>提供编程接口(通信服务）<ul><li>将发送和接收数据的apps与互联网连接起来</li><li>为app应用提供服务选择，类似于邮政服务：<ul><li>无连接不可靠服务</li><li>面向连接的可靠服务</li></ul></li></ul></li></ul><hr><h1 id="什么是协议？"><a href="#什么是协议？" class="headerlink" title="什么是协议？"></a>什么是协议？</h1><p>支撑互联网工作的<strong>标准</strong>。</p><p>协议：对等层实体在通信过程中应该遵守的规则和集合。</p><p>网络协议： </p><ul><li>类似人类协议</li><li>机器之间的协议而非人与人之间的协议</li><li>Internet 中所有的通信行为都受协议制约</li></ul><blockquote><p>协议定义了在两个或多个通信实体之间交换的<strong>报文格式</strong>和<strong>次序</strong>，以及在报文传输和&#x2F;或接收或其他事件方面所采取的<strong>动作</strong></p></blockquote><hr><h1 id="网络结构的三个部分"><a href="#网络结构的三个部分" class="headerlink" title="网络结构的三个部分"></a>网络结构的三个部分</h1><h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><ul><li>主机</li><li>应用程序（客户端和服务器）</li></ul><p>结构</p><ul><li>端系统(主机）：<ul><li>运行应用程序</li><li>如Web、email</li><li>在“网络的边缘”</li></ul></li><li>客户&#x2F;服务器模式（C&#x2F;S）<ul><li>客户端向服务器请求、接收服务</li><li>如Web浏览器&#x2F;服务器；email客户端&#x2F;服务器</li></ul></li><li>对等（peer-peer）模式<ul><li>很少(甚至没有）专门的服务器</li><li>如 Gnutella、KaZaA、Emule</li></ul></li></ul><hr><h3 id="采用网络设施的面向连接服务"><a href="#采用网络设施的面向连接服务" class="headerlink" title="采用网络设施的面向连接服务"></a>采用网络设施的面向连接服务</h3><p>目标:在端系统之间传输数据</p><ul><li>握手：在数据传输之前做好准备<ul><li>人类协议中：你好、你好</li><li>两个通信主机之间为<strong>连接</strong>建立状态</li></ul></li><li>TCP-传输控制协议(Transmission Control Protocol )<ul><li>Internet上面向连接的服务</li></ul></li></ul><p>TCP 服务 RFC793</p><ul><li>可靠地、按顺序地传送数据<ul><li>确认和重传</li></ul></li><li>流量控制<ul><li>发送方不会淹没接收方</li></ul></li><li>拥塞控制<ul><li>当网络拥塞时，发送方降低发送速率</li></ul></li></ul><h3 id="采用基础设施的无连接服务"><a href="#采用基础设施的无连接服务" class="headerlink" title="采用基础设施的无连接服务"></a>采用基础设施的无连接服务</h3><p>目标:在端系统之间传输数据</p><ul><li>无连接服务</li><li>UDP-用户数据报协议(User Datagram Protocol)RFC 768:<ul><li>无连接</li><li>不可靠数据传输</li><li>无流量控制</li><li>无拥塞控制</li></ul></li></ul><hr><p>使用TCP的应用：</p><ul><li>HTTP(Web),FTP(文件传送),Telnet(远程登录），SMTP (email)</li></ul><p>使用UDP的应用：</p><ul><li>流媒体、远程会议、DNS、Internet电话</li></ul><hr><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><ul><li>网络核心：路由器的网状网络</li><li>基本问题：数据怎样通过网络进行输？<ul><li><strong>电路交换</strong>：为每个呼叫预留一条专有电路：如电话网</li><li><strong>分组交换</strong>：<ul><li>将要传送的数据分成一个个单位：分组</li><li>将分组从一个路由器传到相邻路由器(<strong>hop</strong>），一段段最终从源端传到目标端</li><li>每段：采用链路的最大传输能力(带宽）</li></ul></li></ul></li></ul><p>网络分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">通信网络 --&gt; 电路交换网络 --&gt; FDM &amp; TDM</span><br><span class="line">通信网络 --&gt; 分组交换网络 --&gt; 虚电路网络 &amp; 数据包网络</span><br></pre></td></tr></table></figure><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p> 端到端的资源被分配给从源端到目标端的呼叫 “call”：</p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812112859334.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812112859334.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812112859334"></p><ul><li><p>图中，每段链路有4条线路： </p><ul><li>该呼叫采用了上面链路的第2个线路，右边链路的第1个线路（piece）</li></ul></li><li><p>独享资源：不同享</p><ul><li>每个呼叫一旦建立起来就能够保证性能</li></ul></li><li><p>如果呼叫没有数据发送，被分配的资源就会被浪费 (no sharing)</p></li><li><p>通常被传统电话网络采用</p></li></ul><p>为呼叫预留端-端资源</p><ul><li>链路带宽、交换能力</li><li>专用资源：不共享</li><li>保证性能</li><li>要求建立呼叫连接</li></ul><p>网络资源（如带宽）被分成片</p><ul><li>为呼叫分配<strong>片</strong></li><li>如果某个呼叫没有数据，则其资源片处于<strong>空闲状态</strong>（不共享）</li><li>将带宽分成片<ul><li>频分(Frequencydivision multiplexing) </li><li>时分(Time-division multiplexing) </li><li>波分(Wave-divis）</li><li>码分(CDM)</li></ul></li></ul><p>计算举例</p><ul><li>在一个电路交换网络上，从主机A到主机B发送一个640,000比特的文件需要多长时间？ <ul><li>所有的链路速率为1.536 Mbps </li><li>每条链路使用时隙数为24的TDM</li><li>建立端-端的电路需500 ms</li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每条链路的速率（一个时间片）：1.536Mbps/24 = 64kbps</span><br><span class="line">传输时间：640kb/64kps = 10s</span><br><span class="line">共用时间：传输时间+建立链路时间=10s + 500ms = 10.5s</span><br></pre></td></tr></table></figure><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812114957016.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812114957016.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812114957016"></p><p>以<strong>分组</strong>为单位存储-转发方式</p><ul><li>网络带宽资源不再分分为一个个片，传输时使用全部带宽</li><li>主机之间传输的数据被分为一个个分组</li></ul><p><strong>资源共享</strong>，按需使用：</p><ul><li>存储-转发：分组每次移动一跳（ hop ） </li><li>在转发之前，节点必须收到整个分组 <ul><li>延迟比线路交换要大 </li><li>排队时间</li></ul></li></ul><p>存储-转发</p><ul><li>被传输到下一个链路之前，整个分组必须到达路由器：<strong>存储-转发</strong></li><li>在一个速率为R bps的链路，一个长度为L bits 的分组的存储转发延时： L&#x2F;R s</li></ul><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812121522155.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812121522155.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812121522155"></p><p>排队和延迟： </p><ul><li>如果到达速率 &gt; 链路的输出速率: <ul><li>分组将会排队，等待传输 </li><li>如果路由器的缓存用完了，分组将会被抛弃</li></ul></li></ul><p>关键功能</p><ul><li><strong>路由</strong>: 决定分组采用的源到 目标的路径 <ul><li>路由算法</li></ul></li><li><strong>转发</strong>: 将分组从路由器的输 入链路转移到输出链路</li></ul><p>统计多路复用</p><h3 id="分组交换-vs-电路交换"><a href="#分组交换-vs-电路交换" class="headerlink" title="分组交换 vs. 电路交换"></a>分组交换 vs. 电路交换</h3><p>同样的网络资源，分组交换允许更多用户使用网络！</p><p>1 Mb&#x2F;s 链路，每个用户活动时100 kb&#x2F;s，只有10% 的时间是活动的。 </p><ul><li>电路交换： 最多10 用户。$ \dfrac{1Mb&#x2F;s}{100kb&#x2F;s} $</li></ul><p>$$<br>每个用户分配100kb&#x2F;s，最多有\dfrac{1Mb&#x2F;s}{100kb&#x2F;s} &#x3D; 10 个用户<br>$$</p><ul><li>分组交换：</li></ul><p>$$<br>35 用户时 ，&gt;&#x3D;10个用户活动的概率为 1 - \sum_{n&#x3D;0}^{9} C^{35}_n P^n(1-P)^{35-n} &#x3D; 0.0004<br>$$</p><p>分组交换是“突发数据的胜利者？”</p><ul><li><p>适合于对突发式数据传输 </p><ul><li><p>资源共享 </p></li><li><p>简单，不必建立呼叫</p></li></ul></li><li><p>过度使用会造成网络拥塞：分组延时和丢失 </p><ul><li>对可靠地数据传输需要协议来约束：拥塞控制</li></ul></li><li><p>Q: 怎样提供类似电路交换的服务？ </p><ul><li>保证音频&#x2F;视频应用需要的带宽 </li><li>一个仍未解决的问题(chapter 7)</li></ul></li></ul><p>分组交换网络：存储-转发</p><p> 分组交换: 分组的存储转发一段一段从源端传到目标端 ，按照有无网络层的连接，分成： </p><ol><li><p><strong>数据报</strong>网络： (datagram)</p><ul><li>分组的目标地址决定下一跳 </li><li>在不同的阶段，路由可以改变 </li><li>类似：送快递、寄信（有目标地址，路由就是快递站、邮局）</li><li>工作原理<ul><li>在通信之前,无须建立起一个连接,有数据就传输 </li><li>每一个分组都独立路由(路径不一样,可能会失序) </li><li>路由器根据分组的目标地址进行路由</li></ul></li></ul><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812211759473.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812211759473.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="数据包网络"></p></li><li><p><strong>虚电路</strong>网络： (virtual circuit)</p><ul><li>每个分组都带标签（虚电路标识 VC ID），标签决定下一跳 </li><li>在<strong>呼叫建立</strong>时决定路径，在整个呼叫中路径保持不变 </li><li>路由器维持<strong>每个呼叫的状态信息</strong> </li><li>类似：打电话（建立连接后，通信）</li><li>X.25 和ATM</li></ul></li></ol><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812212123051.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812212123051.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="虚电路"></p><p>虚电路是<strong>有连接</strong>的，连接<strong>不仅</strong>体现在源主机和目标主机上，还体现在<strong>中间经过的所有节点</strong>上。</p><p>TCP是<strong>面向连接</strong>，连接<strong>仅</strong>体现在<strong>源主机和目标主机上</strong>，中间的路由器<strong>不维护</strong>通信状态。</p><hr><h2 id="接入网、物理媒体"><a href="#接入网、物理媒体" class="headerlink" title="接入网、物理媒体"></a>接入网、物理媒体</h2><ul><li>有线或无线通信链路</li></ul><hr><h1 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h1><p>每一层实现一个特定的功能，上一层借助于下一层提供的服务，通过跟对等层的协议实体，相互交换协议的报文，向上层提供更好的服务。</p><p>例如：</p><ul><li>物理层把物理介质的<strong>01信号</strong>变成<strong>电磁波</strong>，发送和接收电磁波信号。</li><li>链路层，相邻两点传输以<strong>帧</strong>为单位的数据，实现了了<strong>点到点</strong>的功能。</li><li>网络层在链路层提供的点到点服务的基础上，实现了<strong>源主机</strong>到<strong>目标主机</strong>之间的数据传输，实现了<strong>端到端</strong>的功能。</li><li>传输层加强和细分了网络层的服务，把<strong>主机</strong>之间的传输变成了<strong>进程</strong>之间的传输，解决了网络层<strong>传输不可靠</strong>的问题。</li><li>应用层借助于传输层提供的服务，交换应用报文，实现各种各样的网络应用。</li></ul><hr><p>Internet&#x2F;ISP结构</p><p>性能：丢包、延时、吞吐量<br>协议层次、服务模型<br>历史</p><hr><p>对应视频</p><ul><li><a href="https://www.bilibili.com/video/BV1JV411t7ow?p=5&vd_source=49e30194f6d5798a1f90d69dad9c0460">1.3 网络核心_哔哩哔哩_bilibili</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章插入本地图片</title>
      <link href="/2023/08/12/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2023/08/12/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>安装插件</p><p>在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>1.安装插件。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>2.再修改一下配置文件_config.yml，加入下面的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.在“Blog-&gt;source”下新建”imags”文件夹。注意”imags”与”_posts”同级。</p><p>4.在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../source/images//$&#123;filename&#125;</span><br></pre></td></tr></table></figure><p>5.在”格式-&gt;图像-&gt;设置图片根目录“将”Blog-&gt;source”设置为<a href="https://www.zhihu.com/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1907420868%7D">根目录</a>。</p><p>详细原理：<a href="https://link.zhihu.com/?target=https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片</a> ，<a href="https://link.zhihu.com/?target=https://github.com/hexojs/hexo-renderer-marked">hexojs&#x2F;hexo-renderer-marked</a></p><hr><p>参考文章</p><ul><li><p><a href="https://moeci.com/posts/hexo-typora/">Hexo + Typora + 开发Hexo插件 解决图片路径不一致 | yiyun’s Blog (moeci.com)</a></p></li><li><p><a href="https://www.zhihu.com/question/419663130">(1 条消息) hexo文章中如何放入图片? - 知乎 (zhihu.com)</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo本地图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 CSP-J1题目</title>
      <link href="/2023/08/11/2022%E5%B9%B4CSP-J1/"/>
      <url>/2023/08/11/2022%E5%B9%B4CSP-J1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单项选择题"><a href="#一、单项选择题" class="headerlink" title="一、单项选择题"></a>一、单项选择题</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691680483443-e668451f-cc7f-419c-a4fe-20d67c64c531.png#averageHue=%23f5f2f1&clientId=ud5fa4b20-f558-4&from=paste&height=177&id=u25e12d40&originHeight=177&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14971&status=done&style=none&taskId=u32247575-d2f1-4b97-989d-817e662ef3f&title=&width=465" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691680483443-e668451f-cc7f-419c-a4fe-20d67c64c531.png#averageHue=%23f5f2f1&clientId=ud5fa4b20-f558-4&from=paste&height=177&id=u25e12d40&originHeight=177&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14971&status=done&style=none&taskId=u32247575-d2f1-4b97-989d-817e662ef3f&title=&width=465" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选A。其他三个选项都有<strong>类</strong>。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681244468-f819bdbe-2b74-41b0-a6d0-4202f7ca5862.png#averageHue=%23fbfbfa&clientId=ud5fa4b20-f558-4&from=paste&height=237&id=u7e05be8e&originHeight=237&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11735&status=done&style=none&taskId=u5c1709f6-c053-430b-9e8d-115afb6940f&title=&width=653" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681244468-f819bdbe-2b74-41b0-a6d0-4202f7ca5862.png#averageHue=%23fbfbfa&clientId=ud5fa4b20-f558-4&from=paste&height=237&id=u7e05be8e&originHeight=237&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11735&status=done&style=none&taskId=u5c1709f6-c053-430b-9e8d-115afb6940f&title=&width=653" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/3f035d17f2a0b726e912ef6a6ead1c27.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcIjNcblx0XHRcdDRcblx0XHRcdDVcblx0XHRcdDZcIikgLS0-fOW8ueWHujN8IEIoXCI0XG5cdFx0XHQ1XG5cdFx0XHQ2XCIpIC0tPnzlvLnlh7o0fCBDKFwiNVxuXHRcdFx0NlwiKSAtLT585by55Ye6NnwgRFs25Ye65LiN5p2lXVxuXG4gc3R5bGUgRCBmaWxsOiNiYmYsc3Ryb2tlOiNmNjYsc3Ryb2tlLXdpZHRoOjJweCxjb2xvcjojZmZmLHN0cm9rZS1kYXNoYXJyYXk6IDUgNSIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvM2YwMzVkMTdmMmEwYjcyNmU5MTJlZjZhNmVhZDFjMjcuc3ZnIiwiaWQiOiJ2UG1TaiIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__mermaid_v3/3f035d17f2a0b726e912ef6a6ead1c27.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcIjNcblx0XHRcdDRcblx0XHRcdDVcblx0XHRcdDZcIikgLS0-fOW8ueWHujN8IEIoXCI0XG5cdFx0XHQ1XG5cdFx0XHQ2XCIpIC0tPnzlvLnlh7o0fCBDKFwiNVxuXHRcdFx0NlwiKSAtLT585by55Ye6NnwgRFs25Ye65LiN5p2lXVxuXG4gc3R5bGUgRCBmaWxsOiNiYmYsc3Ryb2tlOiNmNjYsc3Ryb2tlLXdpZHRoOjJweCxjb2xvcjojZmZmLHN0cm9rZS1kYXNoYXJyYXk6IDUgNSIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvM2YwMzVkMTdmMmEwYjcyNmU5MTJlZjZhNmVhZDFjMjcuc3ZnIiwiaWQiOiJ2UG1TaiIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681235061-dcf25f2c-16b2-4c06-be71-9a423fb8a03e.png#averageHue=%23f5f4f3&clientId=ud5fa4b20-f558-4&from=paste&height=330&id=u136c8abd&originHeight=330&originWidth=432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15734&status=done&style=none&taskId=u2bd325d6-d429-4287-ae3c-a93d84401fa&title=&width=432" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681235061-dcf25f2c-16b2-4c06-be71-9a423fb8a03e.png#averageHue=%23f5f4f3&clientId=ud5fa4b20-f558-4&from=paste&height=330&id=u136c8abd&originHeight=330&originWidth=432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15734&status=done&style=none&taskId=u2bd325d6-d429-4287-ae3c-a93d84401fa&title=&width=432" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。</p><p> A. 将 x 的值赋为 <code>101</code><br> B. 将 y 的值赋为 <code>201</code><br> C. 将 <code>p</code> 指向 x 的地址</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681217068-9924da00-6953-4b58-b1ef-3a4a65f5fc3d.png#averageHue=%23f6f4f2&clientId=ud5fa4b20-f558-4&from=paste&height=220&id=u833a2ade&originHeight=220&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12752&status=done&style=none&taskId=u95312220-7555-4f5d-8963-07ce7ab556a&title=&width=333" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681217068-9924da00-6953-4b58-b1ef-3a4a65f5fc3d.png#averageHue=%23f6f4f2&clientId=ud5fa4b20-f558-4&from=paste&height=220&id=u833a2ade&originHeight=220&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12752&status=done&style=none&taskId=u95312220-7555-4f5d-8963-07ce7ab556a&title=&width=333" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。</p><p>A错误，数组可以排序。<br> B错误，没有上下文，不能确定。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681689624-2358d993-4887-4ce4-b1d0-20e16abd82c2.png#averageHue=%23f8f6f5&clientId=ud5fa4b20-f558-4&from=paste&height=275&id=u2c35b9e9&originHeight=275&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23163&status=done&style=none&taskId=ue634ce60-2816-494b-a3db-47630d57ef9&title=&width=651" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681689624-2358d993-4887-4ce4-b1d0-20e16abd82c2.png#averageHue=%23f8f6f5&clientId=ud5fa4b20-f558-4&from=paste&height=275&id=u2c35b9e9&originHeight=275&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23163&status=done&style=none&taskId=ue634ce60-2816-494b-a3db-47630d57ef9&title=&width=651" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。<strong>出队列</strong>的顺序跟<strong>进队列</strong>的顺序一样，不用管，跟第2题差不多，出队列Q的顺序看作<strong>出栈S</strong>的顺序即可。<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/f3fd3bc31ba06207b3a9152c0dfa50f5.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcImUyXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTJ8IEIoXCJlNFxuXHRcdFx0ZTNcblx0XHRcdGUxXCIpIC0tPnzlvLnlh7plNHwgQyhcImUzXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTMsIGU1IGU26L-b5qCIfCBEKFwiZTZcblx0XHRcdGU1XG5cdFx0XHRlMVwiKSAtLT585L6d5qyh5by55Ye6ZTYgZTUgZTF8IGVtcHR5IiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fbWVybWFpZF92My9mM2ZkM2JjMzFiYTA2MjA3YjNhOTE1MmMwZGZhNTBmNS5zdmciLCJpZCI6IlRJbDZwIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__mermaid_v3/f3fd3bc31ba06207b3a9152c0dfa50f5.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcImUyXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTJ8IEIoXCJlNFxuXHRcdFx0ZTNcblx0XHRcdGUxXCIpIC0tPnzlvLnlh7plNHwgQyhcImUzXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTMsIGU1IGU26L-b5qCIfCBEKFwiZTZcblx0XHRcdGU1XG5cdFx0XHRlMVwiKSAtLT585L6d5qyh5by55Ye6ZTYgZTUgZTF8IGVtcHR5IiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fbWVybWFpZF92My9mM2ZkM2JjMzFiYTA2MjA3YjNhOTE1MmMwZGZhNTBmNS5zdmciLCJpZCI6IlRJbDZwIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp">栈容量最多为3。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691683418598-20355321-f926-4e0b-bbf4-69aec10e953d.png#averageHue=%23faf9f8&clientId=ucc33ebdc-52ee-4&from=paste&height=209&id=u35dd5b7d&originHeight=209&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10846&status=done&style=none&taskId=ua6b02401-0c56-46a0-ba05-d5e78d4b29f&title=&width=523" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691683418598-20355321-f926-4e0b-bbf4-69aec10e953d.png#averageHue=%23faf9f8&clientId=ucc33ebdc-52ee-4&from=paste&height=209&id=u35dd5b7d&originHeight=209&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10846&status=done&style=none&taskId=ua6b02401-0c56-46a0-ba05-d5e78d4b29f&title=&width=523" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。</p><p>方法1：按照运算顺序，把运算符放前面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个算 b - c</span><br><span class="line">把 - 放前面，变成 - b c</span><br><span class="line"></span><br><span class="line">然后乘d，(- b c) * d</span><br><span class="line">* 放前面，变成 * (- b c) d</span><br><span class="line"></span><br><span class="line">最后加a，a + * (- b c) d</span><br><span class="line">+ 放前面，变成 + a * (- b c) d</span><br></pre></td></tr></table></figure><p>方法二：根据表达式画一个二叉树，然后先序遍历。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691740416496-1559239f-2b66-440e-9d9d-a17513f68660.jpeg" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691740416496-1559239f-2b66-440e-9d9d-a17513f68660.jpeg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>得到<code>+ a * - b c d</code></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691737266942-90dc50e5-1c44-48ab-abd1-d46b506c5d4c.png#averageHue=%23faf8f7&clientId=u8b640601-9c88-4&from=paste&height=219&id=uf02bb598&originHeight=219&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13814&status=done&style=none&taskId=ufa2dab19-16a4-4c74-91bc-cfda475967b&title=&width=638" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691737266942-90dc50e5-1c44-48ab-abd1-d46b506c5d4c.png#averageHue=%23faf8f7&clientId=u8b640601-9c88-4&from=paste&height=219&id=uf02bb598&originHeight=219&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13814&status=done&style=none&taskId=ufa2dab19-16a4-4c74-91bc-cfda475967b&title=&width=638" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。构造哈夫曼树，每次选最小的两个数，合成一个新节点。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691741383335-8b50cc84-4899-43ba-ac77-5084ed92dfb7.jpeg" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691741383335-8b50cc84-4899-43ba-ac77-5084ed92dfb7.jpeg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>到达d节点的路径为0 0，长度为2。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691741389529-54219612-d217-47d6-a4ca-c98fa06d783e.png#averageHue=%23f9f7f6&clientId=ue9b01e2c-da1b-4&from=paste&height=257&id=uda87080d&originHeight=257&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16372&status=done&style=none&taskId=u2cd0b711-d243-4a40-917f-e1af5ca41ec&title=&width=653" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691741389529-54219612-d217-47d6-a4ca-c98fa06d783e.png#averageHue=%23f9f7f6&clientId=ue9b01e2c-da1b-4&from=paste&height=257&id=uda87080d&originHeight=257&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16372&status=done&style=none&taskId=u2cd0b711-d243-4a40-917f-e1af5ca41ec&title=&width=653" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。</p><ul><li>9是奇数，是右子节点，兄弟节点在左边。</li><li>左子<code>2 * x</code>，右子<code>2 * x + 1</code>，9的右子节点位置为<code>2 * 9 + 1 = 19</code>。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742002460-8c8d420c-f165-414a-8dee-a36bff44eedc.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=254&id=u4f655abf&originHeight=254&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13441&status=done&style=none&taskId=ue1e7157e-c1f5-4ad9-a5d2-608fa168468&title=&width=641" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742002460-8c8d420c-f165-414a-8dee-a36bff44eedc.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=254&id=u4f655abf&originHeight=254&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13441&status=done&style=none&taskId=ue1e7157e-c1f5-4ad9-a5d2-608fa168468&title=&width=641" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。边最少的情况，就是每个顶点只有一条入边和一条出边，连成一个圈，即连通图。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742654153-798c18ac-7010-4705-a0c0-cdb531b3639d.png#averageHue=%23f3f0ee&clientId=ue9b01e2c-da1b-4&from=paste&height=212&id=ue0a6924d&originHeight=212&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16954&status=done&style=none&taskId=u3ed17bf9-c65e-4e72-9ef9-6e99964cd23&title=&width=433" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742654153-798c18ac-7010-4705-a0c0-cdb531b3639d.png#averageHue=%23f3f0ee&clientId=ue9b01e2c-da1b-4&from=paste&height=212&id=ue0a6924d&originHeight=212&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16954&status=done&style=none&taskId=u3ed17bf9-c65e-4e72-9ef9-6e99964cd23&title=&width=433" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。虽然本质不同，但是勉强能用，比较麻烦，用两个栈就能实现。</p><ul><li>入第1个栈，顺序反了。</li><li>入第2个栈，顺序再反过来，就是原来的顺序。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742892913-2a1d97a3-96b7-4f31-a2b8-f70c3cdc439a.png#averageHue=%23f6f4f2&clientId=ue9b01e2c-da1b-4&from=paste&height=238&id=ufb8605cc&originHeight=238&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21510&status=done&style=none&taskId=ud6a8f770-0dc8-4af3-9f3b-4b34ae32a88&title=&width=658" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742892913-2a1d97a3-96b7-4f31-a2b8-f70c3cdc439a.png#averageHue=%23f6f4f2&clientId=ue9b01e2c-da1b-4&from=paste&height=238&id=ufb8605cc&originHeight=238&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21510&status=done&style=none&taskId=ud6a8f770-0dc8-4af3-9f3b-4b34ae32a88&title=&width=658" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。</p><ul><li><code>s-&gt;next = p-&gt;next;</code>在<code>p-&gt;next = s;</code> 前，否则就变成<code>s-&gt;next = s</code></li><li><code>p-&gt;next-&gt;prev = s;</code>在<code>p-&gt;next = s;</code>前，否则变成<code>s-&gt;prev = s</code></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744121206-b85defab-8582-4fb0-8b00-482104b07b0e.png#averageHue=%23f6f5f3&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u5b3476a0&originHeight=213&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14398&status=done&style=none&taskId=u12343690-1943-4db6-9a8a-f49868ec64b&title=&width=470" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744121206-b85defab-8582-4fb0-8b00-482104b07b0e.png#averageHue=%23f6f5f3&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u5b3476a0&originHeight=213&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14398&status=done&style=none&taskId=u12343690-1943-4db6-9a8a-f49868ec64b&title=&width=470" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744419034-cbc08b5c-d4ce-4edc-8d24-eb52c2c26b26.png#averageHue=%23f5f0dc&clientId=ue9b01e2c-da1b-4&from=paste&height=251&id=ub1dc5cb6&originHeight=251&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95608&status=done&style=none&taskId=u507d985b-9856-4ec6-959b-8f4c46a5d26&title=&width=928" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744419034-cbc08b5c-d4ce-4edc-8d24-eb52c2c26b26.png#averageHue=%23f5f0dc&clientId=ue9b01e2c-da1b-4&from=paste&height=251&id=ub1dc5cb6&originHeight=251&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95608&status=done&style=none&taskId=u507d985b-9856-4ec6-959b-8f4c46a5d26&title=&width=928" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ul><li>稳定排序：<ul><li>插入排序，基数排序，归并排序，冒泡排序，计数排序。</li></ul></li><li>不稳定排序：<ul><li>快速排序，希尔排序，简单选择排序，堆排序</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744550450-05d64981-72f1-4056-807d-a440eef20cb1.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u635b576c&originHeight=213&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7927&status=done&style=none&taskId=u272d34d7-ea5b-4d46-8b8d-43c19be8d27&title=&width=326" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744550450-05d64981-72f1-4056-807d-a440eef20cb1.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u635b576c&originHeight=213&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7927&status=done&style=none&taskId=u272d34d7-ea5b-4d46-8b8d-43c19be8d27&title=&width=326" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。<br><img src="https://cdn.nlark.com/yuque/__latex/adb7af3133ef066c578f51310825db15.svg#card=math&code=3%2A8%5E1%20%2B%203%2A8%5E0%20%2B%201%2A8%5E%7B-1%7D%20%3D%2026.125%0A&id=fgZ1F" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__latex/adb7af3133ef066c578f51310825db15.svg#card=math&code=3%2A8%5E1%20%2B%203%2A8%5E0%20%2B%201%2A8%5E%7B-1%7D%20%3D%2026.125%0A&id=fgZ1F" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744825884-3aea8261-bf9c-478c-acec-fdf87c38f13b.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=237&id=ESHU7&originHeight=237&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10519&status=done&style=none&taskId=u53f008f5-8556-4908-9a13-27ebdafd311&title=&width=650" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744825884-3aea8261-bf9c-478c-acec-fdf87c38f13b.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=237&id=ESHU7&originHeight=237&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10519&status=done&style=none&taskId=u53f008f5-8556-4908-9a13-27ebdafd311&title=&width=650" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。注意是<strong>子串</strong>，得连续，不是子序列。</p><ul><li>长度0：空串</li><li>长度1:   a、b、c</li><li>长度2：ab、bc、ca</li><li>长度3：abc、bca、cab</li><li>长度4：abca、bcab</li><li>长度5：abcab</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745234787-4422176c-e993-4dc0-ada8-7e5774c40e35.png#averageHue=%23f1eeec&clientId=ue9b01e2c-da1b-4&from=paste&height=203&id=ud2c7b188&originHeight=203&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20114&status=done&style=none&taskId=ucee1a921-2e56-442f-9f56-e48ac83600e&title=&width=481" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745234787-4422176c-e993-4dc0-ada8-7e5774c40e35.png#averageHue=%23f1eeec&clientId=ue9b01e2c-da1b-4&from=paste&height=203&id=ud2c7b188&originHeight=203&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20114&status=done&style=none&taskId=ucee1a921-2e56-442f-9f56-e48ac83600e&title=&width=481" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。</p><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745643505-73f78884-dfae-4502-8098-5968ab857edd.png#averageHue=%23f1f0ef&clientId=ue9b01e2c-da1b-4&from=paste&height=433&id=u3b8a2eeb&originHeight=433&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23124&status=done&style=none&taskId=u7684c64a-7dc1-4ee0-9e95-0ccdffb4d99&title=&width=618" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745643505-73f78884-dfae-4502-8098-5968ab857edd.png#averageHue=%23f1f0ef&clientId=ue9b01e2c-da1b-4&from=paste&height=433&id=u3b8a2eeb&originHeight=433&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23124&status=done&style=none&taskId=u7684c64a-7dc1-4ee0-9e95-0ccdffb4d99&title=&width=618" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745650574-d4570682-09cd-4358-9ae8-619df08a5d92.png#averageHue=%23faf9f9&clientId=ue9b01e2c-da1b-4&from=paste&height=732&id=u67e9cb5f&originHeight=732&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39238&status=done&style=none&taskId=uf333741f-4335-43dd-963d-4ad1acdf172&title=&width=602" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745650574-d4570682-09cd-4358-9ae8-619df08a5d92.png#averageHue=%23faf9f9&clientId=ue9b01e2c-da1b-4&from=paste&height=732&id=u67e9cb5f&originHeight=732&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39238&status=done&style=none&taskId=uf333741f-4335-43dd-963d-4ad1acdf172&title=&width=602" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>A B B B B B<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747829385-5d930deb-4f76-4598-a190-373d6b4ece71.png#averageHue=%23f5f5f4&clientId=ue9b01e2c-da1b-4&from=paste&height=666&id=u0ea02199&originHeight=666&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=518447&status=done&style=none&taskId=u5dd27d2f-5468-49a8-94d7-8533fe47ed7&title=&width=1271" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747829385-5d930deb-4f76-4598-a190-373d6b4ece71.png#averageHue=%23f5f5f4&clientId=ue9b01e2c-da1b-4&from=paste&height=666&id=u0ea02199&originHeight=666&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=518447&status=done&style=none&taskId=u5dd27d2f-5468-49a8-94d7-8533fe47ed7&title=&width=1271" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747940828-bad5e9a0-8ead-4c54-849b-c9db98e6a483.png#averageHue=%23efeeed&clientId=ue9b01e2c-da1b-4&from=paste&height=995&id=u2364d296&originHeight=995&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57000&status=done&style=none&taskId=uba175945-3a14-4015-b495-1c83ed0c320&title=&width=648" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747940828-bad5e9a0-8ead-4c54-849b-c9db98e6a483.png#averageHue=%23efeeed&clientId=ue9b01e2c-da1b-4&from=paste&height=995&id=u2364d296&originHeight=995&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57000&status=done&style=none&taskId=uba175945-3a14-4015-b495-1c83ed0c320&title=&width=648" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747954122-33c1d86f-359a-4ace-8cf1-1e15e7eb6d5b.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=864&id=u6a6af426&originHeight=864&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50950&status=done&style=none&taskId=ua2b6fe04-263f-4117-8b67-2c5f7abe5ea&title=&width=564" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747954122-33c1d86f-359a-4ace-8cf1-1e15e7eb6d5b.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=864&id=u6a6af426&originHeight=864&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50950&status=done&style=none&taskId=ua2b6fe04-263f-4117-8b67-2c5f7abe5ea&title=&width=564" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>B A A C C B</p><p>详解看参考视频。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756115123-3350bd18-bb6e-4208-93d0-5ab83376c1f8.png#averageHue=%23f1f0f0&clientId=u96c5f821-dcfb-4&from=paste&height=726&id=u41782d0a&originHeight=726&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35987&status=done&style=none&taskId=uec47ea6e-58ee-464d-9685-2e9eb9dd6d6&title=&width=664" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756115123-3350bd18-bb6e-4208-93d0-5ab83376c1f8.png#averageHue=%23f1f0f0&clientId=u96c5f821-dcfb-4&from=paste&height=726&id=u41782d0a&originHeight=726&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35987&status=done&style=none&taskId=uec47ea6e-58ee-464d-9685-2e9eb9dd6d6&title=&width=664" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756125008-1519b60a-827b-413c-b3e7-daab0c9bce01.png#averageHue=%23faf9f9&clientId=u96c5f821-dcfb-4&from=paste&height=929&id=u50a0091b&originHeight=929&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56149&status=done&style=none&taskId=ub8c66fd5-4139-4a8b-a2e6-9d5e3b71ccd&title=&width=656" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756125008-1519b60a-827b-413c-b3e7-daab0c9bce01.png#averageHue=%23faf9f9&clientId=u96c5f821-dcfb-4&from=paste&height=929&id=u50a0091b&originHeight=929&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56149&status=done&style=none&taskId=ub8c66fd5-4139-4a8b-a2e6-9d5e3b71ccd&title=&width=656" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>A A B B C B A</p><p><code>solve1</code>函数用二分答案，找到小于等于根号n的最大整数。<br><code>solve2</code>函数中用到了牛顿迭代法求根号。<a href="https://www.zhihu.com/question/20690553">如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？ - 知乎</a></p><ol><li>正确，<code>solve1</code>二分法，时间复杂度为logn，<code>solve2</code>循环k次，时间复杂度为k，总的时间复杂度就为logn + k。</li><li>正确，99的平方就是9081。</li><li>错误。double类型有误差。</li><li>错误，n不超过47000，mid最大<code>47000 / 2 = 23500</code>，int类型最大值为2147483647，开根号46341，比mid最大值大。</li><li><code>solve1</code>返回1，<code>solve2</code>返回<code>(1 + 2 / 1) / 2 = 1.5</code></li><li>1.732，次数越多，越接近根号3。</li><li>16的平方为256，solve1二分能找出来。</li></ol><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1><h2 id="第-19-题（1）"><a href="#第-19-题（1）" class="headerlink" title="第 19 题（1）"></a>第 19 题（1）</h2><p>（枚举因数）从小到大打印正整数 n 的所有正因数。</p><p>试补全枚举程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fac;</span><br><span class="line">    fac.<span class="built_in">reserve</span>((<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n)));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i * i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (①)&#123;</span><br><span class="line">            fac.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; fac.<span class="built_in">size</span>(); ++k)&#123;</span><br><span class="line">        cout &lt;&lt; ② &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (③) &#123;</span><br><span class="line">        cout &lt;&lt; ④ &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = fac.<span class="built_in">size</span>() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)&#123;</span><br><span class="line">        cout &lt;&lt; ⑤ &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691759333220-400c3156-66af-4cd6-89bb-b032774142c0.png#averageHue=%23fdfcfb&clientId=u96c5f821-dcfb-4&from=paste&height=670&id=u7fe466ce&originHeight=670&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22902&status=done&style=none&taskId=ua30bf05c-c7bf-4b32-8509-69595125682&title=&width=479" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691759333220-400c3156-66af-4cd6-89bb-b032774142c0.png#averageHue=%23fdfcfb&clientId=u96c5f821-dcfb-4&from=paste&height=670&id=u7fe466ce&originHeight=670&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22902&status=done&style=none&taskId=ua30bf05c-c7bf-4b32-8509-69595125682&title=&width=479" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>A。判断i是否因数。</li><li>B。下标访问。</li><li>C。循环中运行了 1 到 根号n - 1 的数，此时 i 为根号n，没有判断是否因数，需要判断一下。</li><li>D。打印i。</li><li>A。打印大于根号n的数，用 n 除以 前面得到的因数 得到结果。</li></ol><hr><h2 id="第-20-题（2）（洪水填充）"><a href="#第-20-题（2）（洪水填充）" class="headerlink" title="第 20 题（2）（洪水填充）"></a>第 20 题（2）（洪水填充）</h2><p>现有用字符标记像素颜色的 8x8 图像。颜色填充的操作描述如下：给定起始像素的位置待填充的颜色，将起始像素和所有可达的像素（可达的定义：经过一次或多次的向上、下、左、右四个方向移动所能到达且终点和路径上所有像素的颜色都与起始像素颜色相同），替换为给定的颜色。<br>试补全程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ROWS = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> COLS = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> r, c;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> r, <span class="type">int</span> c): <span class="built_in">r</span>(r), <span class="built_in">c</span>(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_valid</span><span class="params">(<span class="type">char</span> image[ROWS][COLS], Point pt,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="type">int</span> prev_color, <span class="type">int</span> new_color)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> r = pt.r;</span><br><span class="line">    <span class="type">int</span> c = pt.c;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> &lt;= r &amp;&amp; r &lt; ROWS &amp;&amp; <span class="number">0</span> &lt;= c &amp;&amp; c &lt; COLS &amp;&amp;</span><br><span class="line">            ① &amp;&amp; image[r][c] != new_color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flood_fill</span><span class="params">(<span class="type">char</span> image[ROWS][COLS], Point cur, <span class="type">int</span> new_color)</span> </span>&#123;</span><br><span class="line">    queue&lt;Point&gt; queue;</span><br><span class="line">    queue.<span class="built_in">push</span>(cur);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> prev_color = image[cur.r][cur.c];</span><br><span class="line">    ②;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Point pt = queue.<span class="built_in">front</span> ();</span><br><span class="line">        queue.<span class="built_in">pop</span> ();</span><br><span class="line"></span><br><span class="line">        Point points[<span class="number">4</span>] = &#123;③, <span class="built_in">Point</span>(pt.r - <span class="number">1</span>, pt.c),</span><br><span class="line">                           <span class="built_in">Point</span>(pt.r, pt.c + <span class="number">1</span>), <span class="built_in">Point</span>(pt.r, pt.c - <span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p ; points) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">is_valid</span>(image, p, prev_color, new_color)) &#123;</span><br><span class="line">                ④;</span><br><span class="line">                ⑤;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> image[ROWS][COLS] = &#123;&#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">cur</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="type">char</span> new_color = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">flood_fill</span>(image, cur, new_color);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> r = -; r &lt; ROWS; r++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; COLS; c++) &#123;</span><br><span class="line">            cout &lt;&lt; image[r][c] &lt;&lt; <span class="string">&#x27;&#x27;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">//输出:</span></span><br><span class="line"><span class="string">// g g g g g g g g</span></span><br><span class="line"><span class="string">// g g g g g g r r</span></span><br><span class="line"><span class="string">// g r r g g r g g</span></span><br><span class="line"><span class="string">// g y y y y r g r</span></span><br><span class="line"><span class="string">// g g g y y r g r</span></span><br><span class="line"><span class="string">// g g g y y y y r</span></span><br><span class="line"><span class="string">// g g g g g y g g</span></span><br><span class="line"><span class="string">// g g g g g y y g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691760399409-ab2883eb-a23f-4122-9b57-2fca81a7ca3d.png#averageHue=%23f4f4f4&clientId=u96c5f821-dcfb-4&from=paste&height=668&id=u37d6eaf2&originHeight=668&originWidth=512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42945&status=done&style=none&taskId=ued676ba9-cd67-4dc7-92d2-d74f82020fd&title=&width=512" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691760399409-ab2883eb-a23f-4122-9b57-2fca81a7ca3d.png#averageHue=%23f4f4f4&clientId=u96c5f821-dcfb-4&from=paste&height=668&id=u37d6eaf2&originHeight=668&originWidth=512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42945&status=done&style=none&taskId=ued676ba9-cd67-4dc7-92d2-d74f82020fd&title=&width=512" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>A。与新颜色一样已经有了，还要与<strong>起点的颜色</strong>相同。</li><li>B。存完了旧颜色，起点换成新颜色。</li><li>C。方向上下左右，还差方向下。</li><li>D。新位置更新为新颜色。</li><li>A。新位置入队列。</li></ol><hr><p>参考文章及视频</p><ul><li><a href="https://www.bilibili.com/video/BV1WV4y1K7dd/?spm_id_from=333.337.search-card.all.click&vd_source=49e30194f6d5798a1f90d69dad9c0460">2022年CSP-J入门级初赛（第一轮）真题讲解_哔哩哔哩_bilibili</a></li><li>[试题 - CSP 2022 入门级第一轮</li><li>洛谷有题](<a href="https://ti.luogu.com.cn/problemset/1039">https://ti.luogu.com.cn/problemset/1039</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17 动态规划入门</title>
      <link href="/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>灵神【基础算法精讲】视频的个人笔记。</p></blockquote><p><strong>动态规划核心</strong></p><ul><li>状态<strong>定义</strong></li><li>状态<strong>转移方程</strong></li></ul><p>启发思路（跟子集型回溯一样）</p><ul><li><strong>选和不选</strong></li><li><strong>选哪个</strong></li></ul><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811234201400.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811234201400.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811234201400"></p><hr><h1 id="视频例题"><a href="#视频例题" class="headerlink" title="视频例题"></a>视频例题</h1><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198.打家劫舍</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811232947283.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811232947283.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811232947283"></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第 i 个</strong>房子选或不选。</li><li>子问题？从<strong>前 i 个</strong>房子中的最高金额。</li><li>下一个子问题？<ol><li>选：从<strong>前 i-2 个</strong>房子中的最高金额。</li><li>不选：从<strong>前 i-1 个</strong>房子中的最高金额。</li></ol></li></ol><p>递归</p><ul><li>会超时</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记忆化搜索</p><ul><li>用数组 cache 记录 <strong>入参</strong>对应的函数<strong>返回值</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>)  <span class="comment">//base case</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">            <span class="keyword">return</span> cache[i] = <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><ul><li>从记忆化搜索一比一翻译过来: <code>dp[i] = max(dp(i - 1), dp(i - 2) + nums[i]);</code></li><li>防止越界, dp[i]中的 i 全部+2: <code>dp[i + 2] = max(dp[i + 1], dp[i] + nums[i]);</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = max(dp(i - 1), dp(i - 2) + nums[i])</span></span><br><span class="line">            <span class="comment">//防止越界, dp[i]中的i全部+2</span></span><br><span class="line">            dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>空间优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="type">int</span> new_f = <span class="built_in">max</span>(f1, f0 + x);</span><br><span class="line">            f0 = f1;</span><br><span class="line">            f1 = new_f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h1><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70.爬楼梯</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233037939.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233037939.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233037939"></p><ul><li>1 和 2 是边界，提前赋值。</li><li>楼梯有 3 阶时，有两种方法：</li><li><ul><li><strong>从 1 阶</strong> 爬 1 个台阶，到达 3 阶</li><li><strong>从 2 阶</strong> 爬 2 个台阶，到达 3 阶</li><li><strong>到达 1 阶</strong>有 1 种方法，<strong>到达 2 阶</strong>有 2 种方法，到达 3 阶楼梯有 1+2&#x3D;3 种方法。</li></ul></li><li>同理，楼梯有 i 阶</li><li><ul><li>从 i - 1 阶爬 1 个台阶</li><li>从 i - 2 阶爬 2 个台阶</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">3</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>; dp[<span class="number">2</span>] = <span class="number">2</span>; <span class="comment">//边界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746.使用最小花费爬楼梯"></a><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746.使用最小花费爬楼梯</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233225607.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233225607.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233225607"></p><p>详细题解<a href="https://leetcode.cn/problems/min-cost-climbing-stairs/solutions/177077/yi-bu-yi-bu-tui-dao-dong-tai-gui-hua-de-duo-chong-/">力扣</a></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第 i 层</strong>从 <code>i - 1</code>层来 或 从 <code>i - 2</code>层来，然后加上<strong>第 i 层</strong>的花费。</li><li>子问题？到达<strong>第 i 层</strong>台阶的最小花费。</li><li>下一个子问题？<ol><li>到达 <code>i - 1</code>层的最小花费</li><li>到达 <code>i - 2</code>层的最小花费</li></ol></li></ol><p><strong>顶部</strong>是第 n 层，取 <code>n-1</code>和 <code>n-2</code>的最小值，<code>min(dp[n - 1], dp[n - 2])</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            dp[i] = cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>]) + cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[n - <span class="number">1</span>], dp[n - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466.统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466.统计构造好字符串的方案数</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233313270.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233313270.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233313270"></p><p>记忆化搜索</p><ul><li><code>dfs</code>得出长度为 i 的好字符串的方案数</li><li>循环, 求出长度从 <code>low</code>到 <code>high</code>的总方案数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(high + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;] (<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cache[i] = (<span class="built_in">dfs</span>(i - zero) + <span class="built_in">dfs</span>(i - one)) % MOD;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">dfs</span>(i) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(high + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= high; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = dp[i - zero] + dp[i - one]; 会越界</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= zero) dp[i] += dp[i - zero];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= one) dp[i] += dp[i - one];</span><br><span class="line">            dp[i] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123; <span class="comment">//字符串长度为i的方案数</span></span><br><span class="line">            ans += dp[i] % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a><a href="https://leetcode.cn/problems/house-robber-ii/">213.打家劫舍 II</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233333712.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233333712.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233333712"></p><p>官方题解<a href="https://leetcode.cn/problems/house-robber-ii/solutions/722767/da-jia-jie-she-ii-by-leetcode-solution-bwja/">力扣</a></p><p>跟例题打家劫舍的区别</p><ul><li><strong>第一间</strong>房子和<strong>最后一间</strong>房子不能同时偷</li></ul><p>用打家劫舍的解法，算两次</p><ul><li>第一次求 <code>0 ~ n-2</code></li><li>第二次求 <code>1 ~ n-1</code></li><li>最后求最大值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dpRange = [&amp;] (<span class="type">int</span> start, <span class="type">int</span> end) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; <span class="built_in">dp</span>(n + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= end; ++i) &#123;</span><br><span class="line">                dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dp[end + <span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0 ~ n-2 和 1 ~ n-1 的最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dpRange</span>(<span class="number">0</span>, n - <span class="number">2</span>), <span class="built_in">dpRange</span>(<span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/10/hello-world/"/>
      <url>/2023/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
