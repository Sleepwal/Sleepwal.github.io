<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022 CSP-J1题目</title>
      <link href="/2023/08/11/2022%E5%B9%B4CSP-J1/"/>
      <url>/2023/08/11/2022%E5%B9%B4CSP-J1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单项选择题"><a href="#一、单项选择题" class="headerlink" title="一、单项选择题"></a>一、单项选择题</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691680483443-e668451f-cc7f-419c-a4fe-20d67c64c531.png#averageHue=%23f5f2f1&clientId=ud5fa4b20-f558-4&from=paste&height=177&id=u25e12d40&originHeight=177&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14971&status=done&style=none&taskId=u32247575-d2f1-4b97-989d-817e662ef3f&title=&width=465" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691680483443-e668451f-cc7f-419c-a4fe-20d67c64c531.png#averageHue=%23f5f2f1&clientId=ud5fa4b20-f558-4&from=paste&height=177&id=u25e12d40&originHeight=177&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14971&status=done&style=none&taskId=u32247575-d2f1-4b97-989d-817e662ef3f&title=&width=465" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选A。其他三个选项都有<strong>类</strong>。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681244468-f819bdbe-2b74-41b0-a6d0-4202f7ca5862.png#averageHue=%23fbfbfa&clientId=ud5fa4b20-f558-4&from=paste&height=237&id=u7e05be8e&originHeight=237&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11735&status=done&style=none&taskId=u5c1709f6-c053-430b-9e8d-115afb6940f&title=&width=653" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681244468-f819bdbe-2b74-41b0-a6d0-4202f7ca5862.png#averageHue=%23fbfbfa&clientId=ud5fa4b20-f558-4&from=paste&height=237&id=u7e05be8e&originHeight=237&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11735&status=done&style=none&taskId=u5c1709f6-c053-430b-9e8d-115afb6940f&title=&width=653" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/3f035d17f2a0b726e912ef6a6ead1c27.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcIjNcblx0XHRcdDRcblx0XHRcdDVcblx0XHRcdDZcIikgLS0-fOW8ueWHujN8IEIoXCI0XG5cdFx0XHQ1XG5cdFx0XHQ2XCIpIC0tPnzlvLnlh7o0fCBDKFwiNVxuXHRcdFx0NlwiKSAtLT585by55Ye6NnwgRFs25Ye65LiN5p2lXVxuXG4gc3R5bGUgRCBmaWxsOiNiYmYsc3Ryb2tlOiNmNjYsc3Ryb2tlLXdpZHRoOjJweCxjb2xvcjojZmZmLHN0cm9rZS1kYXNoYXJyYXk6IDUgNSIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvM2YwMzVkMTdmMmEwYjcyNmU5MTJlZjZhNmVhZDFjMjcuc3ZnIiwiaWQiOiJ2UG1TaiIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__mermaid_v3/3f035d17f2a0b726e912ef6a6ead1c27.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcIjNcblx0XHRcdDRcblx0XHRcdDVcblx0XHRcdDZcIikgLS0-fOW8ueWHujN8IEIoXCI0XG5cdFx0XHQ1XG5cdFx0XHQ2XCIpIC0tPnzlvLnlh7o0fCBDKFwiNVxuXHRcdFx0NlwiKSAtLT585by55Ye6NnwgRFs25Ye65LiN5p2lXVxuXG4gc3R5bGUgRCBmaWxsOiNiYmYsc3Ryb2tlOiNmNjYsc3Ryb2tlLXdpZHRoOjJweCxjb2xvcjojZmZmLHN0cm9rZS1kYXNoYXJyYXk6IDUgNSIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvM2YwMzVkMTdmMmEwYjcyNmU5MTJlZjZhNmVhZDFjMjcuc3ZnIiwiaWQiOiJ2UG1TaiIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681235061-dcf25f2c-16b2-4c06-be71-9a423fb8a03e.png#averageHue=%23f5f4f3&clientId=ud5fa4b20-f558-4&from=paste&height=330&id=u136c8abd&originHeight=330&originWidth=432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15734&status=done&style=none&taskId=u2bd325d6-d429-4287-ae3c-a93d84401fa&title=&width=432" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681235061-dcf25f2c-16b2-4c06-be71-9a423fb8a03e.png#averageHue=%23f5f4f3&clientId=ud5fa4b20-f558-4&from=paste&height=330&id=u136c8abd&originHeight=330&originWidth=432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15734&status=done&style=none&taskId=u2bd325d6-d429-4287-ae3c-a93d84401fa&title=&width=432" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。</p><p> A. 将 x 的值赋为 <code>101</code><br> B. 将 y 的值赋为 <code>201</code><br> C. 将 <code>p</code> 指向 x 的地址</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681217068-9924da00-6953-4b58-b1ef-3a4a65f5fc3d.png#averageHue=%23f6f4f2&clientId=ud5fa4b20-f558-4&from=paste&height=220&id=u833a2ade&originHeight=220&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12752&status=done&style=none&taskId=u95312220-7555-4f5d-8963-07ce7ab556a&title=&width=333" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681217068-9924da00-6953-4b58-b1ef-3a4a65f5fc3d.png#averageHue=%23f6f4f2&clientId=ud5fa4b20-f558-4&from=paste&height=220&id=u833a2ade&originHeight=220&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12752&status=done&style=none&taskId=u95312220-7555-4f5d-8963-07ce7ab556a&title=&width=333" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。</p><p>A错误，数组可以排序。<br> B错误，没有上下文，不能确定。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681689624-2358d993-4887-4ce4-b1d0-20e16abd82c2.png#averageHue=%23f8f6f5&clientId=ud5fa4b20-f558-4&from=paste&height=275&id=u2c35b9e9&originHeight=275&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23163&status=done&style=none&taskId=ue634ce60-2816-494b-a3db-47630d57ef9&title=&width=651" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681689624-2358d993-4887-4ce4-b1d0-20e16abd82c2.png#averageHue=%23f8f6f5&clientId=ud5fa4b20-f558-4&from=paste&height=275&id=u2c35b9e9&originHeight=275&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23163&status=done&style=none&taskId=ue634ce60-2816-494b-a3db-47630d57ef9&title=&width=651" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。<strong>出队列</strong>的顺序跟<strong>进队列</strong>的顺序一样，不用管，跟第2题差不多，出队列Q的顺序看作<strong>出栈S</strong>的顺序即可。<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/f3fd3bc31ba06207b3a9152c0dfa50f5.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcImUyXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTJ8IEIoXCJlNFxuXHRcdFx0ZTNcblx0XHRcdGUxXCIpIC0tPnzlvLnlh7plNHwgQyhcImUzXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTMsIGU1IGU26L-b5qCIfCBEKFwiZTZcblx0XHRcdGU1XG5cdFx0XHRlMVwiKSAtLT585L6d5qyh5by55Ye6ZTYgZTUgZTF8IGVtcHR5IiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fbWVybWFpZF92My9mM2ZkM2JjMzFiYTA2MjA3YjNhOTE1MmMwZGZhNTBmNS5zdmciLCJpZCI6IlRJbDZwIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__mermaid_v3/f3fd3bc31ba06207b3a9152c0dfa50f5.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcImUyXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTJ8IEIoXCJlNFxuXHRcdFx0ZTNcblx0XHRcdGUxXCIpIC0tPnzlvLnlh7plNHwgQyhcImUzXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTMsIGU1IGU26L-b5qCIfCBEKFwiZTZcblx0XHRcdGU1XG5cdFx0XHRlMVwiKSAtLT585L6d5qyh5by55Ye6ZTYgZTUgZTF8IGVtcHR5IiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fbWVybWFpZF92My9mM2ZkM2JjMzFiYTA2MjA3YjNhOTE1MmMwZGZhNTBmNS5zdmciLCJpZCI6IlRJbDZwIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp">栈容量最多为3。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691683418598-20355321-f926-4e0b-bbf4-69aec10e953d.png#averageHue=%23faf9f8&clientId=ucc33ebdc-52ee-4&from=paste&height=209&id=u35dd5b7d&originHeight=209&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10846&status=done&style=none&taskId=ua6b02401-0c56-46a0-ba05-d5e78d4b29f&title=&width=523" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691683418598-20355321-f926-4e0b-bbf4-69aec10e953d.png#averageHue=%23faf9f8&clientId=ucc33ebdc-52ee-4&from=paste&height=209&id=u35dd5b7d&originHeight=209&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10846&status=done&style=none&taskId=ua6b02401-0c56-46a0-ba05-d5e78d4b29f&title=&width=523" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。</p><p>方法1：按照运算顺序，把运算符放前面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个算 b - c</span><br><span class="line">把 - 放前面，变成 - b c</span><br><span class="line"></span><br><span class="line">然后乘d，(- b c) * d</span><br><span class="line">* 放前面，变成 * (- b c) d</span><br><span class="line"></span><br><span class="line">最后加a，a + * (- b c) d</span><br><span class="line">+ 放前面，变成 + a * (- b c) d</span><br></pre></td></tr></table></figure><p>方法二：根据表达式画一个二叉树，然后先序遍历。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691740416496-1559239f-2b66-440e-9d9d-a17513f68660.jpeg" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691740416496-1559239f-2b66-440e-9d9d-a17513f68660.jpeg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>得到<code>+ a * - b c d</code></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691737266942-90dc50e5-1c44-48ab-abd1-d46b506c5d4c.png#averageHue=%23faf8f7&clientId=u8b640601-9c88-4&from=paste&height=219&id=uf02bb598&originHeight=219&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13814&status=done&style=none&taskId=ufa2dab19-16a4-4c74-91bc-cfda475967b&title=&width=638" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691737266942-90dc50e5-1c44-48ab-abd1-d46b506c5d4c.png#averageHue=%23faf8f7&clientId=u8b640601-9c88-4&from=paste&height=219&id=uf02bb598&originHeight=219&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13814&status=done&style=none&taskId=ufa2dab19-16a4-4c74-91bc-cfda475967b&title=&width=638" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。构造哈夫曼树，每次选最小的两个数，合成一个新节点。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691741383335-8b50cc84-4899-43ba-ac77-5084ed92dfb7.jpeg" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691741383335-8b50cc84-4899-43ba-ac77-5084ed92dfb7.jpeg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>到达d节点的路径为0 0，长度为2。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691741389529-54219612-d217-47d6-a4ca-c98fa06d783e.png#averageHue=%23f9f7f6&clientId=ue9b01e2c-da1b-4&from=paste&height=257&id=uda87080d&originHeight=257&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16372&status=done&style=none&taskId=u2cd0b711-d243-4a40-917f-e1af5ca41ec&title=&width=653" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691741389529-54219612-d217-47d6-a4ca-c98fa06d783e.png#averageHue=%23f9f7f6&clientId=ue9b01e2c-da1b-4&from=paste&height=257&id=uda87080d&originHeight=257&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16372&status=done&style=none&taskId=u2cd0b711-d243-4a40-917f-e1af5ca41ec&title=&width=653" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。</p><ul><li>9是奇数，是右子节点，兄弟节点在左边。</li><li>左子<code>2 * x</code>，右子<code>2 * x + 1</code>，9的右子节点位置为<code>2 * 9 + 1 = 19</code>。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742002460-8c8d420c-f165-414a-8dee-a36bff44eedc.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=254&id=u4f655abf&originHeight=254&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13441&status=done&style=none&taskId=ue1e7157e-c1f5-4ad9-a5d2-608fa168468&title=&width=641" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742002460-8c8d420c-f165-414a-8dee-a36bff44eedc.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=254&id=u4f655abf&originHeight=254&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13441&status=done&style=none&taskId=ue1e7157e-c1f5-4ad9-a5d2-608fa168468&title=&width=641" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。边最少的情况，就是每个顶点只有一条入边和一条出边，连成一个圈，即连通图。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742654153-798c18ac-7010-4705-a0c0-cdb531b3639d.png#averageHue=%23f3f0ee&clientId=ue9b01e2c-da1b-4&from=paste&height=212&id=ue0a6924d&originHeight=212&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16954&status=done&style=none&taskId=u3ed17bf9-c65e-4e72-9ef9-6e99964cd23&title=&width=433" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742654153-798c18ac-7010-4705-a0c0-cdb531b3639d.png#averageHue=%23f3f0ee&clientId=ue9b01e2c-da1b-4&from=paste&height=212&id=ue0a6924d&originHeight=212&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16954&status=done&style=none&taskId=u3ed17bf9-c65e-4e72-9ef9-6e99964cd23&title=&width=433" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。虽然本质不同，但是勉强能用，比较麻烦，用两个栈就能实现。</p><ul><li>入第1个栈，顺序反了。</li><li>入第2个栈，顺序再反过来，就是原来的顺序。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742892913-2a1d97a3-96b7-4f31-a2b8-f70c3cdc439a.png#averageHue=%23f6f4f2&clientId=ue9b01e2c-da1b-4&from=paste&height=238&id=ufb8605cc&originHeight=238&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21510&status=done&style=none&taskId=ud6a8f770-0dc8-4af3-9f3b-4b34ae32a88&title=&width=658" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742892913-2a1d97a3-96b7-4f31-a2b8-f70c3cdc439a.png#averageHue=%23f6f4f2&clientId=ue9b01e2c-da1b-4&from=paste&height=238&id=ufb8605cc&originHeight=238&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21510&status=done&style=none&taskId=ud6a8f770-0dc8-4af3-9f3b-4b34ae32a88&title=&width=658" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。</p><ul><li><code>s-&gt;next = p-&gt;next;</code>在<code>p-&gt;next = s;</code> 前，否则就变成<code>s-&gt;next = s</code></li><li><code>p-&gt;next-&gt;prev = s;</code>在<code>p-&gt;next = s;</code>前，否则变成<code>s-&gt;prev = s</code></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744121206-b85defab-8582-4fb0-8b00-482104b07b0e.png#averageHue=%23f6f5f3&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u5b3476a0&originHeight=213&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14398&status=done&style=none&taskId=u12343690-1943-4db6-9a8a-f49868ec64b&title=&width=470" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744121206-b85defab-8582-4fb0-8b00-482104b07b0e.png#averageHue=%23f6f5f3&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u5b3476a0&originHeight=213&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14398&status=done&style=none&taskId=u12343690-1943-4db6-9a8a-f49868ec64b&title=&width=470" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744419034-cbc08b5c-d4ce-4edc-8d24-eb52c2c26b26.png#averageHue=%23f5f0dc&clientId=ue9b01e2c-da1b-4&from=paste&height=251&id=ub1dc5cb6&originHeight=251&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95608&status=done&style=none&taskId=u507d985b-9856-4ec6-959b-8f4c46a5d26&title=&width=928" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744419034-cbc08b5c-d4ce-4edc-8d24-eb52c2c26b26.png#averageHue=%23f5f0dc&clientId=ue9b01e2c-da1b-4&from=paste&height=251&id=ub1dc5cb6&originHeight=251&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95608&status=done&style=none&taskId=u507d985b-9856-4ec6-959b-8f4c46a5d26&title=&width=928" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ul><li>稳定排序：<ul><li>插入排序，基数排序，归并排序，冒泡排序，计数排序。</li></ul></li><li>不稳定排序：<ul><li>快速排序，希尔排序，简单选择排序，堆排序</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744550450-05d64981-72f1-4056-807d-a440eef20cb1.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u635b576c&originHeight=213&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7927&status=done&style=none&taskId=u272d34d7-ea5b-4d46-8b8d-43c19be8d27&title=&width=326" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744550450-05d64981-72f1-4056-807d-a440eef20cb1.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u635b576c&originHeight=213&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7927&status=done&style=none&taskId=u272d34d7-ea5b-4d46-8b8d-43c19be8d27&title=&width=326" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。<br><img src="https://cdn.nlark.com/yuque/__latex/adb7af3133ef066c578f51310825db15.svg#card=math&code=3%2A8%5E1%20%2B%203%2A8%5E0%20%2B%201%2A8%5E%7B-1%7D%20%3D%2026.125%0A&id=fgZ1F" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__latex/adb7af3133ef066c578f51310825db15.svg#card=math&code=3%2A8%5E1%20%2B%203%2A8%5E0%20%2B%201%2A8%5E%7B-1%7D%20%3D%2026.125%0A&id=fgZ1F" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744825884-3aea8261-bf9c-478c-acec-fdf87c38f13b.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=237&id=ESHU7&originHeight=237&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10519&status=done&style=none&taskId=u53f008f5-8556-4908-9a13-27ebdafd311&title=&width=650" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744825884-3aea8261-bf9c-478c-acec-fdf87c38f13b.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=237&id=ESHU7&originHeight=237&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10519&status=done&style=none&taskId=u53f008f5-8556-4908-9a13-27ebdafd311&title=&width=650" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。注意是<strong>子串</strong>，得连续，不是子序列。</p><ul><li>长度0：空串</li><li>长度1:   a、b、c</li><li>长度2：ab、bc、ca</li><li>长度3：abc、bca、cab</li><li>长度4：abca、bcab</li><li>长度5：abcab</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745234787-4422176c-e993-4dc0-ada8-7e5774c40e35.png#averageHue=%23f1eeec&clientId=ue9b01e2c-da1b-4&from=paste&height=203&id=ud2c7b188&originHeight=203&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20114&status=done&style=none&taskId=ucee1a921-2e56-442f-9f56-e48ac83600e&title=&width=481" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745234787-4422176c-e993-4dc0-ada8-7e5774c40e35.png#averageHue=%23f1eeec&clientId=ue9b01e2c-da1b-4&from=paste&height=203&id=ud2c7b188&originHeight=203&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20114&status=done&style=none&taskId=ucee1a921-2e56-442f-9f56-e48ac83600e&title=&width=481" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。</p><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745643505-73f78884-dfae-4502-8098-5968ab857edd.png#averageHue=%23f1f0ef&clientId=ue9b01e2c-da1b-4&from=paste&height=433&id=u3b8a2eeb&originHeight=433&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23124&status=done&style=none&taskId=u7684c64a-7dc1-4ee0-9e95-0ccdffb4d99&title=&width=618" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745643505-73f78884-dfae-4502-8098-5968ab857edd.png#averageHue=%23f1f0ef&clientId=ue9b01e2c-da1b-4&from=paste&height=433&id=u3b8a2eeb&originHeight=433&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23124&status=done&style=none&taskId=u7684c64a-7dc1-4ee0-9e95-0ccdffb4d99&title=&width=618" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745650574-d4570682-09cd-4358-9ae8-619df08a5d92.png#averageHue=%23faf9f9&clientId=ue9b01e2c-da1b-4&from=paste&height=732&id=u67e9cb5f&originHeight=732&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39238&status=done&style=none&taskId=uf333741f-4335-43dd-963d-4ad1acdf172&title=&width=602" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745650574-d4570682-09cd-4358-9ae8-619df08a5d92.png#averageHue=%23faf9f9&clientId=ue9b01e2c-da1b-4&from=paste&height=732&id=u67e9cb5f&originHeight=732&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39238&status=done&style=none&taskId=uf333741f-4335-43dd-963d-4ad1acdf172&title=&width=602" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>A B B B B B<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747829385-5d930deb-4f76-4598-a190-373d6b4ece71.png#averageHue=%23f5f5f4&clientId=ue9b01e2c-da1b-4&from=paste&height=666&id=u0ea02199&originHeight=666&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=518447&status=done&style=none&taskId=u5dd27d2f-5468-49a8-94d7-8533fe47ed7&title=&width=1271" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747829385-5d930deb-4f76-4598-a190-373d6b4ece71.png#averageHue=%23f5f5f4&clientId=ue9b01e2c-da1b-4&from=paste&height=666&id=u0ea02199&originHeight=666&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=518447&status=done&style=none&taskId=u5dd27d2f-5468-49a8-94d7-8533fe47ed7&title=&width=1271" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747940828-bad5e9a0-8ead-4c54-849b-c9db98e6a483.png#averageHue=%23efeeed&clientId=ue9b01e2c-da1b-4&from=paste&height=995&id=u2364d296&originHeight=995&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57000&status=done&style=none&taskId=uba175945-3a14-4015-b495-1c83ed0c320&title=&width=648" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747940828-bad5e9a0-8ead-4c54-849b-c9db98e6a483.png#averageHue=%23efeeed&clientId=ue9b01e2c-da1b-4&from=paste&height=995&id=u2364d296&originHeight=995&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57000&status=done&style=none&taskId=uba175945-3a14-4015-b495-1c83ed0c320&title=&width=648" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747954122-33c1d86f-359a-4ace-8cf1-1e15e7eb6d5b.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=864&id=u6a6af426&originHeight=864&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50950&status=done&style=none&taskId=ua2b6fe04-263f-4117-8b67-2c5f7abe5ea&title=&width=564" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747954122-33c1d86f-359a-4ace-8cf1-1e15e7eb6d5b.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=864&id=u6a6af426&originHeight=864&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50950&status=done&style=none&taskId=ua2b6fe04-263f-4117-8b67-2c5f7abe5ea&title=&width=564" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>B A A C C B</p><p>详解看参考视频。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756115123-3350bd18-bb6e-4208-93d0-5ab83376c1f8.png#averageHue=%23f1f0f0&clientId=u96c5f821-dcfb-4&from=paste&height=726&id=u41782d0a&originHeight=726&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35987&status=done&style=none&taskId=uec47ea6e-58ee-464d-9685-2e9eb9dd6d6&title=&width=664" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756115123-3350bd18-bb6e-4208-93d0-5ab83376c1f8.png#averageHue=%23f1f0f0&clientId=u96c5f821-dcfb-4&from=paste&height=726&id=u41782d0a&originHeight=726&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35987&status=done&style=none&taskId=uec47ea6e-58ee-464d-9685-2e9eb9dd6d6&title=&width=664" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756125008-1519b60a-827b-413c-b3e7-daab0c9bce01.png#averageHue=%23faf9f9&clientId=u96c5f821-dcfb-4&from=paste&height=929&id=u50a0091b&originHeight=929&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56149&status=done&style=none&taskId=ub8c66fd5-4139-4a8b-a2e6-9d5e3b71ccd&title=&width=656" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756125008-1519b60a-827b-413c-b3e7-daab0c9bce01.png#averageHue=%23faf9f9&clientId=u96c5f821-dcfb-4&from=paste&height=929&id=u50a0091b&originHeight=929&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56149&status=done&style=none&taskId=ub8c66fd5-4139-4a8b-a2e6-9d5e3b71ccd&title=&width=656" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>A A B B C B A</p><p><code>solve1</code>函数用二分答案，找到小于等于根号n的最大整数。<br><code>solve2</code>函数中用到了牛顿迭代法求根号。<a href="https://www.zhihu.com/question/20690553">如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？ - 知乎</a></p><ol><li>正确，<code>solve1</code>二分法，时间复杂度为logn，<code>solve2</code>循环k次，时间复杂度为k，总的时间复杂度就为logn + k。</li><li>正确，99的平方就是9081。</li><li>错误。double类型有误差。</li><li>错误，n不超过47000，mid最大<code>47000 / 2 = 23500</code>，int类型最大值为2147483647，开根号46341，比mid最大值大。</li><li><code>solve1</code>返回1，<code>solve2</code>返回<code>(1 + 2 / 1) / 2 = 1.5</code></li><li>1.732，次数越多，越接近根号3。</li><li>16的平方为256，solve1二分能找出来。</li></ol><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1><h2 id="第-19-题（1）"><a href="#第-19-题（1）" class="headerlink" title="第 19 题（1）"></a>第 19 题（1）</h2><p>（枚举因数）从小到大打印正整数 n 的所有正因数。</p><p>试补全枚举程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fac;</span><br><span class="line">    fac.<span class="built_in">reserve</span>((<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n)));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i * i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (①)&#123;</span><br><span class="line">            fac.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; fac.<span class="built_in">size</span>(); ++k)&#123;</span><br><span class="line">        cout &lt;&lt; ② &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (③) &#123;</span><br><span class="line">        cout &lt;&lt; ④ &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = fac.<span class="built_in">size</span>() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)&#123;</span><br><span class="line">        cout &lt;&lt; ⑤ &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691759333220-400c3156-66af-4cd6-89bb-b032774142c0.png#averageHue=%23fdfcfb&clientId=u96c5f821-dcfb-4&from=paste&height=670&id=u7fe466ce&originHeight=670&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22902&status=done&style=none&taskId=ua30bf05c-c7bf-4b32-8509-69595125682&title=&width=479" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691759333220-400c3156-66af-4cd6-89bb-b032774142c0.png#averageHue=%23fdfcfb&clientId=u96c5f821-dcfb-4&from=paste&height=670&id=u7fe466ce&originHeight=670&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22902&status=done&style=none&taskId=ua30bf05c-c7bf-4b32-8509-69595125682&title=&width=479" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>A。判断i是否因数。</li><li>B。下标访问。</li><li>C。循环中运行了 1 到 根号n - 1 的数，此时 i 为根号n，没有判断是否因数，需要判断一下。</li><li>D。打印i。</li><li>A。打印大于根号n的数，用 n 除以 前面得到的因数 得到结果。</li></ol><hr><h2 id="第-20-题（2）（洪水填充）"><a href="#第-20-题（2）（洪水填充）" class="headerlink" title="第 20 题（2）（洪水填充）"></a>第 20 题（2）（洪水填充）</h2><p>现有用字符标记像素颜色的 8x8 图像。颜色填充的操作描述如下：给定起始像素的位置待填充的颜色，将起始像素和所有可达的像素（可达的定义：经过一次或多次的向上、下、左、右四个方向移动所能到达且终点和路径上所有像素的颜色都与起始像素颜色相同），替换为给定的颜色。<br>试补全程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ROWS = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> COLS = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> r, c;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> r, <span class="type">int</span> c): <span class="built_in">r</span>(r), <span class="built_in">c</span>(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_valid</span><span class="params">(<span class="type">char</span> image[ROWS][COLS], Point pt,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="type">int</span> prev_color, <span class="type">int</span> new_color)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> r = pt.r;</span><br><span class="line">    <span class="type">int</span> c = pt.c;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> &lt;= r &amp;&amp; r &lt; ROWS &amp;&amp; <span class="number">0</span> &lt;= c &amp;&amp; c &lt; COLS &amp;&amp;</span><br><span class="line">            ① &amp;&amp; image[r][c] != new_color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flood_fill</span><span class="params">(<span class="type">char</span> image[ROWS][COLS], Point cur, <span class="type">int</span> new_color)</span> </span>&#123;</span><br><span class="line">    queue&lt;Point&gt; queue;</span><br><span class="line">    queue.<span class="built_in">push</span>(cur);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> prev_color = image[cur.r][cur.c];</span><br><span class="line">    ②;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Point pt = queue.<span class="built_in">front</span> ();</span><br><span class="line">        queue.<span class="built_in">pop</span> ();</span><br><span class="line"></span><br><span class="line">        Point points[<span class="number">4</span>] = &#123;③, <span class="built_in">Point</span>(pt.r - <span class="number">1</span>, pt.c),</span><br><span class="line">                           <span class="built_in">Point</span>(pt.r, pt.c + <span class="number">1</span>), <span class="built_in">Point</span>(pt.r, pt.c - <span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p ; points) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">is_valid</span>(image, p, prev_color, new_color)) &#123;</span><br><span class="line">                ④;</span><br><span class="line">                ⑤;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> image[ROWS][COLS] = &#123;&#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">cur</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="type">char</span> new_color = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">flood_fill</span>(image, cur, new_color);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> r = -; r &lt; ROWS; r++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; COLS; c++) &#123;</span><br><span class="line">            cout &lt;&lt; image[r][c] &lt;&lt; <span class="string">&#x27;&#x27;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">//输出:</span></span><br><span class="line"><span class="string">// g g g g g g g g</span></span><br><span class="line"><span class="string">// g g g g g g r r</span></span><br><span class="line"><span class="string">// g r r g g r g g</span></span><br><span class="line"><span class="string">// g y y y y r g r</span></span><br><span class="line"><span class="string">// g g g y y r g r</span></span><br><span class="line"><span class="string">// g g g y y y y r</span></span><br><span class="line"><span class="string">// g g g g g y g g</span></span><br><span class="line"><span class="string">// g g g g g y y g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691760399409-ab2883eb-a23f-4122-9b57-2fca81a7ca3d.png#averageHue=%23f4f4f4&clientId=u96c5f821-dcfb-4&from=paste&height=668&id=u37d6eaf2&originHeight=668&originWidth=512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42945&status=done&style=none&taskId=ued676ba9-cd67-4dc7-92d2-d74f82020fd&title=&width=512" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691760399409-ab2883eb-a23f-4122-9b57-2fca81a7ca3d.png#averageHue=%23f4f4f4&clientId=u96c5f821-dcfb-4&from=paste&height=668&id=u37d6eaf2&originHeight=668&originWidth=512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42945&status=done&style=none&taskId=ued676ba9-cd67-4dc7-92d2-d74f82020fd&title=&width=512" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>A。与新颜色一样已经有了，还要与<strong>起点的颜色</strong>相同。</li><li>B。存完了旧颜色，起点换成新颜色。</li><li>C。方向上下左右，还差方向下。</li><li>D。新位置更新为新颜色。</li><li>A。新位置入队列。</li></ol><hr><p>参考文章及视频</p><ul><li><a href="https://www.bilibili.com/video/BV1WV4y1K7dd/?spm_id_from=333.337.search-card.all.click&vd_source=49e30194f6d5798a1f90d69dad9c0460">2022年CSP-J入门级初赛（第一轮）真题讲解_哔哩哔哩_bilibili</a></li><li>[试题 - CSP 2022 入门级第一轮</li><li>洛谷有题](<a href="https://ti.luogu.com.cn/problemset/1039">https://ti.luogu.com.cn/problemset/1039</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17 动态规划入门</title>
      <link href="/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>灵神【基础算法精讲】视频的个人笔记。</p></blockquote><p><strong>动态规划核心</strong></p><ul><li>状态<strong>定义</strong></li><li>状态<strong>转移方程</strong></li></ul><p>启发思路（跟子集型回溯一样）</p><ul><li><strong>选和不选</strong></li><li><strong>选哪个</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691550569524-af793a61-7c86-4d93-a6b9-104866a5fa73.png#averageHue=%23b4ac9e&clientId=u95269e8a-e303-4&from=paste&height=249&id=u84ba52b5&originHeight=311&originWidth=901&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=134578&status=done&style=none&taskId=u89c12ce4-7ea7-41eb-8b69-d5abc840612&title=&width=720.8" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691550569524-af793a61-7c86-4d93-a6b9-104866a5fa73.png#averageHue=%23b4ac9e&clientId=u95269e8a-e303-4&from=paste&height=249&id=u84ba52b5&originHeight=311&originWidth=901&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=134578&status=done&style=none&taskId=u89c12ce4-7ea7-41eb-8b69-d5abc840612&title=&width=720.8" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="视频例题"><a href="#视频例题" class="headerlink" title="视频例题"></a>视频例题</h1><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198.打家劫舍</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691552773236-9b3596f6-0b8c-4e74-b510-775f0f0af773.png#averageHue=%23bcc6b7&clientId=ub9afacb6-8125-4&from=paste&height=663&id=u061824ac&originHeight=663&originWidth=747&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=92817&status=done&style=none&taskId=ud45222d2-ce62-45b4-bacd-2077dc77d95&title=&width=747" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691552773236-9b3596f6-0b8c-4e74-b510-775f0f0af773.png#averageHue=%23bcc6b7&clientId=ub9afacb6-8125-4&from=paste&height=663&id=u061824ac&originHeight=663&originWidth=747&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=92817&status=done&style=none&taskId=ud45222d2-ce62-45b4-bacd-2077dc77d95&title=&width=747" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第i个</strong>房子选或不选。</li><li>子问题？从<strong>前i个</strong>房子中的最高金额。</li><li>下一个子问题？<ol><li>选：从<strong>前i-2个</strong>房子中的最高金额。</li><li>不选：从<strong>前i-1个</strong>房子中的最高金额。</li></ol></li></ol><p>递归</p><ul><li>会超时</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记忆化搜索</p><ul><li>用数组cache记录 <strong>入参</strong>对应的函数<strong>返回值</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>)  <span class="comment">//base case</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">            <span class="keyword">return</span> cache[i] = <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><ul><li>从记忆化搜索一比一翻译过来: <code>dp[i] = max(dp(i - 1), dp(i - 2) + nums[i]);</code></li><li>防止越界, dp[i]中的i全部+2: <code>dp[i + 2] = max(dp[i + 1], dp[i] + nums[i]);</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = max(dp(i - 1), dp(i - 2) + nums[i])</span></span><br><span class="line">            <span class="comment">//防止越界, dp[i]中的i全部+2</span></span><br><span class="line">            dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>空间优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="type">int</span> new_f = <span class="built_in">max</span>(f1, f0 + x);</span><br><span class="line">            f0 = f1;</span><br><span class="line">            f1 = new_f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h1><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70.爬楼梯</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691554423038-bad216f2-2f45-4620-9412-f1f62990d48a.png#averageHue=%23b7c7bb&clientId=ub9afacb6-8125-4&from=paste&height=622&id=u4be550ff&originHeight=622&originWidth=580&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=48781&status=done&style=none&taskId=u2505b3fe-b841-480a-840f-aaf863792e3&title=&width=580" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691554423038-bad216f2-2f45-4620-9412-f1f62990d48a.png#averageHue=%23b7c7bb&clientId=ub9afacb6-8125-4&from=paste&height=622&id=u4be550ff&originHeight=622&originWidth=580&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=48781&status=done&style=none&taskId=u2505b3fe-b841-480a-840f-aaf863792e3&title=&width=580" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ul><li>1和2是边界，提前赋值。</li><li>楼梯有3阶时，有两种方法：<ul><li>**从1阶楼梯 **爬到3阶楼梯</li><li>**从2阶楼梯 **爬到3阶楼梯</li><li><strong>到达1阶</strong>有1种方法，<strong>到达2阶</strong>有2种方法，故3阶楼梯有3种方法。</li></ul></li><li></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">3</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>; dp[<span class="number">2</span>] = <span class="number">2</span>; <span class="comment">//边界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746.使用最小花费爬楼梯"></a><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746.使用最小花费爬楼梯</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691567530892-b389a81b-ed5c-4836-8196-8dc773c6be9f.png#averageHue=%2396af9f&clientId=u83aa570c-83b8-4&from=paste&height=638&id=uc9d8f029&originHeight=638&originWidth=521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86518&status=done&style=none&taskId=u907148e4-b739-4047-af93-ec45e7d4525&title=&width=521" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691567530892-b389a81b-ed5c-4836-8196-8dc773c6be9f.png#averageHue=%2396af9f&clientId=u83aa570c-83b8-4&from=paste&height=638&id=uc9d8f029&originHeight=638&originWidth=521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86518&status=done&style=none&taskId=u907148e4-b739-4047-af93-ec45e7d4525&title=&width=521" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>详细题解<a href="https://leetcode.cn/problems/min-cost-climbing-stairs/solutions/177077/yi-bu-yi-bu-tui-dao-dong-tai-gui-hua-de-duo-chong-/">力扣</a></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第i层</strong>从<code>i - 1</code>层来 或 从<code>i - 2</code>层来，然后加上<strong>第i层</strong>的花费。</li><li>子问题？到达<strong>第i层</strong>台阶的最小花费。</li><li>下一个子问题？<ol><li>到达<code>i - 1</code>层的最小花费</li><li>到达<code>i - 2</code>层的最小花费</li></ol></li></ol><p><strong>顶部</strong>是第n层，取<code>n-1</code>和<code>n-2</code>的最小值，<code>min(dp[n - 1], dp[n - 2])</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            dp[i] = cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>]) + cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[n - <span class="number">1</span>], dp[n - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466.统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466.统计构造好字符串的方案数</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581239876-31f2640c-3421-4ccb-a0ea-645ae7381d59.png#averageHue=%23313130&clientId=u0809af3e-b2b7-4&from=paste&height=659&id=uc1c77043&originHeight=659&originWidth=687&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77017&status=done&style=none&taskId=u0d145c56-ac96-491c-9f2c-3110a956eb2&title=&width=687" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581239876-31f2640c-3421-4ccb-a0ea-645ae7381d59.png#averageHue=%23313130&clientId=u0809af3e-b2b7-4&from=paste&height=659&id=uc1c77043&originHeight=659&originWidth=687&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77017&status=done&style=none&taskId=u0d145c56-ac96-491c-9f2c-3110a956eb2&title=&width=687" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>记忆化搜索</p><ul><li><code>dfs</code>得出长度为i的好字符串的方案数</li><li>循环, 求出长度从<code>low</code>到<code>high</code>的总方案数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(high + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;] (<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cache[i] = (<span class="built_in">dfs</span>(i - zero) + <span class="built_in">dfs</span>(i - one)) % MOD;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">dfs</span>(i) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(high + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= high; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = dp[i - zero] + dp[i - one]; 会越界</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= zero) dp[i] += dp[i - zero];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= one) dp[i] += dp[i - one];</span><br><span class="line">            dp[i] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123; <span class="comment">//字符串长度为i的方案数</span></span><br><span class="line">            ans += dp[i] % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a><a href="https://leetcode.cn/problems/house-robber-ii/">213.打家劫舍 II</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581774184-ccf817c8-b15e-4a18-8f88-fc2c8cd9ef35.png#averageHue=%23333232&clientId=u0809af3e-b2b7-4&from=paste&height=578&id=u99e0acea&originHeight=578&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78091&status=done&style=none&taskId=u6315df3a-d049-40d4-b679-7bb3dadc163&title=&width=832" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581774184-ccf817c8-b15e-4a18-8f88-fc2c8cd9ef35.png#averageHue=%23333232&clientId=u0809af3e-b2b7-4&from=paste&height=578&id=u99e0acea&originHeight=578&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78091&status=done&style=none&taskId=u6315df3a-d049-40d4-b679-7bb3dadc163&title=&width=832" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>官方题解<a href="https://leetcode.cn/problems/house-robber-ii/solutions/722767/da-jia-jie-she-ii-by-leetcode-solution-bwja/">力扣</a></p><p>跟例题打家劫舍的区别</p><ul><li><strong>第一间</strong>房子和<strong>最后一间</strong>房子不能同时偷</li></ul><p>用打家劫舍的解法，算两次</p><ul><li>第一次求<code>0 ~ n-2</code></li><li>第二次求<code>1 ~ n-1</code></li><li>最后求最大值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dpRange = [&amp;] (<span class="type">int</span> start, <span class="type">int</span> end) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; <span class="built_in">dp</span>(n + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= end; ++i) &#123;</span><br><span class="line">                dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dp[end + <span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0 ~ n-2 和 1 ~ n-1 的最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dpRange</span>(<span class="number">0</span>, n - <span class="number">2</span>), <span class="built_in">dpRange</span>(<span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/10/hello-world/"/>
      <url>/2023/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
