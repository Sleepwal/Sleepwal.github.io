<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>17 动态规划入门</title>
      <link href="/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>灵神【基础算法精讲】视频的个人笔记。</p></blockquote><p><strong>动态规划核心</strong></p><ul><li>状态<strong>定义</strong></li><li>状态<strong>转移方程</strong></li></ul><p>启发思路（跟子集型回溯一样）</p><ul><li><strong>选和不选</strong></li><li><strong>选哪个</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691550569524-af793a61-7c86-4d93-a6b9-104866a5fa73.png#averageHue=%23b4ac9e&clientId=u95269e8a-e303-4&from=paste&height=249&id=u84ba52b5&originHeight=311&originWidth=901&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=134578&status=done&style=none&taskId=u89c12ce4-7ea7-41eb-8b69-d5abc840612&title=&width=720.8" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691550569524-af793a61-7c86-4d93-a6b9-104866a5fa73.png#averageHue=%23b4ac9e&clientId=u95269e8a-e303-4&from=paste&height=249&id=u84ba52b5&originHeight=311&originWidth=901&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=134578&status=done&style=none&taskId=u89c12ce4-7ea7-41eb-8b69-d5abc840612&title=&width=720.8" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="视频例题"><a href="#视频例题" class="headerlink" title="视频例题"></a>视频例题</h1><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198.打家劫舍</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691552773236-9b3596f6-0b8c-4e74-b510-775f0f0af773.png#averageHue=%23bcc6b7&clientId=ub9afacb6-8125-4&from=paste&height=663&id=u061824ac&originHeight=663&originWidth=747&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=92817&status=done&style=none&taskId=ud45222d2-ce62-45b4-bacd-2077dc77d95&title=&width=747" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691552773236-9b3596f6-0b8c-4e74-b510-775f0f0af773.png#averageHue=%23bcc6b7&clientId=ub9afacb6-8125-4&from=paste&height=663&id=u061824ac&originHeight=663&originWidth=747&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=92817&status=done&style=none&taskId=ud45222d2-ce62-45b4-bacd-2077dc77d95&title=&width=747" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第i个</strong>房子选或不选。</li><li>子问题？从<strong>前i个</strong>房子中的最高金额。</li><li>下一个子问题？<ol><li>选：从<strong>前i-2个</strong>房子中的最高金额。</li><li>不选：从<strong>前i-1个</strong>房子中的最高金额。</li></ol></li></ol><p>递归</p><ul><li>会超时</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记忆化搜索</p><ul><li>用数组cache记录 <strong>入参</strong>对应的函数<strong>返回值</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>)  <span class="comment">//base case</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">            <span class="keyword">return</span> cache[i] = <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><ul><li>从记忆化搜索一比一翻译过来: <code>dp[i] = max(dp(i - 1), dp(i - 2) + nums[i]);</code></li><li>防止越界, dp[i]中的i全部+2: <code>dp[i + 2] = max(dp[i + 1], dp[i] + nums[i]);</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = max(dp(i - 1), dp(i - 2) + nums[i])</span></span><br><span class="line">            <span class="comment">//防止越界, dp[i]中的i全部+2</span></span><br><span class="line">            dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>空间优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="type">int</span> new_f = <span class="built_in">max</span>(f1, f0 + x);</span><br><span class="line">            f0 = f1;</span><br><span class="line">            f1 = new_f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h1><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70.爬楼梯</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691554423038-bad216f2-2f45-4620-9412-f1f62990d48a.png#averageHue=%23b7c7bb&clientId=ub9afacb6-8125-4&from=paste&height=622&id=u4be550ff&originHeight=622&originWidth=580&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=48781&status=done&style=none&taskId=u2505b3fe-b841-480a-840f-aaf863792e3&title=&width=580" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691554423038-bad216f2-2f45-4620-9412-f1f62990d48a.png#averageHue=%23b7c7bb&clientId=ub9afacb6-8125-4&from=paste&height=622&id=u4be550ff&originHeight=622&originWidth=580&originalType=binary&ratio=1.25&rotation=0&showTitle=false&size=48781&status=done&style=none&taskId=u2505b3fe-b841-480a-840f-aaf863792e3&title=&width=580" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ul><li>1和2是边界，提前赋值。</li><li>楼梯有3阶时，有两种方法：<ul><li>**从1阶楼梯 **爬到3阶楼梯</li><li>**从2阶楼梯 **爬到3阶楼梯</li><li><strong>到达1阶</strong>有1种方法，<strong>到达2阶</strong>有2种方法，故3阶楼梯有3种方法。</li></ul></li><li></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">3</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>; dp[<span class="number">2</span>] = <span class="number">2</span>; <span class="comment">//边界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746.使用最小花费爬楼梯"></a><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746.使用最小花费爬楼梯</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691567530892-b389a81b-ed5c-4836-8196-8dc773c6be9f.png#averageHue=%2396af9f&clientId=u83aa570c-83b8-4&from=paste&height=638&id=uc9d8f029&originHeight=638&originWidth=521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86518&status=done&style=none&taskId=u907148e4-b739-4047-af93-ec45e7d4525&title=&width=521" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691567530892-b389a81b-ed5c-4836-8196-8dc773c6be9f.png#averageHue=%2396af9f&clientId=u83aa570c-83b8-4&from=paste&height=638&id=uc9d8f029&originHeight=638&originWidth=521&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86518&status=done&style=none&taskId=u907148e4-b739-4047-af93-ec45e7d4525&title=&width=521" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>详细题解<a href="https://leetcode.cn/problems/min-cost-climbing-stairs/solutions/177077/yi-bu-yi-bu-tui-dao-dong-tai-gui-hua-de-duo-chong-/">力扣</a></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第i层</strong>从<code>i - 1</code>层来 或 从<code>i - 2</code>层来，然后加上<strong>第i层</strong>的花费。</li><li>子问题？到达<strong>第i层</strong>台阶的最小花费。</li><li>下一个子问题？<ol><li>到达<code>i - 1</code>层的最小花费</li><li>到达<code>i - 2</code>层的最小花费</li></ol></li></ol><p><strong>顶部</strong>是第n层，取<code>n-1</code>和<code>n-2</code>的最小值，<code>min(dp[n - 1], dp[n - 2])</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            dp[i] = cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>]) + cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[n - <span class="number">1</span>], dp[n - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466.统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466.统计构造好字符串的方案数</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581239876-31f2640c-3421-4ccb-a0ea-645ae7381d59.png#averageHue=%23313130&clientId=u0809af3e-b2b7-4&from=paste&height=659&id=uc1c77043&originHeight=659&originWidth=687&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77017&status=done&style=none&taskId=u0d145c56-ac96-491c-9f2c-3110a956eb2&title=&width=687" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581239876-31f2640c-3421-4ccb-a0ea-645ae7381d59.png#averageHue=%23313130&clientId=u0809af3e-b2b7-4&from=paste&height=659&id=uc1c77043&originHeight=659&originWidth=687&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77017&status=done&style=none&taskId=u0d145c56-ac96-491c-9f2c-3110a956eb2&title=&width=687" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>记忆化搜索</p><ul><li><code>dfs</code>得出长度为i的好字符串的方案数</li><li>循环, 求出长度从<code>low</code>到<code>high</code>的总方案数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(high + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;] (<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cache[i] = (<span class="built_in">dfs</span>(i - zero) + <span class="built_in">dfs</span>(i - one)) % MOD;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">dfs</span>(i) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(high + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= high; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = dp[i - zero] + dp[i - one]; 会越界</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= zero) dp[i] += dp[i - zero];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= one) dp[i] += dp[i - one];</span><br><span class="line">            dp[i] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123; <span class="comment">//字符串长度为i的方案数</span></span><br><span class="line">            ans += dp[i] % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a><a href="https://leetcode.cn/problems/house-robber-ii/">213.打家劫舍 II</a></h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581774184-ccf817c8-b15e-4a18-8f88-fc2c8cd9ef35.png#averageHue=%23333232&clientId=u0809af3e-b2b7-4&from=paste&height=578&id=u99e0acea&originHeight=578&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78091&status=done&style=none&taskId=u6315df3a-d049-40d4-b679-7bb3dadc163&title=&width=832" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691581774184-ccf817c8-b15e-4a18-8f88-fc2c8cd9ef35.png#averageHue=%23333232&clientId=u0809af3e-b2b7-4&from=paste&height=578&id=u99e0acea&originHeight=578&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78091&status=done&style=none&taskId=u6315df3a-d049-40d4-b679-7bb3dadc163&title=&width=832" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>官方题解<a href="https://leetcode.cn/problems/house-robber-ii/solutions/722767/da-jia-jie-she-ii-by-leetcode-solution-bwja/">力扣</a></p><p>跟例题打家劫舍的区别</p><ul><li><strong>第一间</strong>房子和<strong>最后一间</strong>房子不能同时偷</li></ul><p>用打家劫舍的解法，算两次</p><ul><li>第一次求<code>0 ~ n-2</code></li><li>第二次求<code>1 ~ n-1</code></li><li>最后求最大值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dpRange = [&amp;] (<span class="type">int</span> start, <span class="type">int</span> end) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; <span class="built_in">dp</span>(n + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= end; ++i) &#123;</span><br><span class="line">                dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dp[end + <span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0 ~ n-2 和 1 ~ n-1 的最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dpRange</span>(<span class="number">0</span>, n - <span class="number">2</span>), <span class="built_in">dpRange</span>(<span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/10/hello-world/"/>
      <url>/2023/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
