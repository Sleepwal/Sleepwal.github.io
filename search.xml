<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019CSP-J1真题</title>
      <link href="/2023/08/15/2019CSP-J1%E7%9C%9F%E9%A2%98/"/>
      <url>/2023/08/15/2019CSP-J1%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>In Process</p></blockquote><h1 id="一、单项选择题"><a href="#一、单项选择题" class="headerlink" title="一、单项选择题"></a>一、单项选择题</h1><p>第 1 题</p><p>中国的国家顶级域名是（）</p><p>A. .cn</p><p>B. .ch</p><p>C. .chn</p><p>D. .china</p><blockquote><p>选A。域名用<code>.</code>分割，最右边的是顶级域名，中国的国家顶级域名是.cn。 </p></blockquote><p>第 2 题</p><p>二进制数 11 1011 1001 0111 和 01 0110 1110 1011 进行逻辑与运算的结果是（）。</p><p>A. 01 0010 1000 1011</p><p>B. 01 0010 1001 0011</p><p>C. 01 0010 1000 0001</p><p>D. 01 0010 1000 0011</p><blockquote><p>选D。两位都为1，结果为1，否则为0。</p></blockquote><table><thead><tr><th></th><th align="left"></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td align="left">1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>&amp;</td><td align="left">0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td></td><td align="left">0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>第 3 题</p><p>一个 32 位整型变量占用（）个字节。</p><p>A. 32</p><p>B. 128</p><p>C. 4</p><p>D. 8</p><blockquote><p>选C。解析：在计算机中，数据存储的单位是字节(Byte),一个字节等于8位(bit)。一个32位整型变量，就是指这个变量可以存储32个二进制位，即4个字节。所以，一个32位整型变量占用4个字节。</p></blockquote><p>第 4 题</p><p>若有如下程序段，其中 <code>s</code>、<code>a</code>、<code>b</code>、<code>c</code> 均已定义为整型变量,且 <code>a</code>、<code>c</code> 均已赋值（<code>c</code> 大于 00）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = a;  </span><br><span class="line"><span class="keyword">for</span> （b = <span class="number">1</span>; b &lt;= c; b++） s = s - <span class="number">1</span>;  </span><br></pre></td></tr></table></figure><p>则与上述程序段功能等价的赋值语句是（）</p><p>A. <code>s = a - c;</code></p><p>B. <code>s = a - b;</code></p><p>C. <code>s = s - c;</code></p><p>D. <code>s = b - c;</code></p><blockquote><p>选A。解析：在程序段中，首先将变量 <code>a</code> 的值赋给变量 <code>s</code>，然后通过一个循环对 <code>s</code> 进行操作。循环的次数由变量 <code>c</code> 决定，每次循环都会使 <code>s</code> 的值减1。</p><p>如果我们要找到一个赋值语句，其功能与上述程序段等价，那么我们需要找到一个表达式，该表达式在执行后也会使 <code>s</code> 的值减1，并且减的次数等于 <code>c</code>。</p><p>选项A中的表达式 <code>s = a - c;</code> 符合这个要求。在程序段中，每次循环都会执行 <code>s = s - 1</code>，这会使 <code>s</code> 的值减去1。由于循环的次数由 <code>c</code> 决定，因此总共会进行 <code>c</code> 次减法操作，这就满足了题目的要求。</p></blockquote><p>第 5 题</p><p>设有 100 个已排好序的数据元素，采用折半查找时，最大比较次数为（）</p><p>A. 7</p><p>B. 10</p><p>C. 6 </p><p>D. 8</p><blockquote><p>选。需要$\log _2 100$次，2的n中大于100的最小整数是$2^7 &#x3D; 128$，故最大次数为7。</p></blockquote><p>第 6 题</p><p>链表不具有的特点是（）</p><p>A. 插入删除不需要移动元素</p><p>B. 不必事先估计存储空间</p><p>C. 所需空间与线性表长度成正比</p><p>D. 可随机访问任一元素</p><blockquote><p>选D。解析：链表是一种常见的数据结构，它由一系列节点组成，每个节点包含两部分：数据域和指针域。数据域用于存储数据元素，而指针域用于存储下一个节点的地址。</p><p>选项A是正确的，因为链表的插入和删除操作只需要修改相邻节点的指针域，而不需要移动其他元素。这使得链表在插入和删除操作上比线性表更加高效。</p><p>选项B也是正确的，因为链表不必预先分配固定大小的存储空间。每当需要添加一个新元素时，只需分配一个新的节点，并将其添加到链表的末尾即可。这使得链表在内存使用上更加灵活。</p><p>选项C也是正确的，因为链表所需的存储空间与线性表的长度成正比。每个节点都需要额外的存储空间来存储指针域，而链表中的元素数量就是节点的数量。</p><p>然而，选项D是不正确的，因为链表不能随机访问任一元素。为了访问链表中的任一元素，必须从链表的头部开始遍历，直到找到目标元素或者到达链表的尾部。这种顺序访问的方式使得链表在随机访问上的性能较差于线性表。</p></blockquote><p>第 7 题</p><p>把 8 个同样的球放在 5 个同样的袋子里，允许有的袋子空着不放，问共有多少种不同的分法？（）</p><p>提示：如果 8 个球都放在一个袋子里，无论是哪个袋子，都只算同一种分法。</p><p>A. 22</p><p>B. 24</p><p>C. 18</p><p>D. 20</p><blockquote><p>选C。</p><p>4个空袋：1种</p><p>3个空袋：1+7，2+6，3+5，4+4</p><p>2个空袋：1+1+6，1+2+5，1+3+4，2+2+4，2+3+3</p><p>1个空袋：1+1+1+5，1+1+2+4，1+1+3+3，1+2+2+3，2+2+2+2</p><p>没有空袋：1+1+1+1+4，1+1+1+2+3，1+1+2+2+2</p></blockquote><p>第 8 题</p><p>一棵二叉树如右图所示，若采用顺序存储结构，即用一维数组元素存储该二叉树中的结点（根结点的下标为 1，若某结点的下标为 <em>i</em>，则其左孩子位于下标 2<em>i</em> 处、右孩子位于下标2<em>i</em>+1 处），则该数组的最大下标至少为（）。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/7d58dfs8.png?x-oss-process=image/resize,m_lfit,h_170,w_225" class="lazyload placeholder" data-srcset="https://cdn.luogu.com.cn/upload/image_hosting/7d58dfs8.png?x-oss-process=image/resize,m_lfit,h_170,w_225" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>A. 6</p><p>B. 10</p><p>C. 15</p><p>D. 12</p><blockquote><p>选C。 </p></blockquote><p><img src="/../images/2019CSP-J1%E7%9C%9F%E9%A2%98/image-20230815162747155.png" class="lazyload placeholder" data-srcset="/../images/2019CSP-J1%E7%9C%9F%E9%A2%98/image-20230815162747155.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230815162747155"></p><p>第 9 题</p><p>100 以内最大的素数是（）。</p><p>A. 89</p><p>B. 97</p><p>C. 91</p><p>D. 93</p><blockquote><p>选B。</p></blockquote><p>第 10 题</p><p>319 和 377 的最大公约数是（）。</p><p>A. 27</p><p>B. 33</p><p>C. 29</p><p>D. 31</p><blockquote><p>选C。可以用辗转相除法。</p><ol><li>$377 % 319 &#x3D; 58$</li><li>$319 % 58 &#x3D; 29$</li><li>$58 % 29 &#x3D; 0$</li></ol><p>故答案为29。</p></blockquote><p>第 11 题</p><p>新学期开学了，小胖想减肥，健身教练给小胖制定了两个训练方案。</p><ul><li>方案一：每次连续跑 3 公里可以消耗 300 千卡（耗时半小时）；</li><li>方案二：每次连续跑 5 公里可以消耗 600 千卡（耗时 1 小时）。</li></ul><p>小胖每周周一到周四能抽出半小时跑步，周五到周日能抽出一小时跑步。<br>另外，教练建议小胖每周最多跑21公里，否则会损伤膝盖。<br>请问如果小胖想严格执行教练的训练方案，并且不想损伤膝盖，每周最多通过跑步消耗多少千卡？（）</p><p>A. 3000</p><p>B. 2500</p><p>C. 2400</p><p>D. 2520</p><blockquote><p>选C。3天跑一小时，2天跑半小时，共21公里，1800 + 600 &#x3D; 2400千卡。</p></blockquote><p>第 12 题</p><p>—副纸牌除掉大小王有 52张牌，四种花色，每种花色 13 张。</p><p>假设从这 52 张牌中随机抽取 13 张纸牌，则至少（）张牌的花色一致。</p><p>A. 4</p><p>B. 2</p><p>C. 3</p><p>D. 5</p><blockquote><p>选A。解析：这是一个应用鸽巢原理的问题。鸽巢原理，又称抽屉原理，是组合数学中的一个定理。其基本内容是：如果把$n+1$个物体放入$n$个盒子，那么至少有一个盒子里有两个物体。</p><p>在这个问题中，”鸽子”是52张牌，”鸽巢”是4种花色。我们需要从52张牌中抽取13张牌，那么根据鸽巢原理，至少有一个花色的牌数大于等于$\dfrac{13}{4}&#x3D;3.25$,向上取整得4。</p><p>所以至少4张牌的花色一致。</p></blockquote><p>第 13 题</p><p>—些数字可以颠倒过来看，例如 0,1,8 颠倒过来还是本身，6 颠倒过来是 9，9 颠倒过来看还是 6，其他数字颠倒过来都不构成数字。<br>类似的，一些多位数也可以颠倒过来看，比如 106 颠倒过来是 901。假设某个城市的车牌只由 5 位数字组成，每一位都可以取 0 到 9。<br>请问这个城市最多有多少个车牌倒过来恰好还是原来的车牌？（）</p><p>A. 60</p><p>B. 125</p><p>C. 75</p><p>D. 100</p><blockquote><p>选C。第1、2位有（0、1、8、6、9）五个数字，第3位有（0、1、8）三个数字，第4、5位由第1、2位决定(如第1位6，则第5位9）。<code>5 * 5 * 3 = 75</code></p></blockquote><p>第 14 题</p><p>假设一棵二叉树的后序遍历序列为 DGJHEBIFCA，中序遍历序列为 DBGEHJACIF，则其前序遍历序列为（）。</p><p>A. ABCDEFGHIJ</p><p>B. ABDEGHJCFI</p><p>C. ABDEGJHCFI</p><p>D. ABDEGHJFIC</p><blockquote><p>选B。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A --&gt; B &amp; C</span><br><span class="line">    B --&gt; D &amp; E</span><br><span class="line">    E --&gt; G &amp; H</span><br><span class="line">    H --&gt; J</span><br><span class="line"></span><br><span class="line">    C --&gt; S((NULL)) &amp; F</span><br><span class="line">    F --&gt; I &amp; Q((NULL))</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="mermaid">graph TB​A --&gt; B &amp; C​B --&gt; D &amp; E​E --&gt; G &amp; H​H --&gt; J​C --&gt; S((NULL)) &amp; F​F --&gt; I &amp; Q((NULL))</div><p>第 15 题</p><p>以下哪个奖项是计算机科学领域的最高奖？（）</p><p>A. 图灵奖</p><p>B. 鲁班奖</p><p>C. 诺贝尔奖</p><p>D. 普利策奖</p><blockquote><p>选A。</p></blockquote><hr><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><hr><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020CSP-J1真题</title>
      <link href="/2023/08/14/2020CSP-J1%E7%9C%9F%E9%A2%98/"/>
      <url>/2023/08/14/2020CSP-J1%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>In Process</p></blockquote><h1 id="一、单向选择题"><a href="#一、单向选择题" class="headerlink" title="一、单向选择题"></a>一、单向选择题</h1><p>第 1 题</p><p>在内存储器中每个存储单元都被赋予一个唯一的序号，称为（）。</p><p>A. 地址</p><p>B. 序号</p><p>C. 下标</p><p>D. 编号</p><blockquote><p>选A。内存储器是计算机中的一种存储设备，用于存储程序和数据。每个存储单元都被赋予一个唯一的序号，称为地址。地址是内存中的一个位置，它是由二进制数字表示的，用于定位内存中的特定位置。在计算机中，地址通常是由处理器读取的，以访问内存中的特定位置。</p></blockquote><p>第 2 题</p><p>编译器的主要功能是（ ）。</p><p>A. 将源程序翻译成机器指令代码</p><p>B. 将源程序重新组合</p><p>C. 将低级语言翻译成高级语言</p><p>D. 将一种高级语言翻译成另一种高级语言</p><blockquote><p>选A。编译器是一种程序，它将一种高级语言编写的程序转换成目标语言（通常为低级语言）的程序。编译器能够识别代码中的词汇、句子以及各种特定的格式，并将他们转换成计算机能够识别的二进制形式，这个过程称为编译 。</p><p>编译器的主要功能包括：将源代码翻译成目标代码、进行语义检查、优化和生成目标文件等 。</p></blockquote><p>第 3 题</p><p>设 <code>x=true,y=true,z=false</code>，以下逻辑运算表达式值为真的是（ ）。</p><p>A. (y∨z)∧x∧z</p><p>B. x∧(z∨y) ∧z</p><p>C. (x∧y) ∧z</p><p>D. (x∧y)∨(z∨x)</p><blockquote><p>选D。有一个<code>^z</code>，值为假。</p></blockquote><p>第 4 题</p><p>现有一张分辨率为 2048×1024 像素的 32 位真彩色图像。请问要存储这张图像，需要多大的存储空间？（ ）。</p><p>A. 16MB</p><p>B. 4MB</p><p>C. 8MB</p><p>D. 2MB</p><blockquote><p>选C。用32位二进制数表示1个像素的颜色。</p></blockquote><p>$$<br>\frac{32}{8} * 2048 * 1024 \<br>&#x3D; 4 * 2^{11} * 2^{10} \<br>&#x3D; 2^2 * 2^{21} B \<br>&#x3D; \frac{2^{23}}{2^{20}}MB &#x3D; 2^3 MB &#x3D; 8 MB<br>$$</p><p>第 5 题</p><p>冒泡排序算法的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：数组L, n ≥ k。输出：按非递减顺序排序的 L。</span><br><span class="line">算法 BubbleSort：</span><br><span class="line">   <span class="number">1.</span> FLAG ← n <span class="comment">//标记被交换的最后元素位置</span></span><br><span class="line">   <span class="number">2.</span> <span class="keyword">while</span> FLAG &gt; <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">   <span class="number">3.</span>     k ← FLAG <span class="number">-1</span></span><br><span class="line">   <span class="number">4.</span>     FLAG ← <span class="number">1</span></span><br><span class="line">   <span class="number">5.</span>     <span class="keyword">for</span> j=<span class="number">1</span> to k <span class="keyword">do</span></span><br><span class="line">   <span class="number">6.</span>         <span class="keyword">if</span> <span class="built_in">L</span>(j) &gt; <span class="built_in">L</span>(j+<span class="number">1</span>) then <span class="keyword">do</span></span><br><span class="line">   <span class="number">7.</span>              <span class="built_in">L</span>(j)  ↔ <span class="built_in">L</span>(j+<span class="number">1</span>)</span><br><span class="line">   <span class="number">8.</span>              FLAG ← j</span><br></pre></td></tr></table></figure><p>对 <em>n</em> 个数用以上冒泡排序算法进行排序，最少需要比较多少次?（ ）。</p><p>A. $n^2$</p><p>B. n−2 </p><p>C. n−1 </p><p>D. n</p><blockquote><p>选C。最好情况，程序已经排好序，n个数要比较n - 1次。</p></blockquote><p>第 6 题</p><p>设 <em>A</em> 是 <em>n</em> 个实数的数组，考虑下面的递归算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">XYZ</span> (A[<span class="number">1.</span>.n])</span><br><span class="line"><span class="keyword">if</span> n=<span class="number">1</span> then <span class="keyword">return</span> A[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span> temp ← <span class="built_in">XYZ</span> (A[<span class="number">1.</span>.n<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">if</span> temp &lt; A[n]</span><br><span class="line">    then <span class="keyword">return</span> temp</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> A[n]</span><br></pre></td></tr></table></figure><p>请问算法 XYZ 的输出是什么？（）。</p><p>A. A 数组的平均</p><p>B. A 数组的最小值</p><p>C. A 数组的中值</p><p>D. A 数组的最大值</p><blockquote><p>选B。</p><p>这个递归算法是一种简单的选择排序，它用于在数组中查找最小值。让我们逐步解释算法的工作原理：</p><ol><li><p>如果数组只有一个元素（n&#x3D;1），那么最小值就是该元素本身，直接返回 A[1]。</p></li><li><p>否则，我们递归地调用 XYZ 函数来对前 n-1 个元素进行排序，并将结果存储在临时变量 temp 中。</p></li><li><p>然后，我们将第 n 个元素与 temp 进行比较。</p></li><li><p>如果 temp 小于第 n 个元素，说明在第 n-1 个元素中已经找到了最小值，因此我们可以直接返回 temp。</p></li><li><p>否则，第 n 个元素就是最小的元素，我们将其返回。</p></li></ol><p>通过递归地将问题分解为更小的子问题，并在每个子问题上选择最小值，最终算法会找到整个数组中的最小值并返回。因此，答案是 B. A 数组的最小值。</p></blockquote><p>第 7 题</p><p>链表不具有的特点是（）。</p><p>A. 可随机访问任一元素</p><p>B. 不必事先估计存储空间</p><p>C. 插入删除不需要移动元素</p><p>D. 所需空间与线性表长度成正比</p><blockquote><p>选A. 可随机访问任一元素。</p><p>链表是一种线性数据结构，其中的元素不是连续存储的。每个元素都包含一个指向下一个元素的指针。因此，要访问链表中的任一元素，必须先遍历到该元素所在的节点，然后通过节点中的指针来访问该元素。由于需要遍历，所以链表不能像数组那样直接通过索引来访问任一元素，因此不具备随机访问任一元素的特点。</p></blockquote><p>第 8 题</p><p>有 10 个顶点的无向图至少应该有（ ）条边才能确保是一个连通图。</p><p>A. 9</p><p>B. 10</p><p>C. 11</p><p>D. 12</p><blockquote><p>选A。一个无向图的连通性是指图中任意两个顶点都存在一条路径相连。</p><p>对于有n个顶点的无向图，其连通性至少需要满足的条件是：当且仅当图中含有n-1条边时，这个图才是连通的。</p><p>因此，对于有10个顶点的无向图，至少需要9条边才能确保它是连通图。这是因为当图中只有8条边时，这个图就不是一个连通图。</p><p>举个例子，考虑一个有4个顶点的无向图，它只有3条边，所以它不是一个连通图。但是如果我们添加第4条边，这个图就变成了一个连通图。</p></blockquote><p>第 9 题</p><p>二进制数 1011 转换成十进制数是（ ）。</p><p>A. 11</p><p>B. 10</p><p>C. 13</p><p>D. 12</p><blockquote><p>选A。我们可以通过将二进制数的每一位乘以$2^n$(其中$n$为该位上的数字),然后将结果相加来将二进制数转换为十进制数。二进制数1011的转换过程如下：$1\times2^3+0\times2^2+1\times2^1+1\times2^0&#x3D;11$</p></blockquote><p>第 10 题</p><p>5 个小朋友并排站成一列，其中有两个小朋友是双胞胎，如果要求这两个双胞胎必须相邻，则有（ ）种不同排列方法?</p><p>A. 48</p><p>B. 36</p><p>C. 24</p><p>D. 72</p><blockquote><p>选A。我们可以把双胞胎看作一个整体，那么就有4个整体(3个小朋友和一个双胞胎整体)需要排列，共有$4!&#x3D;24$种排列方法。而双胞胎之间又有2种排列方法。所以总的排列方法为$24\times2$ $&#x3D;48$种。</p></blockquote><p>第 11 题</p><p>下图中所使用的数据结构是（ )。</p><p><img src="http://luogu-ipic.oss-cn-shanghai.aliyuncs.com/s4eck.png" class="lazyload placeholder" data-srcset="http://luogu-ipic.oss-cn-shanghai.aliyuncs.com/s4eck.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>A. 栈</p><p>B. 队列</p><p>C. 二叉树</p><p>D. 哈希表</p><blockquote><p>选A。先入后出，是栈。</p></blockquote><p>第 12 题</p><p>独根树的高度为 1。具有 61 个结点的完全二叉树的高度为（ ）。</p><p>A. 7</p><p>B. 8</p><p>C. 5</p><p>D. 6</p><blockquote><p>选D。15年考过。</p><p>解析：根据二叉树的性质，满二叉树的高度为 $\log_2(n+1)$，其中 n 为结点个数。因此，具有 61 个结点的完全二叉树的高度为 $\lfloor \log_2(61+1) \rfloor + 1 &#x3D; \lfloor \log_2(62) \rfloor + 1 &#x3D; 6$。</p></blockquote><p>第 13 题</p><p>干支纪年法是中国传统的纪年方法，由 10 个天干和 12 个地支组合成 60 个天干地支。由公历年份可以根据以下公式和表格换算出对应的天干地支。</p><ul><li>天干 &#x3D;（公历年份）除以 10 所得余数</li><li>地支 &#x3D;（公历年份）除以 12 所得余数</li></ul><p><img src="http://luogu-ipic.oss-cn-shanghai.aliyuncs.com/9xdup.png" class="lazyload placeholder" data-srcset="http://luogu-ipic.oss-cn-shanghai.aliyuncs.com/9xdup.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>例如，今年是 2020 年，2020 除以 10 余数为 0，查表为”庚”；2020 除以 12，余数为 4，查表为“子” 所以今年是庚子年。</p><p>请问 1949 年的天干地支是（ ）</p><p>A. 己酉</p><p>B. 己亥</p><p>C. 己丑</p><p>D. 己卯</p><blockquote><p>选C。首先，我们需要计算1949年除以10和12的余数。</p><p>$1949\div10$ $&#x3D;194.9$,余数为9。</p><p>$1949\div12$ $&#x3D;1949&#x2F;12$,余数为5。</p><p>1949年的天干是9,地支是5，天干地支是己丑。</p></blockquote><p>第 14 题</p><p>10 个三好学生名额分配到 7 个班级，每个班级至少有一个名额，一共有（ ）种不同的分配方案。</p><p>A. 84</p><p>B. 72</p><p>C. 56</p><p>D. 504</p><blockquote><p>选A。可将10个学生看成10个元素，一字排开，元素之间形成9个空。在9个空中插入6块板即可将其分为7部分，则共有$C_9^6&#x3D;84$种方案。</p></blockquote><p>第 15 题</p><p>有五副不同颜色的手套（共 10 只手套，每副手套左右手各 1 只），一次性从中取 6 只手套，请问恰好能配成两副手套的不同取法有（ ）种。</p><p>A. 120</p><p>B. 180</p><p>C. 150</p><p>D. 30</p><blockquote><p>选A。恰好能配成两幅手套，那么只能是$5$只手套成一副，剩下1只手套。</p><p>所以先从5副中取2副，有$C_5^2&#x3D;10$种，</p><p>再从剩下的6只中，取第5个，6种取法，</p><p>从剩下的5只中，取第6个，不能与第5个相同，只有2种取法，</p><p>共有$C_5^2\times 6 \times \times 2&#x3D;120$种。</p></blockquote><hr><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><h2 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> encoder[<span class="number">26</span>] = &#123;<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> decoder[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">string st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (encoder[i] != <span class="number">0</span>) ++k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> x =<span class="string">&#x27;A&#x27;</span>; x &lt;= <span class="string">&#x27;Z&#x27;</span>; ++x) &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (encoder[i] ==x) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            encoder[k]= x;</span><br><span class="line">            ++k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        decoder[encoder[i]- <span class="string">&#x27;A&#x27;</span>] = i + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    cin &gt;&gt; st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; st.<span class="built_in">length</span>( ); ++i)</span><br><span class="line">        st[i] = decoder[st[i] -<span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">    cout &lt;&lt; st;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 这个程序实现了一个简单的字符编码器和解码器。它使用了两个数组，<code>encoder</code>和<code>decoder</code>，分别用于存储编码后的字符和解码后的字符。初始时，<code>encoder</code>数组中已经包含了一些字符（’C’、’S’、’P’），这些字符被用作起始的编码映射。</p><p>程序首先通过遍历<code>encoder</code>数组来计算实际使用的字符个数，即变量<code>k</code>的值。然后，它使用一个循环来遍历字母表中的大写字母（从’A’到’Z’），并检查每个字母是否已经在<code>encoder</code>数组中出现过。如果某个字母没有出现过，就将其添加到<code>encoder</code>数组中，并增加<code>k</code>的值。</p><p>接下来，程序使用另一个循环来构建<code>decoder</code>数组，将编码后的字符映射回原始字符。具体来说，它将<code>encoder</code>数组中的每个元素减去’A’的ASCII值，然后将索引值加上’A’的ASCII值，得到对应的原始字符的索引。这样就建立了编码和解码之间的映射关系。</p><p>程序接着读取输入的字符串<code>st</code>，并使用循环遍历该字符串的每个字符。对于每个字符，它通过查找<code>decoder</code>数组来获取对应的原始字符，并将其替换为原始字符。最后，程序输出解码后的字符串<code>st</code>。</p><p>总结起来，这段程序实现了一个简单的编码器和解码器，可以将输入的字符串进行编码和解码操作。</p></blockquote><p><img src="/../images/2020CSP-J1%E7%9C%9F%E9%A2%98/image-20230814221412265.png" class="lazyload placeholder" data-srcset="/../images/2020CSP-J1%E7%9C%9F%E9%A2%98/image-20230814221412265.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814221412265"></p><p><img src="/../images/2020CSP-J1%E7%9C%9F%E9%A2%98/image-20230814221909281.png" class="lazyload placeholder" data-srcset="/../images/2020CSP-J1%E7%9C%9F%E9%A2%98/image-20230814221909281.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814221909281"></p><p>判断题</p><p>16、输入的字符串应当只由大写字母组成，否则在访问数组时可能越界。（ 正确 ）</p><p>17、若输入的字符串不是空串，则输入的字符串与输出的字符串一定不一样。（ 错误 ）</p><p>18、将第 12 行的 <code>i &lt; 26</code> 改为 <code>i &lt; 16</code>，程序运行结果不会改变。（ 正确  ）</p><p>19、将第 26 行的 <code>i &lt; 26</code> 改为 <code>i &lt; 16</code>，程序运行结果不会改变。（ 错误 ）</p><p>单选题</p><p>20、若输出的字符串为ABCABCABCA，则下列说法正确的是（ ）。</p><p>A. 输入的字符串中既有 S 又有 P</p><p>B. 输入的字符串中既有 S 又有 B</p><p>C. 输入的字符串中既有 A 又有 P</p><p>D. 输入的字符串中既有 A 又有 B</p><blockquote><p>选A。</p></blockquote><p>21、若输出的字符串为 CSPCSPCSPCSP，则下列说法正确的是（ ）。</p><p>A. 输入的字符串中既有 P 又有 K</p><p>B. 输入的字符串中既有 J 又有 R</p><p>C. 输入的字符串中既有 J 又有 K</p><p>D. 输入的字符串中既有 P 又有 R</p><blockquote><p>选D。</p></blockquote><h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, ans;</span><br><span class="line"><span class="type">int</span> k, len;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d[<span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    len= <span class="number">1</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt;n; ++i) &#123;</span><br><span class="line">        ++d[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j + <span class="number">1</span>&lt;len; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[j] == k) &#123;</span><br><span class="line">                d[j] = <span class="number">0</span>;</span><br><span class="line">                d[j + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d[len- <span class="number">1</span>] == k) &#123;</span><br><span class="line">            d[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            d[len] =<span class="number">1</span>;</span><br><span class="line">            ++len;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设输入的 <em>n</em> 是不超过 $2^{62}$ 的正整数，<em>k</em> 都是不超过 10000 的正整数，完成下面的判断题和单选题：</p><p>判断题</p><p>22、若 <em>k</em> &#x3D; 1，则输出 ans 时，len &#x3D; <em>n</em>。（ ）</p><p>23、若 <em>k</em> &gt; 1，则输出 ans 时，len —定小于 <em>n</em>。（ ）</p><p>24、若 <em>k</em> &gt; 1，则输出 ans 时，$k^{len}$ —定大于 <em>n</em>。（ ）</p><p>单选题</p><p>25、若输入的 <em>n</em> 等于：$10^{15}$，输入的 <em>k</em> 为 1，则输出等于（ ）。</p><p>A. 1</p><p>B. $(10^{30} − 10^{15}) \div 2$</p><p>C. $(10^{30} + 10^{15}) \div 2$</p><p>D. $10^{15}$</p><p>26、若输入的 <em>n</em> 等于 205, 891, 132, 094, 649（即 $3^{30}$），输入的 <em>k</em> 为 3，则输出等于（ ）。</p><p>A. $3^{30}$</p><p>B. $(3^{30} − 1) \div 2$</p><p>C. $3^{30} − 1$</p><p>D. $(3^{30} + 1) \div 2$</p><p>27、 若输入的 <em>n</em> 等于 100, 010, 002, 000, 090，输入的 <em>k</em> 为 10，则输出等于（ ）。</p><p>A. 11, 112, 222, 444, 543</p><p>B. 11,122, 222, 444, 453</p><p>C. 11, 122, 222, 444, 543</p><p>D. 11, 112, 222, 444, 453</p><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;                     </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;                                   </span><br><span class="line"><span class="type">int</span> d[<span class="number">50</span>][<span class="number">2</span>];                            </span><br><span class="line"><span class="type">int</span> ans;                                 </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> sum)</span> </span>&#123;               </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;                            </span><br><span class="line">        ans = <span class="built_in">max</span>(sum, ans);           </span><br><span class="line">        <span class="keyword">return</span>;                                   </span><br><span class="line">    &#125;                                        </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;            </span><br><span class="line">        <span class="type">int</span> a = d[i - <span class="number">1</span>][<span class="number">0</span>], b = d[i - <span class="number">1</span>][<span class="number">1</span>];  </span><br><span class="line">        <span class="type">int</span> x = d[i][<span class="number">0</span>], y = d[i][<span class="number">1</span>];            </span><br><span class="line">        d[i - <span class="number">1</span>][<span class="number">0</span>] = a + x;                     </span><br><span class="line">        d[i - <span class="number">1</span>][<span class="number">1</span>] = b + y;                     </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n - <span class="number">1</span>; ++j)            </span><br><span class="line">            d[j][<span class="number">0</span>] = d[j + <span class="number">1</span>][<span class="number">0</span>], d[j][<span class="number">1</span>] = d[j + <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> s = a + x + <span class="built_in">abs</span>(b - y);              </span><br><span class="line">        <span class="built_in">dfs</span>(n - <span class="number">1</span>, sum + s);                    </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt; i; --j)          </span><br><span class="line">            d[j][<span class="number">0</span>] = d[j - <span class="number">1</span>][<span class="number">0</span>], d[j][<span class="number">1</span>] = d[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        d[i - <span class="number">1</span>][<span class="number">0</span>] = a, d[i - <span class="number">1</span>][<span class="number">1</span>] = b;        </span><br><span class="line">        d[i][<span class="number">0</span>] = x, d[i][<span class="number">1</span>] = y;                </span><br><span class="line">    &#125;                                        </span><br><span class="line">&#125;                                        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;                             </span><br><span class="line">    cin &gt;&gt; n;                                </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)              </span><br><span class="line">        cin &gt;&gt; d[i][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;++i)</span><br><span class="line">        cin &gt;&gt; d[i][<span class="number">1</span>];</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(n, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设输入的 <em>n</em> 是不超过 50 的正整数，<code>d[i][0]</code>、<code>d[i][1]</code> 都是不超过 10000 的正整数，完成下面的判断题和单选题：</p><p>判断题</p><p>28、若输入 <em>n</em> 为 0，此程序可能会死循环或发生运行错误。（ ）</p><p>29、若输入 <em>n</em> 为 20，接下来的输入全为 0，则输出为 0。（ ）</p><p>30、输出的数一定不小于输入的 <code>d[i][0]</code> 和 <code>d[i][1]</code> 的任意一个。（ ）</p><p>单选题</p><p>31、若输入的 <em>n</em> 为 20，接下来的输入是 20 个 9 和 20 个 0，则输出为（ ）。</p><p>A. 1890</p><p>B. 1881</p><p>C. 1908</p><p>D. 1917</p><p>32、若输入的 <em>n</em> 为 30，接下来的输入是 30 个 0 和 30 个 5，则输出为（ ）。</p><p>A. 2000</p><p>B. 2010</p><p>C. 2030</p><p>D. 2020</p><p>33、若输入的 <em>n</em> 为 15，接下来的输入是 15 到 1，以及 15 到 1，则输出为（ ）。</p><p>A. 2440</p><p>B. 2220</p><p>C. 2240</p><p>D. 2420</p><hr><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1><h2 id="3-1-质因数分解"><a href="#3-1-质因数分解" class="headerlink" title="3.1 质因数分解"></a>3.1 质因数分解</h2><p>给出正整数 <em>n</em>，请输出将 <em>n</em> 质因数分解的结果，结果从小到大输出。</p><p>例如：输入 <em>n</em>&#x3D;120，程序应该输出 <code>2 2 2 3 5</code>，表示：120 &#x3D; 2 × 2 × 2 × 3 × 5。输入保证 2 ≤ <em>n</em> ≤ $10^9$。</p><p>提示：先从小到大枚举变量 <em>i</em>，然后用 <em>i</em> 不停试除 <em>n</em> 来寻找所有的质因子。</p><p>试补全程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i = ①; ② &lt;=n; i ++)&#123;</span><br><span class="line">        ③&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            n = n / i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(④)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ⑤);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>34、①处应填（ ）</p><p>A. <code>1</code></p><p>B. <code>n-1</code></p><p>C. <code>2</code></p><p>D. <code>0</code></p><blockquote><p>选C。</p></blockquote><p>35、②处应填（ ）</p><p>A. <code>n/i</code></p><p>B. <code>n/(i*i)</code></p><p>C. <code>i*i</code></p><p>D. <code>i*i*i</code></p><blockquote><p>选C。</p></blockquote><p>36、③处应填（ )</p><p>A. <code>if(n%i == 0)</code></p><p>B. <code>if(i*i &lt;= n)</code></p><p>C. <code>while(n%i == 0)</code></p><p>D. <code>while(i*i &lt;= n)</code></p><blockquote><p>选C。</p></blockquote><p>37、④处应填（ ）</p><p>A. <code>n &gt; 1</code></p><p>B. <code>n &lt;= 1</code></p><p>C. <code>i &lt; n / i</code></p><p>D. <code>i + i &lt;= n</code></p><blockquote><p>选A。</p></blockquote><p>38、⑤处应填（ )</p><p>A. <code>2</code></p><p>B. <code>n/i</code></p><p>C. <code>n</code></p><p>D. <code>i</code></p><blockquote><p>选C。</p></blockquote><h2 id="3-2-最小区间覆盖"><a href="#3-2-最小区间覆盖" class="headerlink" title="3.2 最小区间覆盖"></a>3.2 最小区间覆盖</h2><p>给出 <em>n</em> 个区间，第 <em>i</em> 个区间的左右端点是 $[a_i, b_i]$。现在要在这些区间中选出若干个，使得区间 $[0, m]$ 被所选区间的并覆盖（即每一个 0 ≤ <em>i</em> ≤ <em>m</em> 都在某个所选的区间中）。保证答案存在，求所选区间个数的最小值。</p><p>输入第一行包含两个整数 <em>n</em> 和 <em>m</em> （1 ≤ <em>n</em> ≤ 5000, 1 ≤ <em>m</em> ≤ $10^9$）</p><p>接下来 <em>n</em> 行，每行两个整数 $a_i, b_i$ （0 ≤ $a_i, b_i$ ≤ <em>m</em>）。</p><p>提示：使用贪心法解决这个问题。先用 <em>O</em>($n^2$) 的时间复杂度排序，然后贪心选择这些区间。</p><p>试补全程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">5000</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment</span> &#123; <span class="type">int</span> a, b; &#125; A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span> <span class="comment">// 排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (①)</span><br><span class="line">            &#123;</span><br><span class="line">                segment t = A[j];</span><br><span class="line">                ②</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; A[i].a &gt;&gt; A[i]・b;</span><br><span class="line">    <span class="built_in">sort</span>();</span><br><span class="line">    <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (③)</span><br><span class="line">            A[p++] = A[i];</span><br><span class="line">    n = p;</span><br><span class="line">    <span class="type">int</span> ans =<span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> q = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (④)</span><br><span class="line">            q++;</span><br><span class="line">        ⑤;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>39、①处应填（ ）</p><p>A. <code>A[j].b &gt; A[j-1].b</code><br> B. <code>A[j].a &lt; A[j-1].a</code><br> C. <code>A[j].a &gt; A[j-1].a</code><br> D. <code>A[j].b &lt; A[j-1].b</code></p><blockquote><p>选B。</p></blockquote><p>40、②处应填（ ）</p><p>A. <code>A[j+1] = A[j]; A[j] = t;</code></p><p>B. <code>A[j-1] = A[j]; A[j] = t;</code></p><p>C. <code>A[j] = A[j+1]; A[j+1] = t;</code></p><p>D. <code>A[j] = A[j-1]; A[j-1] = t;</code></p><blockquote><p>选D。</p></blockquote><p>41、③处应填（ ）</p><p>A. <code>A[i].b &gt; A[p-1].b</code></p><p>B. <code>A[i].b &lt; A[i-1].b</code></p><p>C. <code>A[i].b &gt; A[i-1].b</code></p><p>D. <code>A[i].b &lt; A[p-1].b</code></p><blockquote><p>选A。</p></blockquote><p>42、④处应填（ ）</p><p>A. <code>q+1 &lt; n &amp;&amp; A[q+1].a &lt;= r</code></p><p>B. <code>q+1 &lt; n &amp;&amp; A[q+1].b &lt;= r</code></p><p>C. <code>q &lt; n &amp;&amp; A[q].a &lt;= r</code></p><p>D. <code>q &lt; n &amp;&amp; A[q].b &lt;= r</code></p><blockquote><p>选A。</p></blockquote><p>43、⑤处应填（ ）</p><p>A. <code>r = max(r, A[q+1].b)</code></p><p>B. <code>r = max(r, A[q].b)</code></p><p>C. <code>r = max(r, A[q+1].a)</code></p><p>D. <code>q++</code></p><blockquote><p>选B。</p></blockquote><hr><p>参考</p><ul><li><a href="https://ti.luogu.com.cn/problemset/1034">1034 - CSP 2020 入门级第一轮 - 洛谷有题 (luogu.com.cn)</a></li><li><a href="https://www.bilibili.com/video/BV1gW4y1h7SG/?spm_id_from=333.788&vd_source=49e30194f6d5798a1f90d69dad9c0460">2020年CSP-J入门级初赛（第一轮）真题讲解_哔哩哔哩_bilibili</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2020CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX常用公式</title>
      <link href="/2023/08/12/LaTeX%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/08/12/LaTeX%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>输入 <code>\\</code> ，用<code>&amp;</code> 可以对齐每行。<br>$$<br>A &#x3D; 10 + 1 \<br> &#x3D; 5 + 5 + 1 \<br>  &#x3D; 5 + 5 + 1 \<br>&amp; &#x3D; 5 + 5 + 1 \<br>&amp; &#x3D; 5 + 5 + 1 \<br>$$</p><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>_表示下标、^表示上标，但上下标内容不止一个字符时，需用大括号括起来。单引号’表示求导</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">a<span class="built_in">^</span>&#123;-1&#125;<span class="built_in">_</span>&#123;-2&#125; + b<span class="built_in">^</span>2<span class="built_in">_</span>1 = x&#x27; + x&#x27;&#x27;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>a^{-1}_{-2} + b^2_1 &#x3D; x’ + x’’<br>$$</p><h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><p>\frac表示分式</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;10&#125;&#123;20 + 3&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\frac{10}{20 + 3}<br>$$</p><h2 id="积分、极限、求和、乘积"><a href="#积分、极限、求和、乘积" class="headerlink" title="积分、极限、求和、乘积"></a>积分、极限、求和、乘积</h2><p>命令：\int表示积分，\infty无穷大，\lim表示极限， \sum表示求和，\prod表示乘积，^、_表示上、下限</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;1&#125;<span class="built_in">^</span>&#123;10&#125; x<span class="keyword">\mathrm</span>&#123;d&#125;x </span><br><span class="line">+ <span class="keyword">\lim</span><span class="built_in">_</span>&#123;x <span class="keyword">\to</span> <span class="keyword">\infty</span>&#125;x<span class="built_in">^</span>&#123;10&#125; </span><br><span class="line">+ <span class="keyword">\sum</span><span class="built_in">_</span>&#123;n=1&#125;<span class="built_in">^</span>&#123;30&#125; </span><br><span class="line">+ <span class="keyword">\prod</span><span class="built_in">_</span>&#123;i=2&#125;<span class="built_in">^</span>&#123;30&#125;y<span class="built_in">_</span>i</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>$$<br>\int_{1}^{10} x\mathrm{d}x + \lim_{x \to \infty}x^{10} + \sum_{n&#x3D;1}^{30} + \prod_{i&#x3D;2}^{30}y_i<br>$$</p><h2 id="向下、上取整"><a href="#向下、上取整" class="headerlink" title="向下、上取整"></a>向下、上取整</h2><p>命令：<code>\lfloor</code>表示左边下取整括号，<code> \rfloor</code>表示右边下取整括号，<code>\lceil</code>表示左边上取整括号，<code>\rceil</code>表示右边上取整括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$\lfloor x \rfloor$</span><br><span class="line">$\lceil x \rceil$</span><br></pre></td></tr></table></figure><p>$\lfloor x \rfloor$</p><p>$\lceil x \rceil$</p><p>参考文章</p><ul><li><a href="https://zhuanlan.zhihu.com/p/110756681">LaTeX 公式篇 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/qq_36825778/article/details/102584912">Latex——向下取整，向下取整_latex 向下取整_G5Lorenzo的博客-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年CSP-J1真题</title>
      <link href="/2023/08/12/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/"/>
      <url>/2023/08/12/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单向选择题"><a href="#一、单向选择题" class="headerlink" title="一、单向选择题"></a>一、单向选择题</h1><p>第 1 题<br>以下不属于面向对象程序设计语言的是（ ）。</p><p>A. C++</p><p>B. Python</p><p>C. Java</p><p>D. C</p><blockquote><p>选D。C语言没有对象，是面向过程语言。</p></blockquote><p>第 2 题<br>以下奖项与计算机领域最相关的是（ ）。</p><p>A. 奥斯卡奖</p><p>B. 图灵奖</p><p>C. 诺贝尔奖</p><p>D. 普利策奖</p><blockquote><p>选B。</p></blockquote><p>第 3 题<br>目前主流的计算机储存数据最终都是转换成（ ）数据进行储存。</p><p>A. 二进制</p><p>B. 十进制</p><p>C. 八进制</p><p>D. 十六进制</p><blockquote><p>选A。</p></blockquote><p>第 4 题<br>以比较作为基本运算，在 N 个数中找出最大数，最坏情况下所需要的最少的比较次数为 （ ）。</p><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812160644484.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812160644484.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812160644484"></p><blockquote><p>选C。第一个数跟第二个数比，大的跟第三个数比，一共比 N - 1 次。</p></blockquote><hr><p>第 5 题<br>对于入栈顺序为 a,b,c,d,e 的序列，下列（ ）不是合法的出栈序列。</p><p> A. a,b,c,d,e</p><p>B. e,d,c,b,a</p><p>C. b,a,c,d,e</p><p>D. c,d,a,e,b</p><blockquote><p>选D。</p></blockquote><div class="mermaid">flowchart LR AA(&quot;出栈顺序      ---      栈&quot;) --&gt;       A(&quot;      ---      c        b        a&quot;) --&gt;|c出栈| B(&quot;c        ---        b        a&quot;) --&gt;|d入栈| C(&quot;c        ---        d        b        a&quot;) --&gt;|d出栈| D(&quot;c d        ---        b        a&quot;) --&gt; |a出栈| E(a不在栈顶,错误)</div><p>第 6 题<br>对于有 n 个顶点、m 条边的无向连通图 (m&gt;n)，需要删掉（ ）条边才能使其成为一棵树。</p><p> A. n − 1</p><p>B. m − n</p><p>C. m − n − 1</p><p>D. m − n + 1</p><blockquote><p>选D。树有n - 1条边，把这个图变成树，即变成n - 1条边，需要删掉 <code>m - (n - 1) = m - n + 1</code> 条边。</p></blockquote><p>第 7 题<br>二进制数101.11 对应的十进制数是（ ）。</p><p> A. 6.5</p><p>B. 5.5</p><p>C. 5.75</p><p>D. 5.25</p><blockquote><p>选C。</p></blockquote><p>$$<br>1<em>2^2+1</em>2^0+1<em>2^{-1}+1</em>2^{-2} &#x3D; 5.75<br>$$</p><p>第 8 题</p><p>如果一棵二叉树只有根结点，那么这棵二叉树高度为 1。请问高度为 5 的完全二叉树有 （ ）种不同的形态？</p><p>A. 16</p><p>B. 15</p><p>C. 17</p><p>D. 32</p><blockquote><p>A。高度为5，有<code>2^5 = 16</code>个节点，最后一层可以有0~16个节点，有16种形态。</p></blockquote><p>第 9 题<br>表达式 <code>a*(b+c)*d</code> 的后缀表达式为( )，其中<code>*</code>和 <code>+</code>是运算符。</p><p> A. <code>**a+bcd</code></p><p>B.<code> abc+*d*</code></p><p>C. <code>abc+d**</code></p><p>D. <code>*a*+bcd</code></p><blockquote><p>选B。</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(b + c) 变成 (b c +) </span><br><span class="line">a * (b c +) 变成 a (b c +) *</span><br><span class="line">a (b c +) * * d 变成 a (b c +) * d *</span><br><span class="line">去掉括号 a b c + * d *</span><br></pre></td></tr></table></figure><p>第 10 题<br>6 个人，两个人组一队，总共组成三队，不区分队伍的编号。不同的组队情况有（ ）种。</p><p>A. 10</p><p>B. 15</p><p>C. 30</p><p>D. 20</p><blockquote><p>选B。6取2，剩下4取2，剩下2取2，队伍没有顺序，要除以三个队伍的排列数。</p></blockquote><p>$$<br>C_6^2 * C^2_4 * C^2_2 &#x2F; A_3^3 &#x3D; 15<br>$$</p><p>第 11 题</p><p>在数据压缩编码中的哈夫曼编码方法，在本质上是一种（ ）的策略。</p><p>A. 枚举</p><p>B. 贪心</p><p> C. 递归</p><p> D. 动态规划</p><blockquote><p>选B。在数据压缩编码中的哈夫曼编码方法，是一种贪心算法，它的基本思想是：在编码过程中，优先选择使编码总长度最短的符号。</p></blockquote><p>第 12 题</p><p>由 1,1,2,2,3 这五个数字组成不同的三位数有（ ）种。</p><p>A. 18 </p><p>B. 15</p><p>C. 12</p><p>D. 24</p><blockquote><p>选A。依次枚举：</p><p>1开头：112、113、121、122、123、131、132</p><p>2开头：211、212、213、221、223、231、232</p><p>3开头：311、312、321、322</p></blockquote><p>第 13 题</p><p>考虑如下递归算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">solve</span>(n)  </span><br><span class="line">     <span class="keyword">if</span> n&lt;=<span class="number">1</span> <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> n&gt;=<span class="number">5</span> <span class="keyword">return</span> n*<span class="built_in">solve</span>(n<span class="number">-2</span>)  </span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> n*<span class="built_in">solve</span>(n<span class="number">-1</span>)  </span><br></pre></td></tr></table></figure><p>则调用 <code>solve(7)</code> 得到的返回结果为（ ）。</p><p>A. 105</p><p>B. 840</p><p>C. 210</p><p>D. 420</p><blockquote><p>选C。7 * 5 * 3 * 2 * 1 &#x3D; 210。</p></blockquote><p>第 14 题</p><p>以 <em>a</em> 为起点，对下边的无向图进行深度优先遍历，则 <em>b</em>,<em>c</em>,<em>d</em>,<em>e</em> 四个点中有可能作为最后一个遍历到的点的个数为（ ）。</p><p> <img src="https://ipic.luogu.com.cn/2yir4.png" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/2yir4.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>A. 1</p><p>B. 2</p><p>C. 3</p><p>D. 4</p><blockquote><p>选B。b和e可能为最后一个点。</p></blockquote><p>第 15 题</p><p>有四个人要从 A 点坐一条船过河到 B 点，船一开始在 A 点。该船一次最多可坐两个人。 已知这四个人中每个人独自坐船的过河时间分别为 1,2,4,8，且两个人坐船的过河时间为两人独自过河时间的较大者。则最短（ ）时间可以让四个人都过河到 B 点（包括从 B 点把船开回 A 点的时间）。</p><p>A. 14</p><p>B. 15</p><p>C. 16</p><p>D. 17</p><blockquote><p>选B。</p><p>1 号和 2 号过河，花费 2 分钟。</p><p>1 号回来，花费 1 分钟。</p><p>4 号和 8 号过河，花费 8 分钟。</p><p>2 号回来，花费 2 分钟。</p><p>1 号和 2 号再次过河，花费 2 分钟。</p></blockquote><hr><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><h2 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h2><p><img src="https://ipic.luogu.com.cn/pu88q.jpg" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/pu88q.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><blockquote><p>f函数统计1的个数，负数统计补码中1的个数。如下图（2018年考过该算法）</p><p>g函数返回x的最低位（lowbit）。</p></blockquote><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812173934102.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230812173934102.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812173934102"></p><p>16.输入的 <em>n</em> 等于 1001 时，程序<strong>不会</strong>发生下标越界。（ 错 ）</p><blockquote><p>a的下标0~999，1001越界。</p></blockquote><p>17.输入的 <em>a</em>[<em>i</em>] 必须全为正整数，否则程序将陷入死循环。（ 错 ）</p><blockquote><p>找一个反例即可，如0、-1。</p></blockquote><p>18.当输入为 <code>5 2 11 9 16 10</code> 时，输出为 <code>3 4 3 17 5</code>。（ 错 ）</p><blockquote><p>输出最后一个数错误，为4。</p></blockquote><p>19.当输入为 <code>1 511998</code> 时，输出为 <code>18</code>。（ 对  ）</p><p>20.将源代码中 <code>g</code> 函数的定义（14∼17 行）移到 main 函数的后面，程序可以正常编译运行。（ 错 ）</p><blockquote><p>前面得声明函数g，才能正常运行。</p></blockquote><p>21.当输入为 <code>2 -65536 2147483647</code> 时，输出为（ B ）。</p><p>A. <code>65532 33</code><br>B. <code>65552 32</code><br>C. <code>65535 34</code><br>D. <code>65554 33</code></p><blockquote><p>65536为2^16。1后面16个0，int32位，补码：1后面16个0不变，前面全变成1，有16个1。</p><p>最低位，1后面16个0。</p><p>65536 + 16 &#x3D; 65552。</p></blockquote><blockquote><p>2147483647是2^31-1，有31个1，最低位为1。</p><p>31 + 1 &#x3D; 32。</p></blockquote><h2 id="（2）"><a href="#（2）" class="headerlink" title="（2）"></a>（2）</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rddla3oo.png" class="lazyload placeholder" data-srcset="https://cdn.luogu.com.cn/upload/image_hosting/rddla3oo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>22、输出的第二行一定是由小写字母、大写字母、数字和 ++、 &#x2F;&#x2F;、&#x3D;&#x3D; 构成的字符串。（ 错 ）</p><blockquote><p>输入编码以外的字符，即大小写字母、数字、+、&#x2F;、&#x3D;，输出乱码。</p></blockquote><p>23、可能存在输入不同，但输出的第二行相同的情形。（  正确 ）</p><p>24、输出的第一行为 -1。（ 正确 ）</p><blockquote><p>char 是 signed char，强转int要补符号位。</p><p>0xff –&gt; 0xffffffff，是-1的补码。</p></blockquote><p>25、设输入字符串长度为 <em>n</em>，<code>decode</code> 函数的时间复杂度为（  ）</p><p>A. <em>O</em>(<em>n</em>)</p><p>B. <em>O</em>(<em>n</em>)</p><p>C. <em>O</em>(<em>n</em>log<em>n</em>)</p><p>D. <em>O</em>(<em>n</em>2)</p><blockquote><p>选B。循环n &#x2F; 4次。</p></blockquote><p>26、当输入为 Y3Nx 时，输出的第二行为（）。</p><p>A. <code>csp</code></p><p>B. <code>csq</code></p><p>C. <code>CSP</code></p><p>D. <code>Csp</code></p><blockquote><p>选B。</p></blockquote><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813180142572.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813180142572.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230813180142572"></p><p>27、（3.5 分）当输入为 Y2NmIDIwMjE&#x3D; 时，输出的第二行为（ ）。</p><p>A. <code>ccf2021</code></p><p>B. <code>ccf2022</code></p><p>C. <code>ccf 2021</code></p><p>D. <code>ccf 2022</code></p><blockquote><p>选C。</p></blockquote><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813180359031.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813180359031.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230813180359031"></p><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813180711143.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813180711143.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230813180711143"></p><h2 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h2><p><img src="https://ipic.luogu.com.cn/yzb73.png" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/yzb73.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> <img src="https://ipic.luogu.com.cn/sykbe.png" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/sykbe.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p><strong>假设输入的 <em>x</em> 是不超过 1000 的自然数，完成下面的判断题和单选题：</strong></p><blockquote><p>线性筛质数，<a href="https://oi-wiki.org/math/number-theory/sieve/">筛法 - OI Wiki (oi-wiki.org)</a></p></blockquote><p>28、若输入不为 1，把第 13 行删去<strong>不会</strong>影响输出的结果。（ 正确 ）</p><blockquote><p>循环从2开始。</p></blockquote><p>29、第 25 行的 <code>f[i] / c[i * k]</code>可能存在无法整除而向下取整的情况。 （  错误 ）</p><p>30、在执行完 <code>init()</code> 后，<code>f</code> 数组不是单调递增的，但 <code>g</code> 数组是单调递增的。 （ 错误 ）</p><blockquote><p><code>g[i]</code>是i的约数和，如果是质数，则gl]值会较小。比如<code>g[5] = 1+5=6</code>,而<code>g[4] = 1+2+4=7</code>。</p></blockquote><p>31、<code>init</code> 函数的时间复杂度为（  ）。</p><p><img src="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813181008222.png" class="lazyload placeholder" data-srcset="/../images/2021%E5%B9%B4CSP-J1%E7%9C%9F%E9%A2%98/image-20230813181008222.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230813181008222"></p><blockquote><p>选A。线性筛，复杂度为O(n)。</p></blockquote><p>32、在执行完 <code>init()</code> 后，f*[1],<em>f</em>[2],<em>f</em>[3]…f[100] 中有（  ）个等于 2。</p><p>A. 23</p><p>B. 24</p><p>C. 25</p><p>D. 26</p><blockquote><p>选C。约数只有1和自己，即质数，100以内的质数有25个。</p></blockquote><p>33、（4 分） 当输入为 1000 时，输出为（）。</p><p>A. <code>15 1340</code></p><p>B. <code>15 2340</code></p><p>C. <code>16 2340</code></p><p>D. <code>16 1340</code></p><p>$$<br>1000 &#x3D; 2^3 * 5^3<br>$$</p><blockquote><p> 选C。<code>f[1000] = (1+3)*(1+3)=16</code></p><p>&#96;&#96;g[1000] &#x3D; (1+2+4+8)<em>(1+5+25+125)&#x3D;15</em>156&#x3D;2340&#96;</p></blockquote><hr><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1><h2 id="（1）Josephus-问题"><a href="#（1）Josephus-问题" class="headerlink" title="（1）Josephus 问题"></a>（1）Josephus 问题</h2><p>有 <em>n</em> 个人围成一个圈，依次标号 0 至 <em>n</em>−1。从 00 号开始，依次 0,1,0,1,…交替报数，报到 1 的人会离开，直至圈中只剩下一个人。求最后剩下人的编号。</p><p>试补全模拟程序。 <img src="https://ipic.luogu.com.cn/k4gdx.png" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/k4gdx.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"></p><p>34、①处应填（ ）<br>A.<code>i &lt; n</code><br>B.<code>c &lt; n</code><br>C.<code>i &lt; n- 1</code><br>D.<code>c &lt; n-1</code></p><blockquote><p>选D。变量c表示离开的人数，假设n为3，c&#x3D;2时就停止，故选<code>c &lt; n - 1</code></p></blockquote><p>35、②处应填（ ）<br>A.<code>i % 2 == 0</code><br>B.<code>i % 2 == 1</code><br>C.<code>p</code><br>D.<code>!p</code></p><blockquote><p>选C。变量p表示报数，报到1就离开，F[i]赋值为1。</p></blockquote><p>36、③处应填（ ）<br>A.<code>i++</code><br>B.<code>i = (i + 1) % n</code><br>C.<code>c++</code><br>D.<code>p ^= 1</code></p><blockquote><p>选C。报到1，离开的人数+1。</p></blockquote><p>37、④处应填（ ）<br>A.<code>i++</code><br>B.<code>i = (i + 1) % n</code><br>C.<code>c++</code><br>D.<code>p ^= 1</code></p><blockquote><p>选D。异或，下一个人报数 从0变1 或 从1变0。如果第i人离开了，报数p不变，故在<code>if(F[i] == 0)</code>内。</p></blockquote><p>38、⑤处应填（ ）<br>A.<code>i++</code><br>B.<code>i = (i + 1) % n</code><br>C.<code>c++</code><br>D.<code>p ^= 1</code></p><blockquote><p>选B。<code>if(F[i] == 0)</code>猜出i为下标。一圈数完后，从第一个人开始，所以要<code>% n</code>。</p></blockquote><hr><h2 id="（2）矩形计数"><a href="#（2）矩形计数" class="headerlink" title="（2）矩形计数"></a>（2）矩形计数</h2><p>平面上有 <em>n</em> 个关键点，求有多少个四条边都和 <em>x</em> 轴或者 <em>y</em> 轴平行的矩形，满足四个顶点都是关键点。给出的关键点可能有重复，但完全重合的矩形只计一 次。</p><p> <img src="https://ipic.luogu.com.cn/v7s04.webp" class="lazyload placeholder" data-srcset="https://ipic.luogu.com.cn/v7s04.webp" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img"> </p><p>试补全枚举算法。</p><p>39、①处应填 ( )<br>A. <code>a.x != b.x ? a.x &lt; b.x : a.id &lt; b.id</code><br>B. <code>a.x != b.x ? a.x &lt; b.x : a.y &lt; b.y</code><br>C. <code>equals(a, b) ? a.id &lt; b.id : a.x &lt; b.x</code><br>D. <code>equals(a, b) ? a.id &lt; b.id : (a.x != b.x ? a.x &lt; b.x : a.y &lt; b.y)</code></p><blockquote><p>选B。两点比较大小。</p></blockquote><p>40、②处应填 ( )<br>A. <code>i == 0 || cmp(A[i], A[i - 1])</code><br>B. <code>t == 0 || equals(A[i], A[t - 1])</code><br>C. <code>i == 0 || !cmp(A[i], A[i - 1])</code><br>D. <code>t == 0 || !equals(A[i], A[t - 1])</code></p><blockquote><p>选D。去重，双指针。</p></blockquote><p>41、③处应填 ( )<br>A. <code>b - (b - a) / 2 + 1</code><br>B. <code>a + (b + 1) &gt;&gt; 1</code><br>C. <code>(a + b) &gt;&gt; 1</code><br>D. <code>a + (b - a + 1) / 2</code></p><blockquote><p>选C。二分。</p></blockquote><p>42、④处应填 ( )<br>A. <code>!cmp(A[mid], p)</code><br>B. <code>cmp(A[mid], p)</code><br>C. <code>cmp(p, A[mid])</code><br>D. <code>!cmp(p, A[mid])</code></p><blockquote><p>选B。<code>A[mid] &lt; p</code>，<code>A[mid] &lt;= p</code>错误，故39题不能选D。</p></blockquote><p>43、⑤处应填 ( )<br>A. <code>A[i].x == A[j].x</code><br>B. <code>A[i].id &lt; A[j].id</code><br>C. <code>A[i].x == A[j].x &amp;&amp; A[i].id &lt; A[j].id</code><br>D. <code>A[i].x &lt; A[j].x &amp;&amp; A[i].y &lt; A[j].y</code></p><blockquote><p>选D。</p></blockquote><hr><p>参考网站视频</p><ul><li><a href="https://ti.luogu.com.cn/problemset/1036">1036 - CSP 2021 入门级第一轮 - 洛谷有题 (luogu.com.cn)</a></li><li><a href="https://www.bilibili.com/video/BV1tg411k7YH/?spm_id_from=333.788&vd_source=49e30194f6d5798a1f90d69dad9c0460">2021年CSP-J入门级初赛(第一轮)真题讲解_哔哩哔哩_bilibili</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章 计算机网络概述</title>
      <link href="/2023/08/12/%E7%AC%AC1%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/08/12/%E7%AC%AC1%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是Internet"><a href="#一、什么是Internet" class="headerlink" title="一、什么是Internet ?"></a>一、什么是Internet ?</h1><p>通俗点，就是一堆网络通过网络互联设备（路由器）连在一起。</p><p>从具体构成角度看：</p><ul><li>节点<ul><li>主机及其上运行的应用程序</li><li>路由器、交换机等网络交换设备</li></ul></li><li>边：通信链路<ul><li>接入网链路：主机连接到互联网的链 路</li><li>主干链路：路由器间的链路</li></ul></li><li>协议：控制发送、接收信息<ul><li>如TCP、IP、HTTP、FTP、PPP</li></ul></li><li>Internet：网络的网络<ul><li>松散的层次结构，互连的ISP</li></ul></li></ul><p>从服务角度看：</p><ul><li>使用通信设施进行通信的<strong>分布式应用</strong><ul><li>Web、VoIP、email、分布式游戏、电子商务、社交网络</li></ul></li><li>通信基础设施为<strong>apps</strong>提供编程接口(通信服务）<ul><li>将发送和接收数据的apps与互联网连接起来</li><li>为app应用提供服务选择，类似于邮政服务：<ul><li>无连接不可靠服务</li><li>面向连接的可靠服务</li></ul></li></ul></li></ul><hr><h1 id="二、什么是协议？"><a href="#二、什么是协议？" class="headerlink" title="二、什么是协议？"></a>二、什么是协议？</h1><p>支撑互联网工作的<strong>标准</strong>。</p><p>协议：对等层实体在通信过程中应该遵守的规则和集合。</p><p>网络协议： </p><ul><li>类似人类协议</li><li>机器之间的协议而非人与人之间的协议</li><li>Internet 中所有的通信行为都受协议制约</li></ul><blockquote><p>协议定义了在两个或多个通信实体之间交换的<strong>报文格式</strong>和<strong>次序</strong>，以及在报文传输和&#x2F;或接收或其他事件方面所采取的<strong>动作</strong></p></blockquote><hr><h1 id="三、网络结构的三个部分"><a href="#三、网络结构的三个部分" class="headerlink" title="三、网络结构的三个部分"></a>三、网络结构的三个部分</h1><h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><ul><li>主机</li><li>应用程序（客户端和服务器）</li></ul><p>结构</p><ul><li>端系统(主机）：<ul><li>运行应用程序</li><li>如Web、email</li><li>在“网络的边缘”</li></ul></li><li>客户&#x2F;服务器模式（C&#x2F;S）<ul><li>客户端向服务器请求、接收服务</li><li>如Web浏览器&#x2F;服务器；email客户端&#x2F;服务器</li></ul></li><li>对等（peer-peer）模式<ul><li>很少(甚至没有）专门的服务器</li><li>如 Gnutella、KaZaA、Emule</li></ul></li></ul><hr><h3 id="采用网络设施的面向连接服务"><a href="#采用网络设施的面向连接服务" class="headerlink" title="采用网络设施的面向连接服务"></a>采用网络设施的面向连接服务</h3><p>目标:在端系统之间传输数据</p><ul><li>握手：在数据传输之前做好准备<ul><li>人类协议中：你好、你好</li><li>两个通信主机之间为<strong>连接</strong>建立状态</li></ul></li><li>TCP-传输控制协议(Transmission Control Protocol )<ul><li>Internet上面向连接的服务</li></ul></li></ul><p>TCP 服务 RFC793</p><ul><li>可靠地、按顺序地传送数据<ul><li>确认和重传</li></ul></li><li>流量控制<ul><li>发送方不会淹没接收方</li></ul></li><li>拥塞控制<ul><li>当网络拥塞时，发送方降低发送速率</li></ul></li></ul><h3 id="采用基础设施的无连接服务"><a href="#采用基础设施的无连接服务" class="headerlink" title="采用基础设施的无连接服务"></a>采用基础设施的无连接服务</h3><p>目标:在端系统之间传输数据</p><ul><li>无连接服务</li><li>UDP-用户数据报协议(User Datagram Protocol)RFC 768:<ul><li>无连接</li><li>不可靠数据传输</li><li>无流量控制</li><li>无拥塞控制</li></ul></li></ul><hr><p>使用TCP的应用：</p><ul><li>HTTP(Web),FTP(文件传送),Telnet(远程登录），SMTP (email)</li></ul><p>使用UDP的应用：</p><ul><li>流媒体、远程会议、DNS、Internet电话</li></ul><hr><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><ul><li>网络核心：路由器的网状网络</li><li>基本问题：数据怎样通过网络进行输？<ul><li><strong>电路交换</strong>：为每个呼叫预留一条专有电路：如电话网</li><li><strong>分组交换</strong>：<ul><li>将要传送的数据分成一个个单位：分组</li><li>将分组从一个路由器传到相邻路由器(<strong>hop</strong>），一段段最终从源端传到目标端</li><li>每段：采用链路的最大传输能力(带宽）</li></ul></li></ul></li></ul><p>网络分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">通信网络 --&gt; 电路交换网络 --&gt; FDM &amp; TDM</span><br><span class="line">通信网络 --&gt; 分组交换网络 --&gt; 虚电路网络 &amp; 数据包网络</span><br></pre></td></tr></table></figure><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p> 端到端的资源被分配给从源端到目标端的呼叫 “call”：</p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812112859334.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812112859334.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812112859334"></p><ul><li><p>图中，每段链路有4条线路： </p><ul><li>该呼叫采用了上面链路的第2个线路，右边链路的第1个线路（piece）</li></ul></li><li><p>独享资源：不同享</p><ul><li>每个呼叫一旦建立起来就能够保证性能</li></ul></li><li><p>如果呼叫没有数据发送，被分配的资源就会被浪费 (no sharing)</p></li><li><p>通常被传统电话网络采用</p></li></ul><p>为呼叫预留端-端资源</p><ul><li>链路带宽、交换能力</li><li>专用资源：不共享</li><li>保证性能</li><li>要求建立呼叫连接</li></ul><p>网络资源（如带宽）被分成片</p><ul><li>为呼叫分配<strong>片</strong></li><li>如果某个呼叫没有数据，则其资源片处于<strong>空闲状态</strong>（不共享）</li><li>将带宽分成片<ul><li>频分(Frequencydivision multiplexing) </li><li>时分(Time-division multiplexing) </li><li>波分(Wave-divis）</li><li>码分(CDM)</li></ul></li></ul><p>计算举例</p><ul><li>在一个电路交换网络上，从主机A到主机B发送一个640,000比特的文件需要多长时间？ <ul><li>所有的链路速率为1.536 Mbps </li><li>每条链路使用时隙数为24的TDM</li><li>建立端-端的电路需500 ms</li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每条链路的速率（一个时间片）：1.536Mbps/24 = 64kbps</span><br><span class="line">传输时间：640kb/64kps = 10s</span><br><span class="line">共用时间：传输时间+建立链路时间=10s + 500ms = 10.5s</span><br></pre></td></tr></table></figure><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812114957016.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812114957016.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812114957016"></p><p>以<strong>分组</strong>为单位存储-转发方式</p><ul><li>网络带宽资源不再分分为一个个片，传输时使用全部带宽</li><li>主机之间传输的数据被分为一个个分组</li></ul><p><strong>资源共享</strong>，按需使用：</p><ul><li>存储-转发：分组每次移动一跳（ hop ） </li><li>在转发之前，节点必须收到整个分组 <ul><li>延迟比线路交换要大 </li><li>排队时间</li></ul></li></ul><p>存储-转发</p><ul><li>被传输到下一个链路之前，整个分组必须到达路由器：<strong>存储-转发</strong></li><li>在一个速率为R bps的链路，一个长度为L bits 的分组的存储转发延时： L&#x2F;R s</li></ul><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812121522155.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812121522155.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230812121522155"></p><p>排队和延迟： </p><ul><li>如果到达速率 &gt; 链路的输出速率: <ul><li>分组将会排队，等待传输 </li><li>如果路由器的缓存用完了，分组将会被抛弃</li></ul></li></ul><p>关键功能</p><ul><li><strong>路由</strong>: 决定分组采用的源到 目标的路径 <ul><li>路由算法</li></ul></li><li><strong>转发</strong>: 将分组从路由器的输 入链路转移到输出链路</li></ul><p>统计多路复用</p><h3 id="分组交换-vs-电路交换"><a href="#分组交换-vs-电路交换" class="headerlink" title="分组交换 vs. 电路交换"></a>分组交换 vs. 电路交换</h3><p>同样的网络资源，分组交换允许更多用户使用网络！</p><p>1 Mb&#x2F;s 链路，每个用户活动时100 kb&#x2F;s，只有10% 的时间是活动的。 </p><ul><li>电路交换： 最多10 用户。$ \dfrac{1Mb&#x2F;s}{100kb&#x2F;s} $</li></ul><p>$$<br>每个用户分配100kb&#x2F;s，最多有\dfrac{1Mb&#x2F;s}{100kb&#x2F;s} &#x3D; 10 个用户<br>$$</p><ul><li>分组交换：</li></ul><p>$$<br>35 用户时 ，&gt;&#x3D;10个用户活动的概率为 1 - \sum_{n&#x3D;0}^{9} C^{35}_n P^n(1-P)^{35-n} &#x3D; 0.0004<br>$$</p><p>分组交换是“突发数据的胜利者？”</p><ul><li><p>适合于对突发式数据传输 </p><ul><li><p>资源共享 </p></li><li><p>简单，不必建立呼叫</p></li></ul></li><li><p>过度使用会造成网络拥塞：分组延时和丢失 </p><ul><li>对可靠地数据传输需要协议来约束：拥塞控制</li></ul></li><li><p>Q: 怎样提供类似电路交换的服务？ </p><ul><li>保证音频&#x2F;视频应用需要的带宽 </li><li>一个仍未解决的问题(chapter 7)</li></ul></li></ul><p>分组交换网络：存储-转发</p><p> 分组交换: 分组的存储转发一段一段从源端传到目标端 ，按照有无网络层的连接，分成： </p><ol><li><p><strong>数据报</strong>网络： (datagram)</p><ul><li>分组的目标地址决定下一跳 </li><li>在不同的阶段，路由可以改变 </li><li>类似：送快递、寄信（有目标地址，路由就是快递站、邮局）</li><li>工作原理<ul><li>在通信之前,无须建立起一个连接,有数据就传输 </li><li>每一个分组都独立路由(路径不一样,可能会失序) </li><li>路由器根据分组的目标地址进行路由</li></ul></li></ul><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812211759473.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812211759473.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="数据包网络"></p></li><li><p><strong>虚电路</strong>网络： (virtual circuit)</p><ul><li>每个分组都带标签（虚电路标识 VC ID），标签决定下一跳 </li><li>在<strong>呼叫建立</strong>时决定路径，在整个呼叫中路径保持不变 </li><li>路由器维持<strong>每个呼叫的状态信息</strong> </li><li>类似：打电话（建立连接后，通信）</li><li>X.25 和ATM</li></ul></li></ol><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812212123051.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230812212123051.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="虚电路"></p><p>虚电路是<strong>有连接</strong>的，连接<strong>不仅</strong>体现在源主机和目标主机上，还体现在<strong>中间经过的所有节点</strong>上。</p><p>TCP是<strong>面向连接</strong>，连接<strong>仅</strong>体现在<strong>源主机和目标主机上</strong>，中间的路由器<strong>不维护</strong>通信状态。</p><hr><h2 id="接入网、物理媒体"><a href="#接入网、物理媒体" class="headerlink" title="接入网、物理媒体"></a>接入网、物理媒体</h2><ul><li>有线或无线通信链路</li></ul><h3 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h3><p>住宅接入：modem</p><ul><li>将上网数据<strong>调制</strong>加载音频信号上，在电话线上传输，在局端将其中的数据<strong>解调</strong>出来；反之亦然 <ul><li>调频 </li><li>调幅 </li><li>调相位 </li><li>综合调制</li></ul></li><li>拨号<strong>调制解调器</strong> <ul><li><strong>56Kbps</strong> 的速率直接接入路由器(通常更低) </li><li>不能同时上网和打电话：不能总是在线</li></ul></li></ul><p>接入网: digital subscriber line (DSL) </p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814110144217.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814110144217.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="接入网"></p><ul><li>采用<strong>现存的</strong>到交换局DSLAM的电话线 <ul><li>DSL线路上的数据被传到互联网 </li><li>DSL线路上的语音被传到电话网</li></ul></li><li>&lt; 2.5 Mbps上行传输速率(typically &lt; 1 Mbps) </li><li>&lt; 24 Mbps下行传输速率(typically &lt; 10 Mbps)</li><li>特点<ul><li>打电话时，可以上网</li><li>上行和下行带宽<strong>独享</strong></li></ul></li></ul><p>线缆网络</p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814111009767.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814111009767.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814111009767"></p><ul><li><p>有线电视信号线缆双向改造 </p></li><li><p>FDM: 在不同频段传输不同信道的数据， 数字电视和上网数据（上下行）</p></li><li><p>HFC: hybrid fiber coax </p><ul><li>非对称: 最高30Mbps的下行传输速率, 2 Mbps 上行传输 速率</li></ul></li><li><p>线缆和光纤网络将个家庭用户接入到 ISP 路由器 </p></li><li><p>各用户<strong>共享</strong>到线缆头端的接入网络 </p><ul><li>与DSL不同, DSL每个用户一个专用线路到CO（central  office）、</li></ul></li><li><p>特点</p><ul><li>上行带宽<strong>共享</strong></li></ul></li></ul><p>电缆模式</p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814111805679.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814111805679.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814111805679"></p><p>家庭网络</p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814112016161.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814112016161.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814112016161"></p><p>企业接入网络(Ethernet)</p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814112305955.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814112305955.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814112305955"></p><ul><li>经常被企业或者大学等机构采用 <ul><li>10 Mbps, 100Mbps, 1Gbps, 10Gbps传输率 </li><li>现在，端系统经常直接接到以太网络交换机上</li></ul></li></ul><p>无线接入网络</p><ul><li>各无线端系统共享无线接入网络（端系统到无线路由器） <ul><li>通过基站或者叫接入点</li></ul></li></ul><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814112718387.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814112718387.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814112718387"></p><h3 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a>物理媒体</h3><ul><li><strong>Bit</strong>: 在发送-接收对间传播 </li><li>物理链路：连接每个发送-接 收对之间的物理媒体 </li><li>导引型媒体: <ul><li>信号沿着固体媒介被导引：同轴电缆、光纤、 双绞线</li></ul></li><li>非导引型媒体： <ul><li>开放的空间传输电磁波或者光信号，在电磁或者光信号中承 载数字数据</li></ul></li></ul><p>双绞线 (TP) </p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814114355509.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814114355509.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814114355509"></p><ul><li>两根绝缘铜导线拧合 <ul><li>5类：100Mbps 以太网 ，Gbps 千兆位以太网 </li><li>6类：10Gbps万兆以太网</li></ul></li></ul><p>同轴电缆： </p><p><img src="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814115317990.png" class="lazyload placeholder" data-srcset="/../images/1-%E4%BB%80%E4%B9%88%E6%98%AFInternet/image-20230814115317990.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230814115317990"></p><ul><li>两根同轴的铜导线 </li><li>双向 </li><li>基带电缆： <ul><li>电缆上一个单个信道 </li><li>Ethernet</li></ul></li><li>宽带电缆： <ul><li>电缆上有多个信道 </li><li>HFC</li></ul></li></ul><p>光纤和光缆： </p><ul><li>光脉冲，每个脉冲表示一个 bit，在玻璃纤维中传输 </li><li>高速： <ul><li>点到点的高速传输（如10  Gps-100Gbps传输速率 ）</li></ul></li><li>低误码率：在两个中继器之 间可以有很长的距离，不受 电磁噪声的干扰 </li><li>安全</li></ul><p>无线链路</p><p>开放空间传输电磁波，携带要传输的数据 </p><ul><li>无需物理“线缆” </li><li>双向 </li><li>传播环境效应： <ul><li>反射 </li><li>吸收 </li><li>干扰</li></ul></li></ul><p>无线链路类型: </p><ul><li>地面微波  e.g. up to 45 Mbps channels </li><li>LAN (e.g., WiFi) <ul><li>11Mbps, 54 Mbps,540Mbps…</li></ul></li><li>wide-area (e.g., 蜂窝) <ul><li>3G cellular: ~ 几Mbps </li><li>4G 10Mbps </li><li>5G 数Gbps</li></ul></li><li>卫星<ul><li>每个信道Kbps 到45Mbps (或者 多个聚集信道) </li><li>270 msec端到端延迟 </li><li>同步静止卫星和低轨卫星</li></ul></li></ul><hr><h1 id="四、Internet-ISP结构"><a href="#四、Internet-ISP结构" class="headerlink" title="四、Internet&#x2F;ISP结构"></a>四、Internet&#x2F;ISP结构</h1><p>互联网络结构：网络的网络 </p><ul><li>端系统通过<strong>接入ISPs</strong> (Internet Service Providers)连接到互联网 <ul><li>住宅，公司和大学的ISPs</li></ul></li><li>接入ISPs相应的必须是互联的 <ul><li>因此任何2个端系统可相互发送分组到对方</li></ul></li><li>导致的“网络的网络”非常复杂 <ul><li>发展和演化是通过<strong>经济的</strong>和<strong>国家的</strong>政策来驱动的</li></ul></li></ul><p>![image-20230814161522462](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230814161522462.png)</p><p>在网络的最中心，一些为数不多的充分连接的大范围网络（分布广、节点有限、 但是之间有着多重连接） </p><ul><li>“tier-1” commercial ISPs (e.g., Level 3, Sprint, AT&amp;T, NTT), 国家或者国际范围的覆盖 </li><li>content provider network (e.g., Google): 将它们的数据中心接入ISP，方便周边用户的访问；通常私有网络之间用专网绕过第一层ISP和区域ISPs</li></ul><h2 id="三层-ISP"><a href="#三层-ISP" class="headerlink" title="三层 ISP"></a>三层 ISP</h2><ul><li><p><strong>中心：第一层ISP</strong>（如UUNet, BBN&#x2F;Genuity, Sprint,  AT&amp;T）<strong>国家&#x2F;国际覆盖</strong>，带宽很宽，速率极高 </p><ul><li><p>直接与其他第一层ISP相连，通过<code>peer</code>或<code>IXP</code>连接</p></li><li><p>与大量的第二层ISP和其他客户网络相连</p></li><li><p>松散的层次模型</p><p>![第一层ISP](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230814162008198.png)</p></li></ul></li><li><p><strong>第二层ISP</strong>: 更小些的 (通常是<strong>区域性</strong>的) ISP </p><ul><li><p>接入一个或多个第一层ISPs，也可能接入其他第二层ISP</p><p>![第二层ISP](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230814162354306.png)</p></li></ul></li><li><p><strong>第三层ISP</strong>与其他本地ISP </p><ul><li><p>接入网 (与端系统最近)</p><p>![第三层ISP](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230814162519920.png)</p></li></ul><p>端系统：一个分组要经过许多网络！</p><p>![image-20230814162801285](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230814162801285.png)</p></li><li><p>很多内容提供商(如：Google, Akamai )可能会部署自己的网络,连接自己的在各地的DC（数据中心），走自己的数据 </p></li><li><p>连接若干local ISP和各级（包括一层）ISP,更加靠近用户</p></li></ul><h2 id="ISP之间的连接"><a href="#ISP之间的连接" class="headerlink" title="ISP之间的连接"></a>ISP之间的连接</h2><ul><li>POP: 高层ISP面向客户网络的接入点，涉及费用结算 <ul><li>如一个低层ISP接入多个高层ISP，多宿（multi home）</li></ul></li><li>对等接入：2个ISP对等互接，不涉及费用结算 </li><li>IXP：多个对等ISP互联互通之处，通常不涉及费用结算 <ul><li>对等接入</li></ul></li><li>ICP自己部署专用网络，同时和各级ISP连接</li></ul><hr><h1 id="五、性能"><a href="#五、性能" class="headerlink" title="五、性能"></a>五、性能</h1><h2 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h2><p>在路由器缓冲区的分组队列 </p><ul><li>分组<strong>到达链路的速率</strong>超过了<strong>链路输出</strong>的能力 </li><li>分组等待排到队头、被传输</li></ul><p>![分组延时和丢失](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230815103859909.png)</p><p>四种分组延时 </p><ol><li><p>节点处理延时： </p><ul><li><p>检查 bit级差错 </p></li><li><p>检查分组首部和决定将分组导向何处</p></li></ul></li><li><p>排队延时 </p><ul><li>输出链路上等待传输的 时间 </li><li>依赖于路由器的拥塞程</li></ul></li><li><p>传输延时: </p><ul><li>R&#x3D;链路带宽(bps) </li><li>L&#x3D;分组长度(bits) </li><li>将分组发送到链路上的 时间&#x3D; L&#x2F;R </li><li>存储转发延时</li></ul></li><li><p>传播延时: </p><ul><li>d &#x3D; 物理链路的长度 </li><li>s &#x3D; 在媒体上的传播速度 (~2x108 m&#x2F;sec) </li><li>传播延时 &#x3D; d&#x2F;s</li></ul></li></ol><p>R&#x3D;链路带宽 (bps) ，L&#x3D;分组长度 (bits) ，a&#x3D;分组到达队列的平均速率 </p><p>**流量强度 &#x3D; **$\frac{L \times a}R$ </p><ul><li>La&#x2F;R ~ 0: 平均排队延时很小 </li><li>La&#x2F;R -&gt; 1: 延时变得很大 </li><li>La&#x2F;R &gt; 1: 比特到达队列的速率超过了从该队 列输出的速率，平均排队延时将趋向无穷大！</li></ul><p>&#x3D;&#x3D;设计系统时流量强度不能大于1！&#x3D;&#x3D;</p><h2 id="分组丢失"><a href="#分组丢失" class="headerlink" title="分组丢失"></a>分组丢失</h2><ul><li><p>链路的队列缓冲区容量有限 </p></li><li><p>当分组到达一个满的队列时，该分组将会丢失 </p></li><li><p>丢失的分组可能会被被前一个节点或源端系统重传，或根本不重传</p></li></ul><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p> 吞吐量: 在源端和目标端之间传输的速率（数 据量&#x2F;单位时间） </p><ul><li><strong>瞬间</strong>吞吐量: 在一个时间点的速率 </li><li><strong>平均</strong>吞吐量: 在一个长时间内平均值</li></ul><p>![吞吐量](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230815115652346.png)</p><p>瓶颈链路：端到端路径上，限制端到端吞吐的链路</p><ul><li><p>其他节点都不传输，一端为$R_s$，另一端为$R_c$，平均吞吐量为min{$R_s$, $R_c$}，瓶颈在小的一端。</p></li><li><p>端到端平均吞吐 &#x3D; min{ $R_1$，$R_2$ , …, $R_n$ }</p></li></ul><p>互联网场景</p><p>![互联网场景](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230815120359975.png)</p><ul><li>链路上的每一段实际可用带宽$R_i$’ &#x3D; ? 端到端吞吐量： min{ $R_i’$ } ?</li><li>每个连接上的端到端吞吐:  min($R_c$ , $R_s$ , $R \div 10$) </li><li>实际上: $R_c$ 或者 $R_s$ 经常是瓶颈</li></ul><hr><h1 id="六、协议层次、服务模型"><a href="#六、协议层次、服务模型" class="headerlink" title="六、协议层次、服务模型"></a>六、协议层次、服务模型</h1><h2 id="协议层次"><a href="#协议层次" class="headerlink" title="协议层次"></a>协议层次</h2><p>网络是一个复杂的系统!  </p><ul><li>网络功能繁杂：数字信号的物理信号承载、点到点、路由、rdt、进 程区分、应用等 </li><li>现实来看，网络的许多构成元素和 设备: <ul><li>主机 </li><li>路由器 </li><li>各种媒体的链路 </li><li>应用 </li><li>协议 </li><li>硬件, 软件</li></ul></li></ul><p><strong>层次化方式</strong>实现复杂网络功能: </p><ul><li>将网络复杂的功能分层功能明确的<strong>层次</strong>，每一层实现了其中一个或一 组<strong>功能</strong>，功能中有其上层可以使用的功能：<strong>服务</strong> </li><li>本层协议实体相互交互执行本层的<strong>协议动作</strong>，目的是实现本层功能， 通过接口为上层提供更好的服务 </li><li>在实现本层协议的时候，直接利用了<strong>下层所提供的服务</strong> </li><li>本层的服务：借助下层服务实现的本层协议实体之间交互带来的新功 能（上层可以利用的）+更下层所提供的服务</li></ul><p>服务和服务访问点 </p><ul><li>服务( Service)：<strong>低层</strong>实体向<strong>上层</strong>实体提供它们之间的<strong>通信</strong>的能力 <ul><li>服务用户(service user) </li><li>服务提供者(service provider )</li></ul></li><li>原语(primitive)：上层使用下层服务的形式，高层使用低层提供的服务，以及低层向高层提供服务都是通过服务访问<strong>原语</strong>来进行<strong>交互</strong>的—形式 </li><li>服务访问点 SAP (Services Access Point) ：上层 使用下层提供的服务通过层间的<strong>接口</strong>—地点； <ul><li>例子:邮箱 </li><li>地址(address)：下层的一个实体支撑着上层的多个实体， SAP有标志不同上层实体的作用 </li><li>可以有不同的实现，队列 </li><li>例子:传输层的SAP: 端口(port)</li></ul></li></ul><p>服务的类型</p><ul><li>面向连接的服务</li><li>面向无连接的服务</li></ul><p>服务和协议 </p><ul><li>服务与协议的区别 <ul><li>服务(Service)：<strong>低层</strong>实体向<strong>上层</strong>实体提供它们之间的通信的能力，是通过原语(primitive)来操作的，<strong>垂直</strong></li><li>协议(protocol) ：<strong>对等层</strong>实体(peer entity)之间在相互通信的过程中，需要遵循的规则的集合，<strong>水平</strong></li></ul></li><li>服务与协议的联系 <ul><li>本层<strong>协议的实现</strong>要靠下层提供的服务来实现 </li><li>本层实体通过协议为上层<strong>提供更高级的服务</strong></li></ul></li></ul><p>数据单元(DU)</p><p>![image-20230816120750303](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230816120750303.png)</p><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><table><thead><tr><th align="center">分层结构</th></tr></thead><tbody><tr><td align="center">应用层</td></tr><tr><td align="center">传输层</td></tr><tr><td align="center">网络层</td></tr><tr><td align="center">链路层</td></tr><tr><td align="center">物理层</td></tr></tbody></table><ul><li>应用层: 网络应用 <ul><li>为人类用户或者其他应用进程提供网络应用服务 </li><li>FTP, SMTP, HTTP,DNS</li></ul></li><li>传输层: 主机之间的数据传输 <ul><li>在网络层提供的端到端通信基础上，细分为进程到进程，将不可靠的通信变成可靠地通信 </li><li>TCP, UDP</li></ul></li><li>网络层: 为数据报从源到目的选择路由 <ul><li>主机主机之间的通信，端到端通信，不可靠 </li><li>IP, 路由协议</li></ul></li><li>链路层: 相邻网络节点间的数据传输 <ul><li>2个相邻2点的通信，点到点通信，可靠或不可靠 </li><li>点对对协议PPP, 802.11(wifi), Ethernet</li></ul></li><li>物理层: 在线路上传送bit</li></ul><p>每一层实现一个特定的功能，上一层借助于下一层提供的服务，通过跟对等层的协议实体，相互交换协议的报文，向上层提供更好的服务。</p><ul><li>物理层把物理介质的<strong>01信号</strong>变成<strong>电磁波</strong>，发送和接收电磁波信号。</li><li>链路层，相邻两点传输以<strong>帧</strong>为单位的数据，实现了了<strong>点到点</strong>的功能。</li><li>网络层在链路层提供的点到点服务的基础上，实现了<strong>源主机</strong>到<strong>目标主机</strong>之间的数据传输，实现了<strong>端到端</strong>的功能。</li><li>传输层加强和细分了网络层的服务，把<strong>主机</strong>之间的传输变成了<strong>进程</strong>之间的传输，解决了网络层<strong>传输不可靠</strong>的问题。</li><li>应用层借助于传输层提供的服务，交换<strong>应用报文</strong>，实现各种各样的网络应用。</li></ul><table><thead><tr><th align="center">ISO&#x2F;OSI 参考模型</th></tr></thead><tbody><tr><td align="center">应用层</td></tr><tr><td align="center">表示层</td></tr><tr><td align="center">会话层</td></tr><tr><td align="center">传输层</td></tr><tr><td align="center">网络层</td></tr><tr><td align="center">链路层</td></tr><tr><td align="center">物理层</td></tr></tbody></table><ul><li>表示层: 允许应用解释传输的数据, e.g., 加密，压缩，机 器相关的表示转换 </li><li>会话层: 数据交换的同步，检查点，恢复 </li><li>互联网协议栈没有这两层! <ul><li>这些服务，如果需要的话，必须被<strong>应用程序</strong>实现</li></ul></li></ul><p>![封装和解封装](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230816154727523.png)</p><p>各层次的协议数据单元 </p><ul><li>应用层：报文(message) </li><li>传输层：报文段(segment)：TCP段，UDP数据报 </li><li>网络层：分组packet（如果无连接方式：数据报 datagram） </li><li>数据链路层：帧(frame) </li><li>物理层：位(bit)</li></ul><hr><h1 id="七、历史"><a href="#七、历史" class="headerlink" title="七、历史"></a>七、历史</h1><p>![image-20230816164241892](..&#x2F;images&#x2F;第1章 计算机网络概述&#x2F;image-20230816164241892.png)</p><hr><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li><p>组成角度看什么是互联网 </p><ul><li><p>边缘：端系统（包括应用）+ 接入网 </p></li><li><p>核心：网络交换设备+通信链路 </p></li><li><p>协议：对等层实体通信过程中遵守的规则的集合 </p><ul><li>语法，语义，时序</li></ul></li></ul></li><li><p>为了实现复杂的网络功能，采用分层方式设计、实现和调试 </p><ul><li>应用层，传输层，网络层，数据链路层，物理层 </li><li>协议数据单位： <ul><li>报文，报文段，分组，帧，位</li></ul></li></ul></li><li><p>从 服务角度看互联网 </p><ul><li>通信服务基础设施 <ul><li>提供的通信服务：面向连接 无连接</li></ul></li><li>应用</li></ul></li><li><p>应用之间的交互 </p><ul><li>C&#x2F;S模式 </li><li>P2P模式</li></ul></li><li><p>数据交换 </p><ul><li>分组数据交换 </li><li>线路交换 </li><li>比较 线路交换和分组交换</li></ul></li><li><p>分组交换的2种方式 </p><ul><li>虚电路 </li><li>数据报</li></ul></li><li><p>接入网和物理媒介 </p><ul><li>接入网技术： <ul><li>住宅：ADSL，拨号，cable modem </li><li>单位：以太网 </li><li>无线接入方式</li></ul></li><li>物理媒介 <ul><li>光纤，同轴电缆，以太网，双绞线</li></ul></li></ul></li><li><p>ISP层次结构</p></li><li><p>分组交换网络中延迟和丢失是如何发生的 </p><ul><li>延迟的组成：处理、传输、传播、排队</li></ul></li><li><p>网络的分层体系结构 </p><ul><li>分层体系结构 </li><li>服务 </li><li>协议数据单元 </li><li>封装与解封装</li></ul></li><li><p>历史</p></li></ul><hr><p>对应视频</p><ul><li><a href="https://www.bilibili.com/video/BV1JV411t7ow?p=3&vd_source=49e30194f6d5798a1f90d69dad9c0460">1.1 什么是Internet？_哔哩哔哩_bilibili</a></li><li>…</li><li><a href="https://www.bilibili.com/video/BV1JV411t7ow?p=11&vd_source=49e30194f6d5798a1f90d69dad9c0460">1.9 小结_哔哩哔哩_bilibili</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章插入本地图片</title>
      <link href="/2023/08/12/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2023/08/12/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一：安装插件"><a href="#方法一：安装插件" class="headerlink" title="方法一：安装插件"></a>方法一：安装插件</h2><ol><li>在<code>Typora文件</code> –&gt; <code>设置偏好</code> –&gt; <code>图像</code>。在<code>插入图片时</code>选择复制到指定路径&#96;，设置为</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>安装插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件（可以不配置，Typora复制图片时就会创建目录）<ul><li>在 Hexo 根目录打开配置文件 <code>_config.yml</code></li><li>搜索 <code>post_asset_folder</code>，<code>false</code> 改为 <code>true</code></li><li><code>hexo new page</code> 生成新文章，会在同级目录创建一个同名文件夹。</li></ul></li></ol><blockquote><p>大概是从 <code>Hexo 5</code> 开始<a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-image</a> 已无效。</p></blockquote><hr><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>官方提供的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><blockquote><p>但是这样不方便，Typora不能显示图片。</p></blockquote><hr><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，其允许你无需使用 <code>asset_img</code> 标签插件就可以在 markdown 中嵌入图片</p><p>如需启用：修改一下配置文件_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后再配置一下Typora</p><ol><li><p>在Hexo根目录（<code>HexoBlog</code>）的<code>source</code>下新建<code>imags</code>文件夹。</p><blockquote><p>注意<code>imags</code>与<code>_posts</code><strong>同级</strong>。</p></blockquote><p><img src="/../images/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/image-20230813232133245.png" class="lazyload placeholder" data-srcset="/../images/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/image-20230813232133245.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230813232133245"></p></li><li><p>在Typora<code>文件</code> –&gt; <code>设置偏好</code> –&gt; <code>图像</code>。在<code>插入图片时</code>选择<code>复制到指定路径</code>，设置为</p></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../source/images//$&#123;filename&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>格式</code> –&gt; <code>图像</code> –&gt; <code>设置图片根目录</code>将<code>HexoBlog/source</code>设置为<strong>根目录</strong>。（本人测试不设置根目录也行，根据自己情况来设置）</li></ol><hr><p>参考文章</p><ul><li><p><a href="https://moeci.com/posts/hexo-typora/">Hexo + Typora + 开发Hexo插件 解决图片路径不一致 | yiyun’s Blog (moeci.com)</a></p></li><li><p><a href="https://www.zhihu.com/question/419663130">(1 条消息) hexo文章中如何放入图片? - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹 | Hexo</a></p></li><li><p><a href="https://link.zhihu.com/?target=https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo本地图片 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 CSP-J1题目</title>
      <link href="/2023/08/11/2022%E5%B9%B4CSP-J1/"/>
      <url>/2023/08/11/2022%E5%B9%B4CSP-J1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、单项选择题"><a href="#一、单项选择题" class="headerlink" title="一、单项选择题"></a>一、单项选择题</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691680483443-e668451f-cc7f-419c-a4fe-20d67c64c531.png#averageHue=%23f5f2f1&clientId=ud5fa4b20-f558-4&from=paste&height=177&id=u25e12d40&originHeight=177&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14971&status=done&style=none&taskId=u32247575-d2f1-4b97-989d-817e662ef3f&title=&width=465" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691680483443-e668451f-cc7f-419c-a4fe-20d67c64c531.png#averageHue=%23f5f2f1&clientId=ud5fa4b20-f558-4&from=paste&height=177&id=u25e12d40&originHeight=177&originWidth=465&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14971&status=done&style=none&taskId=u32247575-d2f1-4b97-989d-817e662ef3f&title=&width=465" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选A。其他三个选项都有<strong>类</strong>。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681244468-f819bdbe-2b74-41b0-a6d0-4202f7ca5862.png#averageHue=%23fbfbfa&clientId=ud5fa4b20-f558-4&from=paste&height=237&id=u7e05be8e&originHeight=237&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11735&status=done&style=none&taskId=u5c1709f6-c053-430b-9e8d-115afb6940f&title=&width=653" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681244468-f819bdbe-2b74-41b0-a6d0-4202f7ca5862.png#averageHue=%23fbfbfa&clientId=ud5fa4b20-f558-4&from=paste&height=237&id=u7e05be8e&originHeight=237&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11735&status=done&style=none&taskId=u5c1709f6-c053-430b-9e8d-115afb6940f&title=&width=653" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/3f035d17f2a0b726e912ef6a6ead1c27.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcIjNcblx0XHRcdDRcblx0XHRcdDVcblx0XHRcdDZcIikgLS0-fOW8ueWHujN8IEIoXCI0XG5cdFx0XHQ1XG5cdFx0XHQ2XCIpIC0tPnzlvLnlh7o0fCBDKFwiNVxuXHRcdFx0NlwiKSAtLT585by55Ye6NnwgRFs25Ye65LiN5p2lXVxuXG4gc3R5bGUgRCBmaWxsOiNiYmYsc3Ryb2tlOiNmNjYsc3Ryb2tlLXdpZHRoOjJweCxjb2xvcjojZmZmLHN0cm9rZS1kYXNoYXJyYXk6IDUgNSIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvM2YwMzVkMTdmMmEwYjcyNmU5MTJlZjZhNmVhZDFjMjcuc3ZnIiwiaWQiOiJ2UG1TaiIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__mermaid_v3/3f035d17f2a0b726e912ef6a6ead1c27.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcIjNcblx0XHRcdDRcblx0XHRcdDVcblx0XHRcdDZcIikgLS0-fOW8ueWHujN8IEIoXCI0XG5cdFx0XHQ1XG5cdFx0XHQ2XCIpIC0tPnzlvLnlh7o0fCBDKFwiNVxuXHRcdFx0NlwiKSAtLT585by55Ye6NnwgRFs25Ye65LiN5p2lXVxuXG4gc3R5bGUgRCBmaWxsOiNiYmYsc3Ryb2tlOiNmNjYsc3Ryb2tlLXdpZHRoOjJweCxjb2xvcjojZmZmLHN0cm9rZS1kYXNoYXJyYXk6IDUgNSIsInVybCI6Imh0dHBzOi8vY2RuLm5sYXJrLmNvbS95dXF1ZS9fX21lcm1haWRfdjMvM2YwMzVkMTdmMmEwYjcyNmU5MTJlZjZhNmVhZDFjMjcuc3ZnIiwiaWQiOiJ2UG1TaiIsIm1hcmdpbiI6eyJ0b3AiOnRydWUsImJvdHRvbSI6dHJ1ZX0sImNhcmQiOiJkaWFncmFtIn0=" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681235061-dcf25f2c-16b2-4c06-be71-9a423fb8a03e.png#averageHue=%23f5f4f3&clientId=ud5fa4b20-f558-4&from=paste&height=330&id=u136c8abd&originHeight=330&originWidth=432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15734&status=done&style=none&taskId=u2bd325d6-d429-4287-ae3c-a93d84401fa&title=&width=432" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681235061-dcf25f2c-16b2-4c06-be71-9a423fb8a03e.png#averageHue=%23f5f4f3&clientId=ud5fa4b20-f558-4&from=paste&height=330&id=u136c8abd&originHeight=330&originWidth=432&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15734&status=done&style=none&taskId=u2bd325d6-d429-4287-ae3c-a93d84401fa&title=&width=432" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。</p><p> A. 将 x 的值赋为 <code>101</code><br> B. 将 y 的值赋为 <code>201</code><br> C. 将 <code>p</code> 指向 x 的地址</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681217068-9924da00-6953-4b58-b1ef-3a4a65f5fc3d.png#averageHue=%23f6f4f2&clientId=ud5fa4b20-f558-4&from=paste&height=220&id=u833a2ade&originHeight=220&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12752&status=done&style=none&taskId=u95312220-7555-4f5d-8963-07ce7ab556a&title=&width=333" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681217068-9924da00-6953-4b58-b1ef-3a4a65f5fc3d.png#averageHue=%23f6f4f2&clientId=ud5fa4b20-f558-4&from=paste&height=220&id=u833a2ade&originHeight=220&originWidth=333&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12752&status=done&style=none&taskId=u95312220-7555-4f5d-8963-07ce7ab556a&title=&width=333" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。</p><p>A错误，数组可以排序。<br> B错误，没有上下文，不能确定。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681689624-2358d993-4887-4ce4-b1d0-20e16abd82c2.png#averageHue=%23f8f6f5&clientId=ud5fa4b20-f558-4&from=paste&height=275&id=u2c35b9e9&originHeight=275&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23163&status=done&style=none&taskId=ue634ce60-2816-494b-a3db-47630d57ef9&title=&width=651" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691681689624-2358d993-4887-4ce4-b1d0-20e16abd82c2.png#averageHue=%23f8f6f5&clientId=ud5fa4b20-f558-4&from=paste&height=275&id=u2c35b9e9&originHeight=275&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23163&status=done&style=none&taskId=ue634ce60-2816-494b-a3db-47630d57ef9&title=&width=651" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。<strong>出队列</strong>的顺序跟<strong>进队列</strong>的顺序一样，不用管，跟第2题差不多，出队列Q的顺序看作<strong>出栈S</strong>的顺序即可。<br><img src="https://cdn.nlark.com/yuque/__mermaid_v3/f3fd3bc31ba06207b3a9152c0dfa50f5.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcImUyXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTJ8IEIoXCJlNFxuXHRcdFx0ZTNcblx0XHRcdGUxXCIpIC0tPnzlvLnlh7plNHwgQyhcImUzXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTMsIGU1IGU26L-b5qCIfCBEKFwiZTZcblx0XHRcdGU1XG5cdFx0XHRlMVwiKSAtLT585L6d5qyh5by55Ye6ZTYgZTUgZTF8IGVtcHR5IiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fbWVybWFpZF92My9mM2ZkM2JjMzFiYTA2MjA3YjNhOTE1MmMwZGZhNTBmNS5zdmciLCJpZCI6IlRJbDZwIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__mermaid_v3/f3fd3bc31ba06207b3a9152c0dfa50f5.svg#lake_card_v2=eyJ0eXBlIjoibWVybWFpZCIsImNvZGUiOiJncmFwaCBMUlxuICAgICAgQShcImUyXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTJ8IEIoXCJlNFxuXHRcdFx0ZTNcblx0XHRcdGUxXCIpIC0tPnzlvLnlh7plNHwgQyhcImUzXG5cdFx0XHRlMVwiKSAtLT585by55Ye6ZTMsIGU1IGU26L-b5qCIfCBEKFwiZTZcblx0XHRcdGU1XG5cdFx0XHRlMVwiKSAtLT585L6d5qyh5by55Ye6ZTYgZTUgZTF8IGVtcHR5IiwidXJsIjoiaHR0cHM6Ly9jZG4ubmxhcmsuY29tL3l1cXVlL19fbWVybWFpZF92My9mM2ZkM2JjMzFiYTA2MjA3YjNhOTE1MmMwZGZhNTBmNS5zdmciLCJpZCI6IlRJbDZwIiwibWFyZ2luIjp7InRvcCI6dHJ1ZSwiYm90dG9tIjp0cnVlfSwiY2FyZCI6ImRpYWdyYW0ifQ==" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp">栈容量最多为3。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691683418598-20355321-f926-4e0b-bbf4-69aec10e953d.png#averageHue=%23faf9f8&clientId=ucc33ebdc-52ee-4&from=paste&height=209&id=u35dd5b7d&originHeight=209&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10846&status=done&style=none&taskId=ua6b02401-0c56-46a0-ba05-d5e78d4b29f&title=&width=523" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691683418598-20355321-f926-4e0b-bbf4-69aec10e953d.png#averageHue=%23faf9f8&clientId=ucc33ebdc-52ee-4&from=paste&height=209&id=u35dd5b7d&originHeight=209&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10846&status=done&style=none&taskId=ua6b02401-0c56-46a0-ba05-d5e78d4b29f&title=&width=523" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。</p><p>方法1：按照运算顺序，把运算符放前面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个算 b - c</span><br><span class="line">把 - 放前面，变成 - b c</span><br><span class="line"></span><br><span class="line">然后乘d，(- b c) * d</span><br><span class="line">* 放前面，变成 * (- b c) d</span><br><span class="line"></span><br><span class="line">最后加a，a + * (- b c) d</span><br><span class="line">+ 放前面，变成 + a * (- b c) d</span><br></pre></td></tr></table></figure><p>方法二：根据表达式画一个二叉树，然后先序遍历。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691740416496-1559239f-2b66-440e-9d9d-a17513f68660.jpeg" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691740416496-1559239f-2b66-440e-9d9d-a17513f68660.jpeg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>得到<code>+ a * - b c d</code></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691737266942-90dc50e5-1c44-48ab-abd1-d46b506c5d4c.png#averageHue=%23faf8f7&clientId=u8b640601-9c88-4&from=paste&height=219&id=uf02bb598&originHeight=219&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13814&status=done&style=none&taskId=ufa2dab19-16a4-4c74-91bc-cfda475967b&title=&width=638" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691737266942-90dc50e5-1c44-48ab-abd1-d46b506c5d4c.png#averageHue=%23faf8f7&clientId=u8b640601-9c88-4&from=paste&height=219&id=uf02bb598&originHeight=219&originWidth=638&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13814&status=done&style=none&taskId=ufa2dab19-16a4-4c74-91bc-cfda475967b&title=&width=638" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。构造哈夫曼树，每次选最小的两个数，合成一个新节点。<br><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691741383335-8b50cc84-4899-43ba-ac77-5084ed92dfb7.jpeg" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/jpeg/32540558/1691741383335-8b50cc84-4899-43ba-ac77-5084ed92dfb7.jpeg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>到达d节点的路径为0 0，长度为2。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691741389529-54219612-d217-47d6-a4ca-c98fa06d783e.png#averageHue=%23f9f7f6&clientId=ue9b01e2c-da1b-4&from=paste&height=257&id=uda87080d&originHeight=257&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16372&status=done&style=none&taskId=u2cd0b711-d243-4a40-917f-e1af5ca41ec&title=&width=653" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691741389529-54219612-d217-47d6-a4ca-c98fa06d783e.png#averageHue=%23f9f7f6&clientId=ue9b01e2c-da1b-4&from=paste&height=257&id=uda87080d&originHeight=257&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16372&status=done&style=none&taskId=u2cd0b711-d243-4a40-917f-e1af5ca41ec&title=&width=653" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。</p><ul><li>9是奇数，是右子节点，兄弟节点在左边。</li><li>左子<code>2 * x</code>，右子<code>2 * x + 1</code>，9的右子节点位置为<code>2 * 9 + 1 = 19</code>。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742002460-8c8d420c-f165-414a-8dee-a36bff44eedc.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=254&id=u4f655abf&originHeight=254&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13441&status=done&style=none&taskId=ue1e7157e-c1f5-4ad9-a5d2-608fa168468&title=&width=641" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742002460-8c8d420c-f165-414a-8dee-a36bff44eedc.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=254&id=u4f655abf&originHeight=254&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13441&status=done&style=none&taskId=ue1e7157e-c1f5-4ad9-a5d2-608fa168468&title=&width=641" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。边最少的情况，就是每个顶点只有一条入边和一条出边，连成一个圈，即连通图。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742654153-798c18ac-7010-4705-a0c0-cdb531b3639d.png#averageHue=%23f3f0ee&clientId=ue9b01e2c-da1b-4&from=paste&height=212&id=ue0a6924d&originHeight=212&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16954&status=done&style=none&taskId=u3ed17bf9-c65e-4e72-9ef9-6e99964cd23&title=&width=433" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742654153-798c18ac-7010-4705-a0c0-cdb531b3639d.png#averageHue=%23f3f0ee&clientId=ue9b01e2c-da1b-4&from=paste&height=212&id=ue0a6924d&originHeight=212&originWidth=433&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16954&status=done&style=none&taskId=u3ed17bf9-c65e-4e72-9ef9-6e99964cd23&title=&width=433" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。虽然本质不同，但是勉强能用，比较麻烦，用两个栈就能实现。</p><ul><li>入第1个栈，顺序反了。</li><li>入第2个栈，顺序再反过来，就是原来的顺序。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742892913-2a1d97a3-96b7-4f31-a2b8-f70c3cdc439a.png#averageHue=%23f6f4f2&clientId=ue9b01e2c-da1b-4&from=paste&height=238&id=ufb8605cc&originHeight=238&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21510&status=done&style=none&taskId=ud6a8f770-0dc8-4af3-9f3b-4b34ae32a88&title=&width=658" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691742892913-2a1d97a3-96b7-4f31-a2b8-f70c3cdc439a.png#averageHue=%23f6f4f2&clientId=ue9b01e2c-da1b-4&from=paste&height=238&id=ufb8605cc&originHeight=238&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21510&status=done&style=none&taskId=ud6a8f770-0dc8-4af3-9f3b-4b34ae32a88&title=&width=658" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选D。</p><ul><li><code>s-&gt;next = p-&gt;next;</code>在<code>p-&gt;next = s;</code> 前，否则就变成<code>s-&gt;next = s</code></li><li><code>p-&gt;next-&gt;prev = s;</code>在<code>p-&gt;next = s;</code>前，否则变成<code>s-&gt;prev = s</code></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744121206-b85defab-8582-4fb0-8b00-482104b07b0e.png#averageHue=%23f6f5f3&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u5b3476a0&originHeight=213&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14398&status=done&style=none&taskId=u12343690-1943-4db6-9a8a-f49868ec64b&title=&width=470" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744121206-b85defab-8582-4fb0-8b00-482104b07b0e.png#averageHue=%23f6f5f3&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u5b3476a0&originHeight=213&originWidth=470&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14398&status=done&style=none&taskId=u12343690-1943-4db6-9a8a-f49868ec64b&title=&width=470" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744419034-cbc08b5c-d4ce-4edc-8d24-eb52c2c26b26.png#averageHue=%23f5f0dc&clientId=ue9b01e2c-da1b-4&from=paste&height=251&id=ub1dc5cb6&originHeight=251&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95608&status=done&style=none&taskId=u507d985b-9856-4ec6-959b-8f4c46a5d26&title=&width=928" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744419034-cbc08b5c-d4ce-4edc-8d24-eb52c2c26b26.png#averageHue=%23f5f0dc&clientId=ue9b01e2c-da1b-4&from=paste&height=251&id=ub1dc5cb6&originHeight=251&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=95608&status=done&style=none&taskId=u507d985b-9856-4ec6-959b-8f4c46a5d26&title=&width=928" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ul><li>稳定排序：<ul><li>插入排序，基数排序，归并排序，冒泡排序，计数排序。</li></ul></li><li>不稳定排序：<ul><li>快速排序，希尔排序，简单选择排序，堆排序</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744550450-05d64981-72f1-4056-807d-a440eef20cb1.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u635b576c&originHeight=213&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7927&status=done&style=none&taskId=u272d34d7-ea5b-4d46-8b8d-43c19be8d27&title=&width=326" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744550450-05d64981-72f1-4056-807d-a440eef20cb1.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=213&id=u635b576c&originHeight=213&originWidth=326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7927&status=done&style=none&taskId=u272d34d7-ea5b-4d46-8b8d-43c19be8d27&title=&width=326" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选C。<br><img src="https://cdn.nlark.com/yuque/__latex/adb7af3133ef066c578f51310825db15.svg#card=math&code=3%2A8%5E1%20%2B%203%2A8%5E0%20%2B%201%2A8%5E%7B-1%7D%20%3D%2026.125%0A&id=fgZ1F" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/__latex/adb7af3133ef066c578f51310825db15.svg#card=math&code=3%2A8%5E1%20%2B%203%2A8%5E0%20%2B%201%2A8%5E%7B-1%7D%20%3D%2026.125%0A&id=fgZ1F" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744825884-3aea8261-bf9c-478c-acec-fdf87c38f13b.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=237&id=ESHU7&originHeight=237&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10519&status=done&style=none&taskId=u53f008f5-8556-4908-9a13-27ebdafd311&title=&width=650" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691744825884-3aea8261-bf9c-478c-acec-fdf87c38f13b.png#averageHue=%23fbfafa&clientId=ue9b01e2c-da1b-4&from=paste&height=237&id=ESHU7&originHeight=237&originWidth=650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10519&status=done&style=none&taskId=u53f008f5-8556-4908-9a13-27ebdafd311&title=&width=650" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。注意是<strong>子串</strong>，得连续，不是子序列。</p><ul><li>长度0：空串</li><li>长度1:   a、b、c</li><li>长度2：ab、bc、ca</li><li>长度3：abc、bca、cab</li><li>长度4：abca、bcab</li><li>长度5：abcab</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745234787-4422176c-e993-4dc0-ada8-7e5774c40e35.png#averageHue=%23f1eeec&clientId=ue9b01e2c-da1b-4&from=paste&height=203&id=ud2c7b188&originHeight=203&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20114&status=done&style=none&taskId=ucee1a921-2e56-442f-9f56-e48ac83600e&title=&width=481" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745234787-4422176c-e993-4dc0-ada8-7e5774c40e35.png#averageHue=%23f1eeec&clientId=ue9b01e2c-da1b-4&from=paste&height=203&id=ud2c7b188&originHeight=203&originWidth=481&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20114&status=done&style=none&taskId=ucee1a921-2e56-442f-9f56-e48ac83600e&title=&width=481" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>选B。</p><h1 id="二、阅读程序"><a href="#二、阅读程序" class="headerlink" title="二、阅读程序"></a>二、阅读程序</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745643505-73f78884-dfae-4502-8098-5968ab857edd.png#averageHue=%23f1f0ef&clientId=ue9b01e2c-da1b-4&from=paste&height=433&id=u3b8a2eeb&originHeight=433&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23124&status=done&style=none&taskId=u7684c64a-7dc1-4ee0-9e95-0ccdffb4d99&title=&width=618" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745643505-73f78884-dfae-4502-8098-5968ab857edd.png#averageHue=%23f1f0ef&clientId=ue9b01e2c-da1b-4&from=paste&height=433&id=u3b8a2eeb&originHeight=433&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23124&status=done&style=none&taskId=u7684c64a-7dc1-4ee0-9e95-0ccdffb4d99&title=&width=618" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745650574-d4570682-09cd-4358-9ae8-619df08a5d92.png#averageHue=%23faf9f9&clientId=ue9b01e2c-da1b-4&from=paste&height=732&id=u67e9cb5f&originHeight=732&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39238&status=done&style=none&taskId=uf333741f-4335-43dd-963d-4ad1acdf172&title=&width=602" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691745650574-d4570682-09cd-4358-9ae8-619df08a5d92.png#averageHue=%23faf9f9&clientId=ue9b01e2c-da1b-4&from=paste&height=732&id=u67e9cb5f&originHeight=732&originWidth=602&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39238&status=done&style=none&taskId=uf333741f-4335-43dd-963d-4ad1acdf172&title=&width=602" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>A B B B B B<br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747829385-5d930deb-4f76-4598-a190-373d6b4ece71.png#averageHue=%23f5f5f4&clientId=ue9b01e2c-da1b-4&from=paste&height=666&id=u0ea02199&originHeight=666&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=518447&status=done&style=none&taskId=u5dd27d2f-5468-49a8-94d7-8533fe47ed7&title=&width=1271" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747829385-5d930deb-4f76-4598-a190-373d6b4ece71.png#averageHue=%23f5f5f4&clientId=ue9b01e2c-da1b-4&from=paste&height=666&id=u0ea02199&originHeight=666&originWidth=1271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=518447&status=done&style=none&taskId=u5dd27d2f-5468-49a8-94d7-8533fe47ed7&title=&width=1271" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747940828-bad5e9a0-8ead-4c54-849b-c9db98e6a483.png#averageHue=%23efeeed&clientId=ue9b01e2c-da1b-4&from=paste&height=995&id=u2364d296&originHeight=995&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57000&status=done&style=none&taskId=uba175945-3a14-4015-b495-1c83ed0c320&title=&width=648" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747940828-bad5e9a0-8ead-4c54-849b-c9db98e6a483.png#averageHue=%23efeeed&clientId=ue9b01e2c-da1b-4&from=paste&height=995&id=u2364d296&originHeight=995&originWidth=648&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57000&status=done&style=none&taskId=uba175945-3a14-4015-b495-1c83ed0c320&title=&width=648" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747954122-33c1d86f-359a-4ace-8cf1-1e15e7eb6d5b.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=864&id=u6a6af426&originHeight=864&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50950&status=done&style=none&taskId=ua2b6fe04-263f-4117-8b67-2c5f7abe5ea&title=&width=564" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691747954122-33c1d86f-359a-4ace-8cf1-1e15e7eb6d5b.png#averageHue=%23faf9f8&clientId=ue9b01e2c-da1b-4&from=paste&height=864&id=u6a6af426&originHeight=864&originWidth=564&originalType=binary&ratio=1&rotation=0&showTitle=false&size=50950&status=done&style=none&taskId=ua2b6fe04-263f-4117-8b67-2c5f7abe5ea&title=&width=564" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>B A A C C B</p><p>详解看参考视频。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756115123-3350bd18-bb6e-4208-93d0-5ab83376c1f8.png#averageHue=%23f1f0f0&clientId=u96c5f821-dcfb-4&from=paste&height=726&id=u41782d0a&originHeight=726&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35987&status=done&style=none&taskId=uec47ea6e-58ee-464d-9685-2e9eb9dd6d6&title=&width=664" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756115123-3350bd18-bb6e-4208-93d0-5ab83376c1f8.png#averageHue=%23f1f0f0&clientId=u96c5f821-dcfb-4&from=paste&height=726&id=u41782d0a&originHeight=726&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35987&status=done&style=none&taskId=uec47ea6e-58ee-464d-9685-2e9eb9dd6d6&title=&width=664" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756125008-1519b60a-827b-413c-b3e7-daab0c9bce01.png#averageHue=%23faf9f9&clientId=u96c5f821-dcfb-4&from=paste&height=929&id=u50a0091b&originHeight=929&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56149&status=done&style=none&taskId=ub8c66fd5-4139-4a8b-a2e6-9d5e3b71ccd&title=&width=656" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691756125008-1519b60a-827b-413c-b3e7-daab0c9bce01.png#averageHue=%23faf9f9&clientId=u96c5f821-dcfb-4&from=paste&height=929&id=u50a0091b&originHeight=929&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56149&status=done&style=none&taskId=ub8c66fd5-4139-4a8b-a2e6-9d5e3b71ccd&title=&width=656" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>A A B B C B A</p><p><code>solve1</code>函数用二分答案，找到小于等于根号n的最大整数。<br><code>solve2</code>函数中用到了牛顿迭代法求根号。<a href="https://www.zhihu.com/question/20690553">如何通俗易懂地讲解牛顿迭代法求开方（数值分析）？ - 知乎</a></p><ol><li>正确，<code>solve1</code>二分法，时间复杂度为logn，<code>solve2</code>循环k次，时间复杂度为k，总的时间复杂度就为logn + k。</li><li>正确，99的平方就是9081。</li><li>错误。double类型有误差。</li><li>错误，n不超过47000，mid最大<code>47000 / 2 = 23500</code>，int类型最大值为2147483647，开根号46341，比mid最大值大。</li><li><code>solve1</code>返回1，<code>solve2</code>返回<code>(1 + 2 / 1) / 2 = 1.5</code></li><li>1.732，次数越多，越接近根号3。</li><li>16的平方为256，solve1二分能找出来。</li></ol><h1 id="三、完善程序"><a href="#三、完善程序" class="headerlink" title="三、完善程序"></a>三、完善程序</h1><h2 id="第-19-题（1）"><a href="#第-19-题（1）" class="headerlink" title="第 19 题（1）"></a>第 19 题（1）</h2><p>（枚举因数）从小到大打印正整数 n 的所有正因数。</p><p>试补全枚举程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fac;</span><br><span class="line">    fac.<span class="built_in">reserve</span>((<span class="type">int</span>)<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n)));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i * i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (①)&#123;</span><br><span class="line">            fac.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; fac.<span class="built_in">size</span>(); ++k)&#123;</span><br><span class="line">        cout &lt;&lt; ② &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (③) &#123;</span><br><span class="line">        cout &lt;&lt; ④ &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = fac.<span class="built_in">size</span>() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)&#123;</span><br><span class="line">        cout &lt;&lt; ⑤ &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691759333220-400c3156-66af-4cd6-89bb-b032774142c0.png#averageHue=%23fdfcfb&clientId=u96c5f821-dcfb-4&from=paste&height=670&id=u7fe466ce&originHeight=670&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22902&status=done&style=none&taskId=ua30bf05c-c7bf-4b32-8509-69595125682&title=&width=479" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691759333220-400c3156-66af-4cd6-89bb-b032774142c0.png#averageHue=%23fdfcfb&clientId=u96c5f821-dcfb-4&from=paste&height=670&id=u7fe466ce&originHeight=670&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22902&status=done&style=none&taskId=ua30bf05c-c7bf-4b32-8509-69595125682&title=&width=479" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>A。判断i是否因数。</li><li>B。下标访问。</li><li>C。循环中运行了 1 到 根号n - 1 的数，此时 i 为根号n，没有判断是否因数，需要判断一下。</li><li>D。打印i。</li><li>A。打印大于根号n的数，用 n 除以 前面得到的因数 得到结果。</li></ol><hr><h2 id="第-20-题（2）（洪水填充）"><a href="#第-20-题（2）（洪水填充）" class="headerlink" title="第 20 题（2）（洪水填充）"></a>第 20 题（2）（洪水填充）</h2><p>现有用字符标记像素颜色的 8x8 图像。颜色填充的操作描述如下：给定起始像素的位置待填充的颜色，将起始像素和所有可达的像素（可达的定义：经过一次或多次的向上、下、左、右四个方向移动所能到达且终点和路径上所有像素的颜色都与起始像素颜色相同），替换为给定的颜色。<br>试补全程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ROWS = <span class="number">8</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> COLS = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> r, c;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> r, <span class="type">int</span> c): <span class="built_in">r</span>(r), <span class="built_in">c</span>(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_valid</span><span class="params">(<span class="type">char</span> image[ROWS][COLS], Point pt,</span></span></span><br><span class="line"><span class="params"><span class="function">              <span class="type">int</span> prev_color, <span class="type">int</span> new_color)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> r = pt.r;</span><br><span class="line">    <span class="type">int</span> c = pt.c;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> &lt;= r &amp;&amp; r &lt; ROWS &amp;&amp; <span class="number">0</span> &lt;= c &amp;&amp; c &lt; COLS &amp;&amp;</span><br><span class="line">            ① &amp;&amp; image[r][c] != new_color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flood_fill</span><span class="params">(<span class="type">char</span> image[ROWS][COLS], Point cur, <span class="type">int</span> new_color)</span> </span>&#123;</span><br><span class="line">    queue&lt;Point&gt; queue;</span><br><span class="line">    queue.<span class="built_in">push</span>(cur);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> prev_color = image[cur.r][cur.c];</span><br><span class="line">    ②;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Point pt = queue.<span class="built_in">front</span> ();</span><br><span class="line">        queue.<span class="built_in">pop</span> ();</span><br><span class="line"></span><br><span class="line">        Point points[<span class="number">4</span>] = &#123;③, <span class="built_in">Point</span>(pt.r - <span class="number">1</span>, pt.c),</span><br><span class="line">                           <span class="built_in">Point</span>(pt.r, pt.c + <span class="number">1</span>), <span class="built_in">Point</span>(pt.r, pt.c - <span class="number">1</span>)&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p ; points) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">is_valid</span>(image, p, prev_color, new_color)) &#123;</span><br><span class="line">                ④;</span><br><span class="line">                ⑤;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> image[ROWS][COLS] = &#123;&#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;,</span><br><span class="line">                              &#123;<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">cur</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="type">char</span> new_color = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">flood_fill</span>(image, cur, new_color);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> r = -; r &lt; ROWS; r++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; COLS; c++) &#123;</span><br><span class="line">            cout &lt;&lt; image[r][c] &lt;&lt; <span class="string">&#x27;&#x27;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">//输出:</span></span><br><span class="line"><span class="string">// g g g g g g g g</span></span><br><span class="line"><span class="string">// g g g g g g r r</span></span><br><span class="line"><span class="string">// g r r g g r g g</span></span><br><span class="line"><span class="string">// g y y y y r g r</span></span><br><span class="line"><span class="string">// g g g y y r g r</span></span><br><span class="line"><span class="string">// g g g y y y y r</span></span><br><span class="line"><span class="string">// g g g g g y g g</span></span><br><span class="line"><span class="string">// g g g g g y y g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691760399409-ab2883eb-a23f-4122-9b57-2fca81a7ca3d.png#averageHue=%23f4f4f4&clientId=u96c5f821-dcfb-4&from=paste&height=668&id=u37d6eaf2&originHeight=668&originWidth=512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42945&status=done&style=none&taskId=ued676ba9-cd67-4dc7-92d2-d74f82020fd&title=&width=512" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/32540558/1691760399409-ab2883eb-a23f-4122-9b57-2fca81a7ca3d.png#averageHue=%23f4f4f4&clientId=u96c5f821-dcfb-4&from=paste&height=668&id=u37d6eaf2&originHeight=668&originWidth=512&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42945&status=done&style=none&taskId=ued676ba9-cd67-4dc7-92d2-d74f82020fd&title=&width=512" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><ol><li>A。与新颜色一样已经有了，还要与<strong>起点的颜色</strong>相同。</li><li>B。存完了旧颜色，起点换成新颜色。</li><li>C。方向上下左右，还差方向下。</li><li>D。新位置更新为新颜色。</li><li>A。新位置入队列。</li></ol><hr><p>参考文章及视频</p><ul><li><a href="https://www.bilibili.com/video/BV1WV4y1K7dd/?spm_id_from=333.337.search-card.all.click&vd_source=49e30194f6d5798a1f90d69dad9c0460">2022年CSP-J入门级初赛（第一轮）真题讲解_哔哩哔哩_bilibili</a></li><li>[试题 - CSP 2022 入门级第一轮</li><li>洛谷有题](<a href="https://ti.luogu.com.cn/problemset/1039">https://ti.luogu.com.cn/problemset/1039</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2022CSP-J1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17 动态规划入门</title>
      <link href="/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/10/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>灵神【基础算法精讲】视频的个人笔记。</p></blockquote><p><strong>动态规划核心</strong></p><ul><li>状态<strong>定义</strong></li><li>状态<strong>转移方程</strong></li></ul><p>启发思路（跟子集型回溯一样）</p><ul><li><strong>选和不选</strong></li><li><strong>选哪个</strong></li></ul><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811234201400.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811234201400.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811234201400"></p><hr><h1 id="视频例题"><a href="#视频例题" class="headerlink" title="视频例题"></a>视频例题</h1><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198.打家劫舍</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811232947283.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811232947283.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811232947283"></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第 i 个</strong>房子选或不选。</li><li>子问题？从<strong>前 i 个</strong>房子中的最高金额。</li><li>下一个子问题？<ol><li>选：从<strong>前 i-2 个</strong>房子中的最高金额。</li><li>不选：从<strong>前 i-1 个</strong>房子中的最高金额。</li></ol></li></ol><p>递归</p><ul><li>会超时</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记忆化搜索</p><ul><li>用数组 cache 记录 <strong>入参</strong>对应的函数<strong>返回值</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>)  <span class="comment">//base case</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不选和选, 前i-1和前i-2的最高金额, 取最大值</span></span><br><span class="line">            <span class="keyword">return</span> cache[i] = <span class="built_in">max</span>(<span class="built_in">dfs</span>(i - <span class="number">1</span>), <span class="built_in">dfs</span>(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><ul><li>从记忆化搜索一比一翻译过来: <code>dp[i] = max(dp(i - 1), dp(i - 2) + nums[i]);</code></li><li>防止越界, dp[i]中的 i 全部+2: <code>dp[i + 2] = max(dp[i + 1], dp[i] + nums[i]);</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = max(dp(i - 1), dp(i - 2) + nums[i])</span></span><br><span class="line">            <span class="comment">//防止越界, dp[i]中的i全部+2</span></span><br><span class="line">            dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>空间优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> f0 = <span class="number">0</span>, f1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="type">int</span> new_f = <span class="built_in">max</span>(f1, f0 + x);</span><br><span class="line">            f0 = f1;</span><br><span class="line">            f1 = new_f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h1><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70.爬楼梯</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233037939.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233037939.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233037939"></p><ul><li>1 和 2 是边界，提前赋值。</li><li>楼梯有 3 阶时，有两种方法：</li><li><ul><li><strong>从 1 阶</strong> 爬 1 个台阶，到达 3 阶</li><li><strong>从 2 阶</strong> 爬 2 个台阶，到达 3 阶</li><li><strong>到达 1 阶</strong>有 1 种方法，<strong>到达 2 阶</strong>有 2 种方法，到达 3 阶楼梯有 1+2&#x3D;3 种方法。</li></ul></li><li>同理，楼梯有 i 阶</li><li><ul><li>从 i - 1 阶爬 1 个台阶</li><li>从 i - 2 阶爬 2 个台阶</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">3</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>; dp[<span class="number">2</span>] = <span class="number">2</span>; <span class="comment">//边界</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746.使用最小花费爬楼梯"></a><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746.使用最小花费爬楼梯</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233225607.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233225607.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233225607"></p><p>详细题解<a href="https://leetcode.cn/problems/min-cost-climbing-stairs/solutions/177077/yi-bu-yi-bu-tui-dao-dong-tai-gui-hua-de-duo-chong-/">力扣</a></p><p>回溯三问：</p><ol><li>当前操作？枚举<strong>第 i 层</strong>从 <code>i - 1</code>层来 或 从 <code>i - 2</code>层来，然后加上<strong>第 i 层</strong>的花费。</li><li>子问题？到达<strong>第 i 层</strong>台阶的最小花费。</li><li>下一个子问题？<ol><li>到达 <code>i - 1</code>层的最小花费</li><li>到达 <code>i - 2</code>层的最小花费</li></ol></li></ol><p><strong>顶部</strong>是第 n 层，取 <code>n-1</code>和 <code>n-2</code>的最小值，<code>min(dp[n - 1], dp[n - 2])</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            dp[i] = cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>]) + cost[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[n - <span class="number">1</span>], dp[n - <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466.统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466.统计构造好字符串的方案数</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233313270.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233313270.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233313270"></p><p>记忆化搜索</p><ul><li><code>dfs</code>得出长度为 i 的好字符串的方案数</li><li>循环, 求出长度从 <code>low</code>到 <code>high</code>的总方案数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cache</span><span class="params">(high + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; dfs = [&amp;] (<span class="type">int</span> i) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cache[i] != <span class="number">-1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> cache[i] = (<span class="built_in">dfs</span>(i - zero) + <span class="built_in">dfs</span>(i - one)) % MOD;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123;</span><br><span class="line">            ans += <span class="built_in">dfs</span>(i) % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(high + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= high; ++i) &#123;</span><br><span class="line">            <span class="comment">//dp[i] = dp[i - zero] + dp[i - one]; 会越界</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt;= zero) dp[i] += dp[i - zero];</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= one) dp[i] += dp[i - one];</span><br><span class="line">            dp[i] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = low; i &lt;= high; ++i) &#123; <span class="comment">//字符串长度为i的方案数</span></span><br><span class="line">            ans += dp[i] % MOD;</span><br><span class="line">            ans %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a><a href="https://leetcode.cn/problems/house-robber-ii/">213.打家劫舍 II</a></h2><p><img src="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233333712.png" class="lazyload placeholder" data-srcset="/../images/17-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/image-20230811233333712.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230811233333712"></p><p>官方题解<a href="https://leetcode.cn/problems/house-robber-ii/solutions/722767/da-jia-jie-she-ii-by-leetcode-solution-bwja/">力扣</a></p><p>跟例题打家劫舍的区别</p><ul><li><strong>第一间</strong>房子和<strong>最后一间</strong>房子不能同时偷</li></ul><p>用打家劫舍的解法，算两次</p><ul><li>第一次求 <code>0 ~ n-2</code></li><li>第二次求 <code>1 ~ n-1</code></li><li>最后求最大值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; dpRange = [&amp;] (<span class="type">int</span> start, <span class="type">int</span> end) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; <span class="built_in">dp</span>(n + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt;= end; ++i) &#123;</span><br><span class="line">                dp[i + <span class="number">2</span>] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dp[end + <span class="number">2</span>];</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0 ~ n-2 和 1 ~ n-1 的最大值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">dpRange</span>(<span class="number">0</span>, n - <span class="number">2</span>), <span class="built_in">dpRange</span>(<span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/10/hello-world/"/>
      <url>/2023/08/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
